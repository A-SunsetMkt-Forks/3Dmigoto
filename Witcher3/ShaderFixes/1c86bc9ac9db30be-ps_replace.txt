Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb12 : register(b12)
{
  float4 cb12[214];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[3];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = (int2)v0.xy;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  r0.x = t1.Load(r0.xyz).x;
  r0.y = r0.x * cb12[22].x + cb12[22].y;
  r0.y = r0.y * cb12[21].x + cb12[21].y;
  r0.y = max(9.999999747e-005, r0.y);
  r0.y = 1.000000e+000 / r0.y;
  r0.z = -cb3[0].x + r0.y;
  r0.z = saturate(cb3[0].w * r0.z);
  r0.z = sqrt(r0.z);
  r0.z = saturate(cb3[0].z * r0.z);
  r0.w = cb12[21].x + cb12[21].y;
  r0.w = max(9.999999747e-005, r0.w);
  r0.w = 1.000000e+000 / r0.w;
  r0.w = 9.990000129e-001 * r0.w;
  r0.y = r0.y >= r0.w;
  r1.xy = trunc(v0.xy);
  r2.xyzw = cb12[211].xyzw * r1.yyyy;
  r1.xyzw = cb12[210].xyzw * r1.xxxx + r2.xyzw;
  r1.xyzw = cb12[212].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb12[213].xyzw + r1.xyzw;
  r1.xyz = r1.xyz / r1.www;
  r1.xyz = -cb12[0].xyz + r1.xyz;
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  r0.x = r1.z * r0.x + -cb3[2].x;
  r0.x = saturate(-r0.x * cb3[2].y + 1.000000000e+000);
  r0.x = r0.z * r0.x;
  r0.x = r0.y ? r0.x : r0.z;
  r0.y = 9.999999776e-003 >= r0.x;
  if (r0.y != 0) {
    o0.xyzw = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
    return;
  }
  r1.xyzw = cb12[73].zwzw * v0.xyxy;
  r0.xyzw = cb12[73].zwzw * r0.xxxx;
  r2.xyzw = t0.SampleLevel(s0_s, r1.zw, 0.000000000e+000).xyzw;
  r3.xyzw = r0.zwzw * float4(-5.000000e-001,-1.500000e+000,1.500000e+000,-5.000000e-001) + r1.zwzw;
  r4.xyzw = t0.SampleLevel(s0_s, r3.xy, 0.000000000e+000).xyzw;
  r2.xyzw = r4.xyzw * float4(4.000000e+000,4.000000e+000,4.000000e+000,4.000000e+000) + r2.xyzw;
  r3.xyzw = t0.SampleLevel(s0_s, r3.zw, 0.000000000e+000).xyzw;
  r2.xyzw = r3.xyzw * float4(4.000000e+000,4.000000e+000,4.000000e+000,4.000000e+000) + r2.xyzw;
  r3.xyzw = r0.zwzw * float4(5.000000e-001,1.500000e+000,-1.500000e+000,5.000000e-001) + r1.zwzw;
  r4.xyzw = t0.SampleLevel(s0_s, r3.xy, 0.000000000e+000).xyzw;
  r2.xyzw = r4.xyzw * float4(4.000000e+000,4.000000e+000,4.000000e+000,4.000000e+000) + r2.xyzw;
  r3.xyzw = t0.SampleLevel(s0_s, r3.zw, 0.000000000e+000).xyzw;
  r2.xyzw = r3.xyzw * float4(4.000000e+000,4.000000e+000,4.000000e+000,4.000000e+000) + r2.xyzw;
  r3.xyzw = r0.zwzw * float4(-2.000000e+000,-1.000000e+000,1.000000e+000,-2.000000e+000) + r1.zwzw;
  r4.xyzw = t0.SampleLevel(s0_s, r3.xy, 0.000000000e+000).xyzw;
  r2.xyzw = r4.xyzw + r2.xyzw;
  r3.xyzw = t0.SampleLevel(s0_s, r3.zw, 0.000000000e+000).xyzw;
  r2.xyzw = r3.xyzw + r2.xyzw;
  r0.xyzw = r0.xyzw * float4(2.000000e+000,1.000000e+000,-1.000000e+000,2.000000e+000) + r1.xyzw;
  r1.xyzw = t0.SampleLevel(s0_s, r0.xy, 0.000000000e+000).xyzw;
  r1.xyzw = r2.xyzw + r1.xyzw;
  r0.xyzw = t0.SampleLevel(s0_s, r0.zw, 0.000000000e+000).xyzw;
  r0.xyzw = r1.xyzw + r0.xyzw;
  r1.x = max(1.000000047e-003, r0.w);
  r0.xyz = r0.xyz / r1.xxx;
  o0.xyz = float3(4.166667e-002,4.166667e-002,4.166667e-002) * r0.xyz;
  o0.w = saturate(2.500000000e+001 * r0.w);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb3[3], immediateIndexed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 5
ftoi r0.xy, v0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.x, r0.xyzw, t1.xyzw
mad r0.y, r0.x, cb12[22].x, cb12[22].y
mad r0.y, r0.y, cb12[21].x, cb12[21].y
max r0.y, r0.y, l(0.000100)
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
add r0.z, r0.y, -cb3[0].x
mul_sat r0.z, r0.z, cb3[0].w
sqrt r0.z, r0.z
mul_sat r0.z, r0.z, cb3[0].z
add r0.w, cb12[21].y, cb12[21].x
max r0.w, r0.w, l(0.000100)
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r0.w, r0.w, l(0.999000)
ge r0.y, r0.y, r0.w
round_z r1.xy, v0.xyxx
mul r2.xyzw, r1.yyyy, cb12[211].xyzw
mad r1.xyzw, cb12[210].xyzw, r1.xxxx, r2.xyzw
mad r1.xyzw, cb12[212].xyzw, r0.xxxx, r1.xyzw
add r1.xyzw, r1.xyzw, cb12[213].xyzw
div r1.xyz, r1.xyzx, r1.wwww
add r1.xyz, r1.xyzx, -cb12[0].xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mad r0.x, r1.z, r0.x, -cb3[2].x
mad_sat r0.x, -r0.x, cb3[2].y, l(1.000000)
mul r0.x, r0.x, r0.z
movc r0.x, r0.y, r0.x, r0.z
ge r0.y, l(0.010000), r0.x
if_nz r0.y
  mov o0.xyzw, l(0,0,0,0)
  ret 
endif 
mul r1.xyzw, v0.xyxy, cb12[73].zwzw
mul r0.xyzw, r0.xxxx, cb12[73].zwzw
sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
mad r3.xyzw, r0.zwzw, l(-0.500000, -1.500000, 1.500000, -0.500000), r1.zwzw
sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r3.xyxx, t0.xyzw, s0, l(0.000000)
mad r2.xyzw, r4.xyzw, l(4.000000, 4.000000, 4.000000, 4.000000), r2.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, r3.zwzz, t0.xyzw, s0, l(0.000000)
mad r2.xyzw, r3.xyzw, l(4.000000, 4.000000, 4.000000, 4.000000), r2.xyzw
mad r3.xyzw, r0.zwzw, l(0.500000, 1.500000, -1.500000, 0.500000), r1.zwzw
sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r3.xyxx, t0.xyzw, s0, l(0.000000)
mad r2.xyzw, r4.xyzw, l(4.000000, 4.000000, 4.000000, 4.000000), r2.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, r3.zwzz, t0.xyzw, s0, l(0.000000)
mad r2.xyzw, r3.xyzw, l(4.000000, 4.000000, 4.000000, 4.000000), r2.xyzw
mad r3.xyzw, r0.zwzw, l(-2.000000, -1.000000, 1.000000, -2.000000), r1.zwzw
sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r3.xyxx, t0.xyzw, s0, l(0.000000)
add r2.xyzw, r2.xyzw, r4.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, r3.zwzz, t0.xyzw, s0, l(0.000000)
add r2.xyzw, r2.xyzw, r3.xyzw
mad r0.xyzw, r0.xyzw, l(2.000000, 1.000000, -1.000000, 2.000000), r1.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)
add r1.xyzw, r1.xyzw, r2.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.zwzz, t0.xyzw, s0, l(0.000000)
add r0.xyzw, r0.xyzw, r1.xyzw
max r1.x, r0.w, l(0.001000)
div r0.xyz, r0.xyzx, r1.xxxx
mul o0.xyz, r0.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000)
mul_sat o0.w, r0.w, l(25.000000)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer cb12
// {
//
//   float4 cb12[214];                  // Offset:    0 Size:  3424
//
// }
//
// cbuffer cb3
// {
//
//   float4 cb3[3];                     // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// s0_s                              sampler      NA          NA    0        1
// t0                                texture  float4          2d    0        1
// t1                                texture  float4          2d    1        1
// cb3                               cbuffer      NA          NA    3        1
// cb12                              cbuffer      NA          NA   12        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_constantbuffer cb3[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 5
round_z r0.xy, v0.xyxx
ftoi r1.xy, r0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyzw, t1.yzxw
mad r0.w, r0.z, cb12[22].x, cb12[22].y
mad r0.w, r0.w, cb12[21].x, cb12[21].y
max r0.w, r0.w, l(0.000100)
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
add r1.x, r0.w, -cb3[0].x
mul_sat r1.x, r1.x, cb3[0].w
sqrt r1.x, r1.x
mul_sat r1.x, r1.x, cb3[0].z
add r1.y, cb12[21].y, cb12[21].x
max r1.y, r1.y, l(0.000100)
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
mul r1.y, r1.y, l(0.999000)
ge r0.w, r0.w, r1.y
mul r2.xyzw, r0.yyyy, cb12[211].xyzw
mad r2.xyzw, cb12[210].xyzw, r0.xxxx, r2.xyzw
mad r2.xyzw, cb12[212].xyzw, r0.zzzz, r2.xyzw
add r2.xyzw, r2.xyzw, cb12[213].xyzw
div r0.xyz, r2.xyzx, r2.wwww
add r0.xyz, r0.xyzx, -cb12[0].xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
rsq r0.x, r0.x
mad r0.x, r0.z, r0.x, -cb3[2].x
mad_sat r0.x, -r0.x, cb3[2].y, l(1.000000)
mul r0.x, r0.x, r1.x
movc r0.x, r0.w, r0.x, r1.x
ge r0.y, l(0.010000), r0.x
if_nz r0.y
  mov o0.xyzw, l(0,0,0,0)
  ret 
endif 
mul r1.xyzw, v0.xyxy, cb12[73].zwzw
mul r0.xyzw, r0.xxxx, cb12[73].zwzw
sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
mad r3.xyzw, r0.zwzw, l(-0.500000, -1.500000, 1.500000, -0.500000), r1.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r3.xyxx, t0.xyzw, s0, l(0.000000)
mad r2.xyzw, r4.xyzw, l(4.000000, 4.000000, 4.000000, 4.000000), r2.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, r3.zwzz, t0.xyzw, s0, l(0.000000)
mad r2.xyzw, r3.xyzw, l(4.000000, 4.000000, 4.000000, 4.000000), r2.xyzw
mad r3.xyzw, r0.zwzw, l(0.500000, 1.500000, -1.500000, 0.500000), r1.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r3.xyxx, t0.xyzw, s0, l(0.000000)
mad r2.xyzw, r4.xyzw, l(4.000000, 4.000000, 4.000000, 4.000000), r2.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, r3.zwzz, t0.xyzw, s0, l(0.000000)
mad r2.xyzw, r3.xyzw, l(4.000000, 4.000000, 4.000000, 4.000000), r2.xyzw
mad r3.xyzw, r0.zwzw, l(-2.000000, -1.000000, 1.000000, -2.000000), r1.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r3.xyxx, t0.xyzw, s0, l(0.000000)
add r2.xyzw, r2.xyzw, r4.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, r3.zwzz, t0.xyzw, s0, l(0.000000)
add r2.xyzw, r2.xyzw, r3.xyzw
mad r0.xyzw, r0.xyzw, l(2.000000, 1.000000, -1.000000, 2.000000), r1.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)
add r1.xyzw, r1.xyzw, r2.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.zwzz, t0.xyzw, s0, l(0.000000)
add r0.xyzw, r0.xyzw, r1.xyzw
max r1.x, r0.w, l(0.001000)
div r0.xyz, r0.xyzx, r1.xxxx
mul o0.xyz, r0.xyzx, l(0.041667, 0.041667, 0.041667, 0.000000)
mul_sat o0.w, r0.w, l(25.000000)
ret 
// Approximately 62 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
