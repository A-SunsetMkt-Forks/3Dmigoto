
cbuffer cbPerFrame : register(b0)
{
  float g_msaaWidth : packoffset(c0);
  float g_msaaHeight : packoffset(c0.y);
  float g_msaaTopLeftX : packoffset(c0.z);
  float g_msaaTopLeftY : packoffset(c0.w);
  float g_userWidth : packoffset(c1);
  float g_userHeight : packoffset(c1.y);
  float g_userTopLeftX : packoffset(c1.z);
  float g_userTopLeftY : packoffset(c1.w);
  int g_sampleCountUser : packoffset(c2);
  int g_sampleCountMSAA : packoffset(c2.y);
  int g_depthComparisonLess : packoffset(c2.z);
  int g_emitPartialFragment : packoffset(c2.w);
}
Texture2D<float4> g_ColorTexture : register(t0);
Texture2D<float4> g_DepthTexture : register(t1);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float oDepth : SV_Depth)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = g_msaaWidth * v1.xy + g_msaaTopLeftX;
  r0.xy = (int2)r0.xy;
  if (g_emitPartialFragment == 0) {
    r0.z = 0.000000000e+000;
    r0.z = g_ColorTexture.Load(r0.xyz).w;
    r0.z = r0.z < 9.900000095e-001;
    if (r0.z != 0) discard;
  }
  r0.w = 0.000000000e+000;
  r0.x = g_DepthTexture.Load(r0.xyw).x;
  oDepth = r0.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cbPerFrame
// {
//
//   float g_msaaWidth;                 // Offset:    0 Size:     4
//   float g_msaaHeight;                // Offset:    4 Size:     4
//   float g_msaaTopLeftX;              // Offset:    8 Size:     4
//   float g_msaaTopLeftY;              // Offset:   12 Size:     4
//   float g_userWidth;                 // Offset:   16 Size:     4 [unused]
//   float g_userHeight;                // Offset:   20 Size:     4 [unused]
//   float g_userTopLeftX;              // Offset:   24 Size:     4 [unused]
//   float g_userTopLeftY;              // Offset:   28 Size:     4 [unused]
//   int g_sampleCountUser;             // Offset:   32 Size:     4 [unused]
//   int g_sampleCountMSAA;             // Offset:   36 Size:     4 [unused]
//   int g_depthComparisonLess;         // Offset:   40 Size:     4 [unused]
//   int g_emitPartialFragment;         // Offset:   44 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_ColorTexture                    texture  float4          2d    0        1
// g_DepthTexture                    texture  float4          2d    1        1
// cbPerFrame                        cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Depth                 0    N/A   oDepth    DEPTH   float    YES
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output oDepth
dcl_temps 1
mad r0.xy, cb0[0].xyxx, v1.xyxx, cb0[0].zwzz
ftoi r0.xy, r0.xyxx
if_z cb0[2].w
  mov r0.z, l(0)
  ld_indexable(texture2d)(float,float,float,float) r0.z, r0.xyzz, t0.xywz
  lt r0.z, r0.z, l(0.990000)
  discard_nz r0.z
endif 
mov r0.w, l(0)
ld_indexable(texture2d)(float,float,float,float) r0.x, r0.xyww, t1.xyzw
mov oDepth, r0.x
ret 
// Approximately 12 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
