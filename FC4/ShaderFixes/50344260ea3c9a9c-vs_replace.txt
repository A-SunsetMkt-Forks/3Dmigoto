// HUD - crosshair, map, grapple hud icon

cbuffer CSceneFireUiPrimitiveParameterProvider : register(b0)
{
  float4 _BackgroundColor : packoffset(c0);
  float4 _BordersColor : packoffset(c1);
  float4 _ColorAdd : packoffset(c2);
  float4 _ColorAdjustment : packoffset(c3);
  float4 _ColorMultiplier : packoffset(c4);
  float4 _ColorTransparent : packoffset(c5);
  float4x4 _Transform : packoffset(c6);
  float4x4 _UVTransform : packoffset(c10);
  float2 _ViewportScaleXY : packoffset(c14);
  float _BordersSizeFloatArray[8] : packoffset(c15);
  float _Desaturation : packoffset(c22.y);
  float _DistanceFieldFloatArray[18] : packoffset(c23);
  float _LinePercentage : packoffset(c40.y);
  float _TexHeight : packoffset(c40.z);
  float _TexRatio : packoffset(c40.w);
  float _TextWidth : packoffset(c41);
  float _Time : packoffset(c41.y);
}

// Copied from lighting shaders b0 with 3DMigoto
cbuffer CViewportShaderParameterProvider : register(b13)
{
  float4 _AmbientColorMultiplier : packoffset(c0);
  float4 _AmbientOcclusionRanges_SunOcclusionFactor : packoffset(c1);
  float4 _BloomAdaptationFactor : packoffset(c2);
  float4 _CameraDirection_FOVDeg : packoffset(c3);
  float4 _CameraDistances : packoffset(c4);
  float4 _CameraNearPlaneSize : packoffset(c5);
  float4 _CameraPositionFractions_ZOffsetWS : packoffset(c6);
  float4 _CameraPositionFractions_ZOffsetWS_Previous : packoffset(c7);
  float4 _CameraPosition_DistanceScale : packoffset(c8);
  float4 _CameraPosition_DistanceScale_Previous : packoffset(c9);
  float4x4 _CullingViewProjectionMatrix : packoffset(c10);
  float4 _DepthScale : packoffset(c14);
  float4 _DepthTextureRcpSize : packoffset(c15);
  float4 _DepthTextureScaleOffset : packoffset(c16);
  float4 _FogParams : packoffset(c17);
  float4 _FogSHB : packoffset(c18);
  float4 _FogSHG : packoffset(c19);
  float4 _FogSHR : packoffset(c20);
  float4 _HeightFogParams : packoffset(c21);
  float4x4 _InvProjectionMatrix : packoffset(c22);
  float4x4 _InvViewMatrix : packoffset(c26);
  float4x4 _ProjectionMatrix : packoffset(c30);
  float4 _TempSunDirection : packoffset(c34);
  float4x4 _ViewMatrix : packoffset(c35);
  float4 _ViewPoint_ShadowProjDepthMin : packoffset(c39);
  float4x4 _ViewProjectionMatrix : packoffset(c40);
  float4x4 _ViewRotProjectionMatrix : packoffset(c44);
  float4x4 _ViewRotProjectionMatrix_Previous : packoffset(c48);
  float4 _ViewportSize : packoffset(c52);
  float2 _MotionVectorOffsets : packoffset(c53);
  float3 _CameraRight : packoffset(c54);
  float3 _CameraUp : packoffset(c55);
  float3 _EnvironmentMapColorOffset : packoffset(c56);
  float3 _EnvironmentMapColorScale : packoffset(c57);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

// W Buffer copied from the HBAO+ depth shader:
//Texture2D<float> WBuffer : register(t110);

// Depth buffer copied from other shaders to this input with 3Dmigoto:
Texture2D<float4> ZBuffer : register(t110);

float world_z_from_depth_buffer(float x, float y)
{
	uint width, height;
	float z;

	ZBuffer.GetDimensions(width, height);

	x = min(max((x / 2 + 0.5) * width, 0), width - 1);
	y = min(max((-y / 2 + 0.5) * height, 0), height - 1);
	z = ZBuffer.Load(int3(x, y, 0)).x;

	// Z buffer scaling copied from the lighting shaders:
	float4 r0;
	r0.x = _DepthScale.y * z + _DepthScale.x;
	r0.x = 1.000000e+000 / r0.x;
	r0.y = _CameraDistances.x * _CameraDistances.y;
	r0.x = _CameraDistances.z * r0.x;
	return r0.x;
}

float adjust_from_depth_buffer(float x, float y)
{
	float4 stereo = StereoParams.Load(0);
	float separation = stereo.x; float convergence = stereo.y;
	float old_offset, offset, w, sampled_w, distance;
	uint i;

	// Stereo cursor: To improve the accuracy of the stereo cursor, we
	// sample a number of points on the depth buffer, starting at the near
	// clipping plane and working towards original x + separation.
	//
	// You can think of this as a line in three dimensional space that
	// starts at each eye and stretches out towards infinity. We sample 255
	// points along this line (evenly spaced in the X axis) and compare
	// with the depth buffer to find where the line is first intersected.
	//
	// Note: The reason for sampling 255 points came from a restriction in
	// DX9/SM3 where loops had to run a constant number of iterations and
	// there was no way to set that number from within the shader itself.
	// I'm not sure if the same restriction applies in DX11 with SM4/5 - if
	// it doesn't, we could change this to check each pixel instead for
	// better accuracy.
	//
	// Based on DarkStarSword's stereo crosshair code originally developed
	// for Miasmata, adapted to Unity, then translated to HLSL.

	offset = -convergence * separation;	// Z = X offset from center
	distance = separation - offset;	// Total distance to cover (separation - starting X offset)

	old_offset = offset;
	for (i = 0; i < 255; i++) {
		offset += distance / 255.0;

		// Calculate depth for this point on the line:
		w = (separation * convergence) / (separation - offset);

		sampled_w = world_z_from_depth_buffer(x + offset, y);
		if (sampled_w == 0)
			return 0;

		// If the sampled depth is closer than the calculated depth,
		// we have found something that intersects the line, so exit
		// the loop and return the last point that was not intersected:
		if (w > sampled_w)
			break;

		old_offset = offset;
	}

	return old_offset;
}


// This function checks if the passed in texture coordinate matches any of the
// corners of the passed in bounding box of the desired icon on the texture.
// These coordinates need to be exact - use frame analysis of the vertex buffer
// to determine them.
bool matches_corner(float2 texcoord, float left, float right, float top, float bottom)
{
	return ((texcoord.x == left || texcoord.x == right)
	     && (texcoord.y == top || texcoord.y == bottom));
}


void main(
  float2 v0 : position0,
  float2 v1 : texcoord0,
  float4 v2 : color0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,

  uint id : SV_VertexID

  )
{
  float4 r0,r1;
  uint4 bitmask;
  r0.xy = v0.xy;
  r0.zw = float2(1.000000e+000,1.000000e+000);
  r1.x = dot(r0.xyww, _Transform._m00_m10_m20_m30);
  r1.y = dot(r0.xyww, _Transform._m01_m11_m21_m31);
  r1.xy = r1.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  o0.xy = float2(1.000000e+000,-1.000000e+000) * r1.xy;
  o0.z = dot(r0.xyww, _Transform._m02_m12_m22_m32);
  o0.w = dot(r0.xyzw, _Transform._m03_m13_m23_m33);
  o1.xyzw = v2.zyxw;
  o2.xy = v0.xy;
  o2.zw = v1.xy;

float4 stereo = StereoParams.Load(0);
float4 params = IniParams.Load(0);
float4 filter = IniParams.Load(int2(2,0));
float separation = stereo.x; float convergence = stereo.y;
float hud_depth = params.x; float tex_filter = filter.x; float partner_filter = filter.y;

if (tex_filter == 2 && partner_filter == 1 && abs(o0.x) >= 0.999) {
	// Vignette around the map based on texture, pixel shader and X
	// coordinate at far left/right of screen. Want to expand this
	// horizontally so that it still moves to hud_depth, but fills up the
	// expanded stereo screen.  Move the left side of right eye left, and
	// the right side of the left eye right to stretch the effect.
	// SV_VertexID tells us which side we are on:
	if ((stereo.z ==  1 && (id == 0 || id == 1 || id == 5)) ||
	    (stereo.z == -1 && (id == 2 || id == 3 || id == 4))) {
		o0.x += separation * hud_depth * 2;
	}
} else if (tex_filter == 3 && matches_corner(v1, 0.0185470581, 0.0341720581, 0.986338615, 0.994151115)) {
	// Matched crosshair texture AND texture coordinates
	o0.x += adjust_from_depth_buffer(0,0);
} else {
	o0.x += separation * hud_depth;
}

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer CSceneFireUiPrimitiveParameterProvider
// {
//
//   float4 _BackgroundColor;           // Offset:    0 Size:    16 [unused]
//   float4 _BordersColor;              // Offset:   16 Size:    16 [unused]
//   float4 _ColorAdd;                  // Offset:   32 Size:    16 [unused]
//   float4 _ColorAdjustment;           // Offset:   48 Size:    16 [unused]
//   float4 _ColorMultiplier;           // Offset:   64 Size:    16 [unused]
//   float4 _ColorTransparent;          // Offset:   80 Size:    16 [unused]
//   float4x4 _Transform;               // Offset:   96 Size:    64
//   float4x4 _UVTransform;             // Offset:  160 Size:    64 [unused]
//   float2 _ViewportScaleXY;           // Offset:  224 Size:     8 [unused]
//   float _BordersSizeFloatArray[8];   // Offset:  240 Size:   116 [unused]
//   float _Desaturation;               // Offset:  356 Size:     4 [unused]
//   float _DistanceFieldFloatArray[18];// Offset:  368 Size:   276 [unused]
//   float _LinePercentage;             // Offset:  644 Size:     4 [unused]
//   float _TexHeight;                  // Offset:  648 Size:     4 [unused]
//   float _TexRatio;                   // Offset:  652 Size:     4 [unused]
//   float _TextWidth;                  // Offset:  656 Size:     4 [unused]
//   float _Time;                       // Offset:  660 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CSceneFireUiPrimitiveParameterProvider    cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// position                 0   xy          0     NONE   float   xy  
// texcoord                 0   xy          1     NONE   float   xy  
// color                    0   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
vs_4_0
dcl_constantbuffer cb0[10], immediateIndexed
dcl_input v0.xy
dcl_input v1.xy
dcl_input v2.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 2
mov r0.xy, v0.xyxx
mov r0.zw, l(0,0,1.000000,1.000000)
dp4 r1.x, r0.xyww, cb0[6].xyzw
dp4 r1.y, r0.xyww, cb0[7].xyzw
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul o0.xy, r1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
dp4 o0.z, r0.xyww, cb0[8].xyzw
dp4 o0.w, r0.xyzw, cb0[9].xyzw
mov o1.xyzw, v2.zyxw
mov o2.xy, v0.xyxx
mov o2.zw, v1.xxxy
ret 
// Approximately 12 instruction slots used
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  
  
