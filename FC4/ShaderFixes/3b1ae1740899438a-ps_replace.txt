
cbuffer CViewportShaderParameterProvider : register(b0)
{
  float4 _AmbientColorMultiplier : packoffset(c0);
  float4 _AmbientOcclusionRanges_SunOcclusionFactor : packoffset(c1);
  float4 _BloomAdaptationFactor : packoffset(c2);
  float4 _CameraDirection_FOVDeg : packoffset(c3);
  float4 _CameraDistances : packoffset(c4);
  float4 _CameraNearPlaneSize : packoffset(c5);
  float4 _CameraPositionFractions_ZOffsetWS : packoffset(c6);
  float4 _CameraPositionFractions_ZOffsetWS_Previous : packoffset(c7);
  float4 _CameraPosition_DistanceScale : packoffset(c8);
  float4 _CameraPosition_DistanceScale_Previous : packoffset(c9);
  float4x4 _CullingViewProjectionMatrix : packoffset(c10);
  float4 _DepthScale : packoffset(c14);
  float4 _DepthTextureRcpSize : packoffset(c15);
  float4 _DepthTextureScaleOffset : packoffset(c16);
  float4 _FogParams : packoffset(c17);
  float4 _FogSHB : packoffset(c18);
  float4 _FogSHG : packoffset(c19);
  float4 _FogSHR : packoffset(c20);
  float4 _HeightFogParams : packoffset(c21);
  float4x4 _InvProjectionMatrix : packoffset(c22);
  float4x4 _InvViewMatrix : packoffset(c26);
  float4x4 _ProjectionMatrix : packoffset(c30);
  float4 _TempSunDirection : packoffset(c34);
  float4x4 _ViewMatrix : packoffset(c35);
  float4 _ViewPoint_ShadowProjDepthMin : packoffset(c39);
  float4x4 _ViewProjectionMatrix : packoffset(c40);
  float4x4 _ViewRotProjectionMatrix : packoffset(c44);
  float4x4 _ViewRotProjectionMatrix_Previous : packoffset(c48);
  float4 _ViewportSize : packoffset(c52);
  float2 _MotionVectorOffsets : packoffset(c53);
  float3 _CameraRight : packoffset(c54);
  float3 _CameraUp : packoffset(c55);
  float3 _EnvironmentMapColorOffset : packoffset(c56);
  float3 _EnvironmentMapColorScale : packoffset(c57);
}

cbuffer CSceneTerrainSkyOcclusionAtlasPrivateData : register(b1)
{
  float4 _SectorOcclusion_OffsetScale : packoffset(c0);
  float2 _SectorOcclusion_DistanceFade : packoffset(c1);
  float2 _SectorOcclusion_HeightOffsetScale : packoffset(c1.z);
}

cbuffer CDeferredAmbientProvider : register(b2)
{
  float4 _CascadeDistanceScales[5] : packoffset(c0);
  float4x4 _InvVP : packoffset(c5);
  float4 _QuadParams : packoffset(c9);
  float4 _SrcTexHalfPixelOffset : packoffset(c10);
  float3 _CamVectorOffset : packoffset(c11);
  float3 _CamVectorScaleX : packoffset(c12);
  float3 _CamVectorScaleY : packoffset(c13);
  float _IndirectLightingScale : packoffset(c13.w);
  float _MaskOffset : packoffset(c14);
  float _NormalizationFactor : packoffset(c14.y);
}

cbuffer CCommonDeferredAmbientProvider : register(b3)
{
  float4 _GlobalSHB : packoffset(c0);
  float4 _GlobalSHG : packoffset(c1);
  float4 _GlobalSHR : packoffset(c2);
  float4x4 _InvViewRotProjectionMatrix : packoffset(c3);
  float4 _LerpDistance_RCP : packoffset(c7);
  float3 _SnappedCameraC0 : packoffset(c8);
  float3 _SnappedCameraC1 : packoffset(c9);
  float3 _SnappedCameraC2 : packoffset(c10);
  float3 _UVScale : packoffset(c11);
}
SamplerState SectorOcclusion_HeightTexture__SampObj___s : register(s0);
SamplerState SectorOcclusion_OcclusionTexture__SampObj___s : register(s1);
SamplerState SectorOcclusion_NoiseTexture__SampObj___s : register(s2);
SamplerState LinearVolumeSamplerState_s : register(s3);
SamplerState DownsampledDepthTexture__SampObj___s : register(s4);
SamplerState NormalWSTexture_Point__SampObj___s : register(s5);
Texture2D<float4> SectorOcclusion_HeightTexture__TexObj__ : register(t0);
Texture2D<float4> SectorOcclusion_OcclusionTexture__TexObj__ : register(t1);
Texture2D<float4> SectorOcclusion_NoiseTexture__TexObj__ : register(t2);
Texture3D<float4> SHTextureR : register(t3);
Texture3D<float4> SHTextureG : register(t4);
Texture3D<float4> SHTextureB : register(t5);
Texture2D<float4> DownsampledDepthTexture__TexObj__ : register(t6);
Texture2D<float4> NormalWSTexture_Point__TexObj__ : register(t7);
StructuredBuffer<SkyParamBuffer> SkyParamBuffer : register(t8);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float2 w1 : TEXCOORD1,
  uint v2 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;
  uint4 bitmask;
  r0.xyzw = NormalWSTexture_Point__TexObj__.Sample(NormalWSTexture_Point__SampObj___s, w1.xy).xyzw;
  r0.w = 3.000000000e+000 * r0.w;
  r0.xyz = r0.xyz * float3(1.414214e+000,1.414214e+000,1.414214e+000) + float3(-7.071068e-001,-7.071068e-001,-7.071068e-001);
  r0.w = (uint)r0.w;
  r1.x = dot(r0.xyz, r0.xyz);
  r1.x = min(r1.x, 1.000000000e+000);
  r1.x = 1.000000000e+000 + -r1.x;
  r1.x = sqrt(r1.x);
  r1.y = r0.w ? r1.x : r0.x;
  r1.zw = r0.ww == float2(1.000000e+000,2.000000e+000);
  r2.z = r0.w ? r0.x : r1.x;
  r3.xy = r1.zw ? r1.xx : r0.yz;
  r0.x = r1.z ? r0.y : r1.y;
  r3.z = r1.w ? r0.z : r0.x;
  r2.yw = float2(2.000000e+000,2.000000e+000);
  r0.xyz = r2.yzw * r2.zzz;
  r3.w = -2.000000000e+000;
  r0.xyz = r0.xyz * r3.zwy + float3(0.000000e+000,1.000000e+000,0.000000e+000);
  r1.zw = r3.xz;
  r2.xyz = r3.yww * r3.xxx;
  r1.y = 2.000000000e+000;
  r0.xyz = r2.xyz * r1.yzw + r0.xyz;
  r1.xyzw = DownsampledDepthTexture__TexObj__.Sample(DownsampledDepthTexture__SampObj___s, v1.xy).xyzw;
  r0.w = _CameraDistances.z * abs(r1.x);
  r1.x = _CameraDistances.x * _CameraDistances.y;
  r0.w = r1.x / r0.w;
  r0.w = _CameraDistances.y + -r0.w;
  r1.z = -r0.w * _CameraDistances.w + 1.000000000e+000;
  r1.xy = v1.xy * float2(2.000000e+000,-2.000000e+000) + float2(-1.000000e+000,1.000000e+000);
  r1.w = 1.000000000e+000;
  r2.w = dot(r1.xyzw, _InvViewRotProjectionMatrix._m00_m10_m20_m30);
  r2.y = dot(r1.xyzw, _InvViewRotProjectionMatrix._m01_m11_m21_m31);
  r2.z = dot(r1.xyzw, _InvViewRotProjectionMatrix._m02_m12_m22_m32);
  r0.w = dot(r1.xyzw, _InvViewRotProjectionMatrix._m03_m13_m23_m33);
  r1.xyz = r2.yzw / r0.www;
  r2.xyz = _CameraPosition_DistanceScale.xyz + r1.zxy;
  r3.xy = r2.yx * _SectorOcclusion_OffsetScale.yx + _SectorOcclusion_OffsetScale.wz;
  r4.xyzw = SectorOcclusion_HeightTexture__TexObj__.Sample(SectorOcclusion_HeightTexture__SampObj___s, r3.xy).xyzw;
  r3.xyzw = SectorOcclusion_OcclusionTexture__TexObj__.Sample(SectorOcclusion_OcclusionTexture__SampObj___s, r3.xy).xyzw;
  r4.xy = r4.xy * _SectorOcclusion_HeightOffsetScale.xx + _SectorOcclusion_HeightOffsetScale.yy;
  r0.w = -r4.y + r2.z;
  r1.w = r4.x + -r4.y;
  r1.w = max(r1.w, 1.000000000e+000);
  r1.w = -3.000000119e-001 + r1.w;
  r0.w = -3.000000119e-001 + r0.w;
  r0.w = max(r0.w, 0.000000000e+000);
  r0.w = r0.w / r1.w;
  r0.w = min(r0.w, 1.000000000e+000);
  r0.w = r0.w * r0.w;
  r0.w = -r0.w * r0.w + 1.000000000e+000;
  r1.w = dot(r1.xz, r1.xz);
  r2.z = saturate(_SectorOcclusion_DistanceFade.x * r1.w + _SectorOcclusion_DistanceFade.y);
  r1.w = sqrt(r1.w);
  r0.w = r2.z * r0.w;
  r2.zw = float2(3.125000e+000,3.125000e+000) * r2.xy;
  r4.xyzw = SectorOcclusion_NoiseTexture__TexObj__.Sample(SectorOcclusion_NoiseTexture__SampObj___s, r2.zw).xyzw;
  r2.z = r4.z * 1.500000060e-001 + 1.075000048e+000;
  r2.w = r3.x * 4.000000000e+000 + -2.000000000e+000;
  r3.yzw = float3(4.000000e+000,4.000000e+000,4.000000e+000) * r3.yzw;
  r3.x = r2.w * r2.z;
  r3.xyzw = float4(-1.772454e+000,-2.000000e+000,-3.534990e+000,-2.000000e+000) + r3.xyzw;
  r3.xyzw = r0.wwww * r3.xyzw + float4(1.772454e+000,0.000000e+000,1.534990e+000,0.000000e+000);
  r0.w = dot(r3.yzw, r3.yzw);
  r0.w = rsqrt(r0.w);
  r4.xyz = r3.yzw * r0.www;
  r0.w = saturate(-r3.x * 5.641896129e-001 + 1.000000000e+000);
  r0.xyz = r4.xyz * r0.www + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.yzw = r0.xyz * r0.www;
  r0.x = 1.000000000e+000;
  r4.xyzw = float4(2.820948e-001,4.886025e-001,4.886025e-001,4.886025e-001) * r0.xyzw;
  r0.x = r1.w < _CascadeDistanceScales[2].y;
  r0.x = r0.x ? 2 : 3;
  r2.z = r1.w < _CascadeDistanceScales[1].y;
  r0.x = r2.z ? 1 : r0.x;
  r2.z = r1.w < _CascadeDistanceScales[0].y;
  r0.x = r2.z ? 0.000000000e+000 : r0.x;
  r1.w = saturate(r1.w * _CascadeDistanceScales[r0.x].z + _CascadeDistanceScales[r0.x].w);
  r0.x = r0.x;
  r2.zw = float2(5.000000e-001,1.500000e+000) + r0.xx;
  r0.x = exp2(r0.x);
  r5.zw = float2(2.000000e-001,2.000000e-001) * r2.zw;
  r6.xyzw = float4(8.000000e+000,1.360000e+002,2.560000e+002,1.600000e+001) * r0.xxxx;
  r2.zw = float2(2.720000e+002,5.120000e+002) * r0.xx;
  r7.xyzw = _CameraPosition_DistanceScale.xyxy / r6.xxww;
  r7.xyzw = floor(r7.xyzw);
  r6.xy = r7.xy * r6.xx + -r6.yy;
  r7.xy = r7.zw * r6.ww + -r2.zz;
  r7.xy = -r7.xy + r2.xy;
  r2.xy = -r6.xy + r2.xy;
  r5.xy = r2.xy / r6.zz;
  r2.xy = r7.xy / r2.ww;
  r6.xyzw = SHTextureR.SampleLevel(LinearVolumeSamplerState_s, r5.xyz, 0.000000000e+000).xyzw;
  r2.z = r5.w;
  r7.xyzw = SHTextureR.SampleLevel(LinearVolumeSamplerState_s, r2.xyz, 0.000000000e+000).xyzw;
  r7.xyzw = r7.xyzw + -r6.xyzw;
  r6.xyzw = r1.wwww * r7.xyzw + r6.xyzw;
  r6.xyzw = r6.xyzw * float4(3.544908e+000,3.544908e+000,3.544908e+000,3.544908e+000) + float4(-1.772454e+000,-1.772454e+000,-1.772454e+000,-1.772454e+000);
  r7.x = dot(r6.xyzw, r4.xyzw);
  r8.xyzw = SHTextureG.SampleLevel(LinearVolumeSamplerState_s, r5.xyz, 0.000000000e+000).xyzw;
  r5.xyzw = SHTextureB.SampleLevel(LinearVolumeSamplerState_s, r5.xyz, 0.000000000e+000).xyzw;
  r9.xyzw = SHTextureG.SampleLevel(LinearVolumeSamplerState_s, r2.xyz, 0.000000000e+000).xyzw;
  r2.xyzw = SHTextureB.SampleLevel(LinearVolumeSamplerState_s, r2.xyz, 0.000000000e+000).xyzw;
  r2.xyzw = r2.xyzw + -r5.xyzw;
  r2.xyzw = r1.wwww * r2.xyzw + r5.xyzw;
  r2.xyzw = r2.xyzw * float4(3.544908e+000,3.544908e+000,3.544908e+000,3.544908e+000) + float4(-1.772454e+000,-1.772454e+000,-1.772454e+000,-1.772454e+000);
  r5.xyzw = r9.xyzw + -r8.xyzw;
  r5.xyzw = r1.wwww * r5.xyzw + r8.xyzw;
  r5.xyzw = r5.xyzw * float4(3.544908e+000,3.544908e+000,3.544908e+000,3.544908e+000) + float4(-1.772454e+000,-1.772454e+000,-1.772454e+000,-1.772454e+000);
  r7.y = dot(r5.xyzw, r4.xyzw);
  r7.z = dot(r2.xyzw, r4.xyzw);
  r4.xyz = max(r7.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r4.xyz = _IndirectLightingScale * r4.xyz;
  r7.xyzw = float4(1.092548e+000,1.023327e+000,1.023327e+000,1.023327e+000) * r0.wyzw;
  r8.yzw = r7.yzw;
  r8.x = 8.862269521e-001;
  r0.x = dot(r3.xyzw, r8.xyzw);
  r0.x = saturate(3.183098733e-001 * r0.x);
  r7.yzw = r0.zzy * r0.yzy;
  r1.w = r0.w * r0.w + -r7.w;
  r1.w = 4.290427566e-001 * r1.w;
  r7.xw = r7.xx * r0.yz;
  r4.w = r7.z * 3.000000000e+000 + -1.000000000e+000;
  r7.xyw = float3(7.853982e-001,8.580855e-001,7.853982e-001) * r7.xyw;
  r4.w = 2.477079630e-001 * r4.w;
// Known bad code for instruction (needs manual fix):
// ld_structured r9.xyzw, l(0), l(32), t8.xyzw
r9.x = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r9.y = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r9.z = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r9.w = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
  r10.xy = r9.yz * r8.xy;
  r7.z = r10.x + r10.y;
  r7.z = r9.w * r8.z + r7.z;
// Known bad code for instruction (needs manual fix):
// ld_structured r10.xyzw, l(0), l(48), t8.xyzw
r10.x = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r10.y = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r10.z = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r10.w = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
  r7.z = r10.x * r8.w + r7.z;
  r7.z = r10.y * r7.x + r7.z;
  r7.z = r10.z * r7.y + r7.z;
  r7.z = r10.w * r4.w + r7.z;
// Known bad code for instruction (needs manual fix):
// ld_structured r11.xyzw, l(0), l(64), t8.xyzw
r11.x = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r11.y = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r11.z = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r11.w = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
  r7.z = r11.x * r7.w + r7.z;
  r12.y = r11.y * r1.w + r7.z;
  r13.xy = r11.zw * r8.xy;
  r7.z = r13.x + r13.y;
// Known bad code for instruction (needs manual fix):
// ld_structured r14.xyzw, l(0), l(80), t8.xyzw
r14.x = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r14.y = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r14.z = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r14.w = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
  r7.z = r14.x * r8.z + r7.z;
  r7.z = r14.y * r8.w + r7.z;
  r7.z = r14.z * r7.x + r7.z;
  r7.z = r14.w * r7.y + r7.z;
// Known bad code for instruction (needs manual fix):
// ld_structured r15.xyz, l(0), l(96), t8.xyzx
r15.x = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r15.y = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r15.z = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
  r7.z = r15.x * r4.w + r7.z;
  r7.z = r15.y * r7.w + r7.z;
  r12.z = r15.z * r1.w + r7.z;
// Known bad code for instruction (needs manual fix):
// ld_structured r16.xyzw, l(0), l(0), t8.xyzw
r16.x = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r16.y = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r16.z = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r16.w = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
  r13.yz = r16.xy * r8.xy;
  r7.z = r13.y + r13.z;
  r7.z = r16.z * r8.z + r7.z;
  r7.z = r16.w * r8.w + r7.z;
// Known bad code for instruction (needs manual fix):
// ld_structured r17.xyzw, l(0), l(16), t8.xyzw
r17.x = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r17.y = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r17.z = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
r17.w = StructuredBufferName[srcAddressRegister].srcByteOffsetName.swiz;
  r7.x = r17.x * r7.x + r7.z;
  r7.x = r17.y * r7.y + r7.x;
  r4.w = r17.z * r4.w + r7.x;
  r4.w = r17.w * r7.w + r4.w;
  r12.x = r9.x * r1.w + r4.w;
  r7.xyz = max(r12.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r7.xyz = r7.xyz * r0.xxx;
  r4.xyz = r7.xyz * _NormalizationFactor + r4.xyz;
  o0.xyz = sqrt(r4.xyz);
  o0.w = 1.000000000e+000;
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  r1.xyz = r1.xyz * r0.xxx;
  r0.x = dot(r1.xyz, r0.yzw);
  r0.x = r0.x + r0.x;
  r0.yzw = r0.yzw * -r0.xxx + r1.xyz;
  r1.xyz = r0.zzy * r0.yzy;
  r1.z = r0.w * r0.w + -r1.z;
  r1.y = r1.y * 3.000000000e+000 + -1.000000000e+000;
  r1.xyz = float3(8.580855e-001,2.477080e-001,4.290428e-001) * r1.xyz;
  r4.xyzw = float4(1.092548e+000,1.023327e+000,1.023327e+000,1.023327e+000) * r0.wyzw;
  r1.w = r9.z * r4.y;
  r1.w = r9.y * r8.x + r1.w;
  r1.w = r9.w * r4.z + r1.w;
  r1.w = r10.x * r4.w + r1.w;
  r7.xy = r4.xx * r0.yz;
  r7.xy = float2(7.853982e-001,7.853982e-001) * r7.xy;
  r1.w = r10.y * r7.x + r1.w;
  r1.w = r10.z * r1.x + r1.w;
  r1.w = r10.w * r1.y + r1.w;
  r1.w = r11.x * r7.y + r1.w;
  r10.y = r11.y * r1.z + r1.w;
  r1.w = r11.w * r4.y + r13.x;
  r1.w = r14.x * r4.z + r1.w;
  r1.w = r14.y * r4.w + r1.w;
  r1.w = r14.z * r7.x + r1.w;
  r1.w = r14.w * r1.x + r1.w;
  r1.w = r15.x * r1.y + r1.w;
  r1.w = r15.y * r7.y + r1.w;
  r10.z = r15.z * r1.z + r1.w;
  r1.w = r16.y * r4.y;
  r1.w = r16.x * r8.x + r1.w;
  r1.w = r16.z * r4.z + r1.w;
  r1.w = r16.w * r4.w + r1.w;
  r1.w = r17.x * r7.x + r1.w;
  r1.x = r17.y * r1.x + r1.w;
  r1.x = r17.z * r1.y + r1.x;
  r1.x = r17.w * r7.y + r1.x;
  r10.x = r9.x * r1.z + r1.x;
  r1.xyz = max(r10.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r4.x = 8.862269521e-001;
  r1.w = dot(r3.xyzw, r4.xyzw);
  r1.w = saturate(3.183098733e-001 * r1.w);
  r1.xyz = r1.www * r1.xyz;
  r0.x = 1.000000000e+000;
  r0.xyzw = float4(2.820948e-001,4.886025e-001,4.886025e-001,4.886025e-001) * r0.xyzw;
  r3.x = dot(r6.xyzw, r0.xyzw);
  r3.y = dot(r5.xyzw, r0.xyzw);
  r3.z = dot(r2.xyzw, r0.xyzw);
  r0.xyz = max(r3.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r0.xyz = _IndirectLightingScale * r0.xyz;
  r0.xyz = r1.xyz * _NormalizationFactor + r0.xyz;
  o1.xyz = sqrt(r0.xyz);
  o1.w = 0.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer CViewportShaderParameterProvider
// {
//
//   float4 _AmbientColorMultiplier;    // Offset:    0 Size:    16 [unused]
//   float4 _AmbientOcclusionRanges_SunOcclusionFactor;// Offset:   16 Size:    16 [unused]
//   float4 _BloomAdaptationFactor;     // Offset:   32 Size:    16 [unused]
//   float4 _CameraDirection_FOVDeg;    // Offset:   48 Size:    16 [unused]
//   float4 _CameraDistances;           // Offset:   64 Size:    16
//   float4 _CameraNearPlaneSize;       // Offset:   80 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS;// Offset:   96 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS_Previous;// Offset:  112 Size:    16 [unused]
//   float4 _CameraPosition_DistanceScale;// Offset:  128 Size:    16
//   float4 _CameraPosition_DistanceScale_Previous;// Offset:  144 Size:    16 [unused]
//   float4x4 _CullingViewProjectionMatrix;// Offset:  160 Size:    64 [unused]
//   float4 _DepthScale;                // Offset:  224 Size:    16 [unused]
//   float4 _DepthTextureRcpSize;       // Offset:  240 Size:    16 [unused]
//   float4 _DepthTextureScaleOffset;   // Offset:  256 Size:    16 [unused]
//   float4 _FogParams;                 // Offset:  272 Size:    16 [unused]
//   float4 _FogSHB;                    // Offset:  288 Size:    16 [unused]
//   float4 _FogSHG;                    // Offset:  304 Size:    16 [unused]
//   float4 _FogSHR;                    // Offset:  320 Size:    16 [unused]
//   float4 _HeightFogParams;           // Offset:  336 Size:    16 [unused]
//   float4x4 _InvProjectionMatrix;     // Offset:  352 Size:    64 [unused]
//   float4x4 _InvViewMatrix;           // Offset:  416 Size:    64 [unused]
//   float4x4 _ProjectionMatrix;        // Offset:  480 Size:    64 [unused]
//   float4 _TempSunDirection;          // Offset:  544 Size:    16 [unused]
//   float4x4 _ViewMatrix;              // Offset:  560 Size:    64 [unused]
//   float4 _ViewPoint_ShadowProjDepthMin;// Offset:  624 Size:    16 [unused]
//   float4x4 _ViewProjectionMatrix;    // Offset:  640 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix; // Offset:  704 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix_Previous;// Offset:  768 Size:    64 [unused]
//   float4 _ViewportSize;              // Offset:  832 Size:    16 [unused]
//   float2 _MotionVectorOffsets;       // Offset:  848 Size:     8 [unused]
//   float3 _CameraRight;               // Offset:  864 Size:    12 [unused]
//   float3 _CameraUp;                  // Offset:  880 Size:    12 [unused]
//   float3 _EnvironmentMapColorOffset; // Offset:  896 Size:    12 [unused]
//   float3 _EnvironmentMapColorScale;  // Offset:  912 Size:    12 [unused]
//
// }
//
// cbuffer CSceneTerrainSkyOcclusionAtlasPrivateData
// {
//
//   float4 _SectorOcclusion_OffsetScale;// Offset:    0 Size:    16
//   float2 _SectorOcclusion_DistanceFade;// Offset:   16 Size:     8
//   float2 _SectorOcclusion_HeightOffsetScale;// Offset:   24 Size:     8
//
// }
//
// cbuffer CDeferredAmbientProvider
// {
//
//   float4 _CascadeDistanceScales[5];  // Offset:    0 Size:    80
//   float4x4 _InvVP;                   // Offset:   80 Size:    64 [unused]
//   float4 _QuadParams;                // Offset:  144 Size:    16 [unused]
//   float4 _SrcTexHalfPixelOffset;     // Offset:  160 Size:    16 [unused]
//   float3 _CamVectorOffset;           // Offset:  176 Size:    12 [unused]
//   float3 _CamVectorScaleX;           // Offset:  192 Size:    12 [unused]
//   float3 _CamVectorScaleY;           // Offset:  208 Size:    12 [unused]
//   float _IndirectLightingScale;      // Offset:  220 Size:     4
//   float _MaskOffset;                 // Offset:  224 Size:     4 [unused]
//   float _NormalizationFactor;        // Offset:  228 Size:     4
//
// }
//
// cbuffer CCommonDeferredAmbientProvider
// {
//
//   float4 _GlobalSHB;                 // Offset:    0 Size:    16 [unused]
//   float4 _GlobalSHG;                 // Offset:   16 Size:    16 [unused]
//   float4 _GlobalSHR;                 // Offset:   32 Size:    16 [unused]
//   float4x4 _InvViewRotProjectionMatrix;// Offset:   48 Size:    64
//   float4 _LerpDistance_RCP;          // Offset:  112 Size:    16 [unused]
//   float3 _SnappedCameraC0;           // Offset:  128 Size:    12 [unused]
//   float3 _SnappedCameraC1;           // Offset:  144 Size:    12 [unused]
//   float3 _SnappedCameraC2;           // Offset:  160 Size:    12 [unused]
//   float3 _UVScale;                   // Offset:  176 Size:    12 [unused]
//
// }
//
// Resource bind info for SkyParamBuffer
// {
//
//   struct
//   {
//       
//       float r[9];                    // Offset:    0
//       float g[9];                    // Offset:   36
//       float b[9];                    // Offset:   72
//       float3 sunColor;               // Offset:  108
//       float3 moonColor;              // Offset:  120
//
//   } $Element;                        // Offset:    0 Size:   132
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SectorOcclusion_HeightTexture__SampObj__    sampler      NA          NA    0        1
// SectorOcclusion_OcclusionTexture__SampObj__    sampler      NA          NA    1        1
// SectorOcclusion_NoiseTexture__SampObj__    sampler      NA          NA    2        1
// LinearVolumeSamplerState          sampler      NA          NA    3        1
// DownsampledDepthTexture__SampObj__    sampler      NA          NA    4        1
// NormalWSTexture_Point__SampObj__    sampler      NA          NA    5        1
// SectorOcclusion_HeightTexture__TexObj__    texture  float4          2d    0        1
// SectorOcclusion_OcclusionTexture__TexObj__    texture  float4          2d    1        1
// SectorOcclusion_NoiseTexture__TexObj__    texture  float4          2d    2        1
// SHTextureR                        texture  float4          3d    3        1
// SHTextureG                        texture  float4          3d    4        1
// SHTextureB                        texture  float4          3d    5        1
// DownsampledDepthTexture__TexObj__    texture  float4          2d    6        1
// NormalWSTexture_Point__TexObj__    texture  float4          2d    7        1
// SkyParamBuffer                    texture  struct         r/o    8        1
// CViewportShaderParameterProvider    cbuffer      NA          NA    0        1
// CSceneTerrainSkyOcclusionAtlasPrivateData    cbuffer      NA          NA    1        1
// CDeferredAmbientProvider          cbuffer      NA          NA    2        1
// CCommonDeferredAmbientProvider    cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
// SV_IsFrontFace           0   x           2    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_4_0
dcl_globalFlags refactoringAllowed | enableRawAndStructuredBuffers
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[2], immediateIndexed
dcl_constantbuffer cb2[15], dynamicIndexed
dcl_constantbuffer cb3[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture3d (float,float,float,float) t3
dcl_resource_texture3d (float,float,float,float) t4
dcl_resource_texture3d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_structured t8, 132 
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 18
sample r0.xyzw, v1.zwzz, t7.xyzw, s5
mul r0.w, r0.w, l(3.000000)
mad r0.xyz, r0.xyzx, l(1.414214, 1.414214, 1.414214, 0.000000), l(-0.707107, -0.707107, -0.707107, 0.000000)
ftou r0.w, r0.w
dp3 r1.x, r0.xyzx, r0.xyzx
min r1.x, r1.x, l(1.000000)
add r1.x, -r1.x, l(1.000000)
sqrt r1.x, r1.x
movc r1.y, r0.w, r1.x, r0.x
ieq r1.zw, r0.wwww, l(0, 0, 1, 2)
movc r2.z, r0.w, r0.x, r1.x
movc r3.xy, r1.zwzz, r1.xxxx, r0.yzyy
movc r0.x, r1.z, r0.y, r1.y
movc r3.z, r1.w, r0.z, r0.x
mov r2.yw, l(0,2.000000,0,2.000000)
mul r0.xyz, r2.zzzz, r2.yzwy
mov r3.w, l(-2.000000)
mad r0.xyz, r0.xyzx, r3.zwyz, l(0.000000, 1.000000, 0.000000, 0.000000)
mov r1.zw, r3.xxxz
mul r2.xyz, r3.xxxx, r3.ywwy
mov r1.y, l(2.000000)
mad r0.xyz, r2.xyzx, r1.yzwy, r0.xyzx
sample r1.xyzw, v1.xyxx, t6.xyzw, s4
mul r0.w, |r1.x|, cb0[4].z
mul r1.x, cb0[4].y, cb0[4].x
div r0.w, r1.x, r0.w
add r0.w, -r0.w, cb0[4].y
mad r1.z, -r0.w, cb0[4].w, l(1.000000)
mad r1.xy, v1.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mov r1.w, l(1.000000)
dp4 r2.w, r1.xyzw, cb3[3].xyzw
dp4 r2.y, r1.xyzw, cb3[4].xyzw
dp4 r2.z, r1.xyzw, cb3[5].xyzw
dp4 r0.w, r1.xyzw, cb3[6].xyzw
div r1.xyz, r2.yzwy, r0.wwww
add r2.xyz, r1.zxyz, cb0[8].xyzx
mad r3.xy, r2.yxyy, cb1[0].yxyy, cb1[0].wzww
sample r4.xyzw, r3.xyxx, t0.xyzw, s0
sample r3.xyzw, r3.xyxx, t1.xyzw, s1
mad r4.xy, r4.xyxx, cb1[1].zzzz, cb1[1].wwww
add r0.w, r2.z, -r4.y
add r1.w, -r4.y, r4.x
max r1.w, r1.w, l(1.000000)
add r1.w, r1.w, l(-0.300000)
add r0.w, r0.w, l(-0.300000)
max r0.w, r0.w, l(0.000000)
div r0.w, r0.w, r1.w
min r0.w, r0.w, l(1.000000)
mul r0.w, r0.w, r0.w
mad r0.w, -r0.w, r0.w, l(1.000000)
dp2 r1.w, r1.xzxx, r1.xzxx
mad_sat r2.z, cb1[1].x, r1.w, cb1[1].y
sqrt r1.w, r1.w
mul r0.w, r0.w, r2.z
mul r2.zw, r2.xxxy, l(0.000000, 0.000000, 3.125000, 3.125000)
sample r4.xyzw, r2.zwzz, t2.xyzw, s2
mad r2.z, r4.z, l(0.150000), l(1.075000)
mad r2.w, r3.x, l(4.000000), l(-2.000000)
mul r3.yzw, r3.yyzw, l(0.000000, 4.000000, 4.000000, 4.000000)
mul r3.x, r2.z, r2.w
add r3.xyzw, r3.xyzw, l(-1.772454, -2.000000, -3.534990, -2.000000)
mad r3.xyzw, r0.wwww, r3.xyzw, l(1.772454, 0.000000, 1.534990, 0.000000)
dp3 r0.w, r3.yzwy, r3.yzwy
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r3.yzwy
mad_sat r0.w, -r3.x, l(0.564190), l(1.000000)
mad r0.xyz, r4.xyzx, r0.wwww, r0.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.yzw, r0.wwww, r0.xxyz
mov r0.x, l(1.000000)
mul r4.xyzw, r0.xyzw, l(0.282095, 0.488603, 0.488603, 0.488603)
lt r0.x, r1.w, cb2[2].y
movc r0.x, r0.x, l(2), l(3)
lt r2.z, r1.w, cb2[1].y
movc r0.x, r2.z, l(1), r0.x
lt r2.z, r1.w, cb2[0].y
movc r0.x, r2.z, l(0), r0.x
mad_sat r1.w, r1.w, cb2[r0.x + 0].z, cb2[r0.x + 0].w
utof r0.x, r0.x
add r2.zw, r0.xxxx, l(0.000000, 0.000000, 0.500000, 1.500000)
exp r0.x, r0.x
mul r5.zw, r2.zzzw, l(0.000000, 0.000000, 0.200000, 0.200000)
mul r6.xyzw, r0.xxxx, l(8.000000, 136.000000, 256.000000, 16.000000)
mul r2.zw, r0.xxxx, l(0.000000, 0.000000, 272.000000, 512.000000)
div r7.xyzw, cb0[8].xyxy, r6.xxww
round_ni r7.xyzw, r7.xyzw
mad r6.xy, r7.xyxx, r6.xxxx, -r6.yyyy
mad r7.xy, r7.zwzz, r6.wwww, -r2.zzzz
add r7.xy, r2.xyxx, -r7.xyxx
add r2.xy, r2.xyxx, -r6.xyxx
div r5.xy, r2.xyxx, r6.zzzz
div r2.xy, r7.xyxx, r2.wwww
sample_l r6.xyzw, r5.xyzx, t3.xyzw, s3, l(0.000000)
mov r2.z, r5.w
sample_l r7.xyzw, r2.xyzx, t3.xyzw, s3, l(0.000000)
add r7.xyzw, -r6.xyzw, r7.xyzw
mad r6.xyzw, r1.wwww, r7.xyzw, r6.xyzw
mad r6.xyzw, r6.xyzw, l(3.544908, 3.544908, 3.544908, 3.544908), l(-1.772454, -1.772454, -1.772454, -1.772454)
dp4 r7.x, r6.xyzw, r4.xyzw
sample_l r8.xyzw, r5.xyzx, t4.xyzw, s3, l(0.000000)
sample_l r5.xyzw, r5.xyzx, t5.xyzw, s3, l(0.000000)
sample_l r9.xyzw, r2.xyzx, t4.xyzw, s3, l(0.000000)
sample_l r2.xyzw, r2.xyzx, t5.xyzw, s3, l(0.000000)
add r2.xyzw, -r5.xyzw, r2.xyzw
mad r2.xyzw, r1.wwww, r2.xyzw, r5.xyzw
mad r2.xyzw, r2.xyzw, l(3.544908, 3.544908, 3.544908, 3.544908), l(-1.772454, -1.772454, -1.772454, -1.772454)
add r5.xyzw, -r8.xyzw, r9.xyzw
mad r5.xyzw, r1.wwww, r5.xyzw, r8.xyzw
mad r5.xyzw, r5.xyzw, l(3.544908, 3.544908, 3.544908, 3.544908), l(-1.772454, -1.772454, -1.772454, -1.772454)
dp4 r7.y, r5.xyzw, r4.xyzw
dp4 r7.z, r2.xyzw, r4.xyzw
max r4.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r4.xyz, r4.xyzx, cb2[13].wwww
mul r7.xyzw, r0.wyzw, l(1.092548, 1.023327, 1.023327, 1.023327)
mov r8.yzw, r7.yyzw
mov r8.x, l(0.886227)
dp4 r0.x, r3.xyzw, r8.xyzw
mul_sat r0.x, r0.x, l(0.318310)
mul r7.yzw, r0.yyzy, r0.zzzy
mad r1.w, r0.w, r0.w, -r7.w
mul r1.w, r1.w, l(0.429043)
mul r7.xw, r0.yyyz, r7.xxxx
mad r4.w, r7.z, l(3.000000), l(-1.000000)
mul r7.xyw, r7.xyxw, l(0.785398, 0.858086, 0.000000, 0.785398)
mul r4.w, r4.w, l(0.247708)
ld_structured r9.xyzw, l(0), l(32), t8.xyzw
mul r10.xy, r8.xyxx, r9.yzyy
add r7.z, r10.y, r10.x
mad r7.z, r9.w, r8.z, r7.z
ld_structured r10.xyzw, l(0), l(48), t8.xyzw
mad r7.z, r10.x, r8.w, r7.z
mad r7.z, r10.y, r7.x, r7.z
mad r7.z, r10.z, r7.y, r7.z
mad r7.z, r10.w, r4.w, r7.z
ld_structured r11.xyzw, l(0), l(64), t8.xyzw
mad r7.z, r11.x, r7.w, r7.z
mad r12.y, r11.y, r1.w, r7.z
mul r13.xy, r8.xyxx, r11.zwzz
add r7.z, r13.y, r13.x
ld_structured r14.xyzw, l(0), l(80), t8.xyzw
mad r7.z, r14.x, r8.z, r7.z
mad r7.z, r14.y, r8.w, r7.z
mad r7.z, r14.z, r7.x, r7.z
mad r7.z, r14.w, r7.y, r7.z
ld_structured r15.xyz, l(0), l(96), t8.xyzx
mad r7.z, r15.x, r4.w, r7.z
mad r7.z, r15.y, r7.w, r7.z
mad r12.z, r15.z, r1.w, r7.z
ld_structured r16.xyzw, l(0), l(0), t8.xyzw
mul r13.yz, r8.xxyx, r16.xxyx
add r7.z, r13.z, r13.y
mad r7.z, r16.z, r8.z, r7.z
mad r7.z, r16.w, r8.w, r7.z
ld_structured r17.xyzw, l(0), l(16), t8.xyzw
mad r7.x, r17.x, r7.x, r7.z
mad r7.x, r17.y, r7.y, r7.x
mad r4.w, r17.z, r4.w, r7.x
mad r4.w, r17.w, r7.w, r4.w
mad r12.x, r9.x, r1.w, r4.w
max r7.xyz, r12.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r7.xyz, r0.xxxx, r7.xyzx
mad r4.xyz, r7.xyzx, cb2[14].yyyy, r4.xyzx
sqrt o0.xyz, r4.xyzx
mov o0.w, l(1.000000)
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul r1.xyz, r0.xxxx, r1.xyzx
dp3 r0.x, r1.xyzx, r0.yzwy
add r0.x, r0.x, r0.x
mad r0.yzw, r0.yyzw, -r0.xxxx, r1.xxyz
mul r1.xyz, r0.yzyy, r0.zzyz
mad r1.z, r0.w, r0.w, -r1.z
mad r1.y, r1.y, l(3.000000), l(-1.000000)
mul r1.xyz, r1.xyzx, l(0.858086, 0.247708, 0.429043, 0.000000)
mul r4.xyzw, r0.wyzw, l(1.092548, 1.023327, 1.023327, 1.023327)
mul r1.w, r4.y, r9.z
mad r1.w, r9.y, r8.x, r1.w
mad r1.w, r9.w, r4.z, r1.w
mad r1.w, r10.x, r4.w, r1.w
mul r7.xy, r0.yzyy, r4.xxxx
mul r7.xy, r7.xyxx, l(0.785398, 0.785398, 0.000000, 0.000000)
mad r1.w, r10.y, r7.x, r1.w
mad r1.w, r10.z, r1.x, r1.w
mad r1.w, r10.w, r1.y, r1.w
mad r1.w, r11.x, r7.y, r1.w
mad r10.y, r11.y, r1.z, r1.w
mad r1.w, r11.w, r4.y, r13.x
mad r1.w, r14.x, r4.z, r1.w
mad r1.w, r14.y, r4.w, r1.w
mad r1.w, r14.z, r7.x, r1.w
mad r1.w, r14.w, r1.x, r1.w
mad r1.w, r15.x, r1.y, r1.w
mad r1.w, r15.y, r7.y, r1.w
mad r10.z, r15.z, r1.z, r1.w
mul r1.w, r4.y, r16.y
mad r1.w, r16.x, r8.x, r1.w
mad r1.w, r16.z, r4.z, r1.w
mad r1.w, r16.w, r4.w, r1.w
mad r1.w, r17.x, r7.x, r1.w
mad r1.x, r17.y, r1.x, r1.w
mad r1.x, r17.z, r1.y, r1.x
mad r1.x, r17.w, r7.y, r1.x
mad r10.x, r9.x, r1.z, r1.x
max r1.xyz, r10.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mov r4.x, l(0.886227)
dp4 r1.w, r3.xyzw, r4.xyzw
mul_sat r1.w, r1.w, l(0.318310)
mul r1.xyz, r1.xyzx, r1.wwww
mov r0.x, l(1.000000)
mul r0.xyzw, r0.xyzw, l(0.282095, 0.488603, 0.488603, 0.488603)
dp4 r3.x, r6.xyzw, r0.xyzw
dp4 r3.y, r5.xyzw, r0.xyzw
dp4 r3.z, r2.xyzw, r0.xyzw
max r0.xyz, r3.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r0.xyz, r0.xyzx, cb2[13].wwww
mad r0.xyz, r1.xyzx, cb2[14].yyyy, r0.xyzx
sqrt o1.xyz, r0.xyzx
mov o1.w, l(0)
ret 
// Approximately 220 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
