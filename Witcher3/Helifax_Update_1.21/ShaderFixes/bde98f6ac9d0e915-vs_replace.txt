// UI - xbox dpad left/right

cbuffer Constants : register(b0)
{
  float4 vfuniforms[48] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

// Depth buffer copied to this input with 3Dmigoto:
Texture2D<float> DepthBuffer : register(t110);

static const float near = 0.2; // Guess based on convergence, refined with trial & error
static const float far = 1024; // Guess based on bringing mountains to screen depth with high convergence
static const int steps = 255;

float world_z_from_depth_buffer(float x, float y)
{
	uint width, height;
	float z;

	DepthBuffer.GetDimensions(width, height);

	x = min(max((x / 2 + 0.5) * width, 0), width - 1);
	y = min(max((-y / 2 + 0.5) * height, 0), height - 1);
	z = DepthBuffer.Load(int3(x, y, 0));
	if (z == 1)
		return 0;

	// Derive world Z from depth buffer. This is a kluge since I don't know
	// the correct scaling, and the Z buffer seems to be (1 - what I expected).
	// Might be able to determine the correct way to scale it from other shaders.
	return far*near/(((1-z)*near) + (far*z));
}

float adjust_from_depth_buffer(float x, float y)
{
	float4 stereo = StereoParams.Load(0);
	float separation = stereo.x; float convergence = stereo.y;
	float old_offset, offset, w, sampled_w, distance;
	uint i;

	// Based on my stereo crosshair code developed for Miasmata

	// Stereo cursor: To improve the accuracy of the stereo cursor, we start at the
	// near clipping plane and work our way towards center + separation (ideally
	// we would loop one pixel at a time, but as the loop counts must be constant
	// we can't do that here, so we just choose a granuality in i0 and c227.
	// Alternatively we could loop one pixel at a time with a hardcoded maximum
	// number of pixels)

	offset = (near - convergence) * separation;	// Z = X offset from center
	distance = separation - offset;			// Total distance to cover (separation - starting X offset)

	old_offset = offset;
	for (i = 0; i < 255; i++) {
		offset += distance / 255.0;

		// Calculate W for this adjustment amount:
		w = (separation * convergence) / (separation - offset);

		sampled_w = world_z_from_depth_buffer(x + offset, y);
		if (sampled_w == 0)
			return 0;

		// If the sampled depth is closer than the calculated depth, exit the loop:
		if (w > sampled_w)
			break;

		old_offset = offset;
	}

	return old_offset;
}

void main( 
  float2 v0 : TEXCOORD0,
  float4 v1 : SV_Position0,
  uint v2 : COLOR1,
  out float2 o0 : TEXCOORD0,
  out float4 o1 : SV_Position0)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  o0.xy = v0.xy;
  r0.x = (uint)v2.x << 1;
  r0.x = r0.x;
  r0.xy = float2(1.000000e-001,1.100000e+000) + r0.xx;
  r0.xy = (uint2)r0.xy;
  o1.x = dot(v1.xyzw, vfuniforms[r0.x].xyzw);
  o1.y = dot(v1.xyzw, vfuniforms[r0.y].xyzw);
  o1.zw = float2(0.000000e+000,1.000000e+000);

float4 stereo = StereoParams.Load(0);
float4 params = IniParams.Load(0);
if (params.z != 1)
{
float depth = world_z_from_depth_buffer(0,0);
if (depth != 0)
	o1.x += adjust_from_depth_buffer(dot(float4(0,0,0,1), vfuniforms[r0.x].xyzw), dot(float4(0,0,0,1), vfuniforms[r0.y].xyzw));
else
	o1.x -= stereo.x*(params.x);  
}
else
	o1.x -= stereo.x*(params.x);  
	
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.22 on Sun Jun 21 23:24:39 2015
//
//
// Buffer Definitions: 
//
// cbuffer Constants
// {
//
//   float4 vfuniforms[48];             // Offset:    0 Size:   768
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Constants                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// SV_Position              0   xyzw        1     NONE   float   xyzw
// COLOR                    1   x           2     NONE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// SV_Position              0   xyzw        1      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[48], dynamicIndexed
dcl_input v0.xy
dcl_input v1.xyzw
dcl_input v2.x
dcl_output o0.xy
dcl_output_siv o1.xyzw, position
dcl_temps 1
mov o0.xy, v0.xyxx
ishl r0.x, v2.x, l(1)
utof r0.x, r0.x
add r0.xy, r0.xxxx, l(0.100000, 1.100000, 0.000000, 0.000000)
ftou r0.xy, r0.xyxx
dp4 o1.x, v1.xyzw, cb0[r0.x + 0].xyzw
dp4 o1.y, v1.xyzw, cb0[r0.y + 0].xyzw
mov o1.zw, l(0,0,0,1.000000)
ret 
// Approximately 9 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
