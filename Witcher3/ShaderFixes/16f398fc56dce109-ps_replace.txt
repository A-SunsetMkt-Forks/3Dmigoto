Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

cbuffer cb12 : register(b12)
{
  float4 cb12[22];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[2];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = (int2)v0.xy;
  r1.xy = (int2)r0.xy ^ int2(2,2);
  r1.xy = (int2)r1.xy & int2(0,0);
  r1.zw = max(-r0.xy, r0.xy);
  r1.zw = (uint2)r1.zw >> int2(1,1);
  r2.xy = -(int2)r1.zw;
  r1.xy = r1.xy ? r2.xy : r1.zw;
  r1.xy = r1.xy;
  r1.xy = min(cb3[1].xy, r1.xy);
  r1.xy = (int2)r1.xy;
  r2.xy = (uint2)r1.xy << int2(1,1);
  r3.xyzw = (int4)r2.xyxy + int4(-2,0,0,-2);
  r3.xyzw = r3.xyzw;
  r3.xyzw = max(float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000), r3.xyzw);
  r3.xyzw = min(cb3[1].zwzw, r3.xyzw);
  r3.xyzw = (int4)r3.zwxy;
  r4.xy = r3.zw;
  r4.zw = float2(0.000000e+000,0.000000e+000);
  r1.z = t0.Load(r4.xyz).x;
  r1.z = r1.z * cb12[21].x + cb12[21].y;
  r1.z = max(9.999999747e-005, r1.z);
  r1.z = 1.000000e+000 / r1.z;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  r0.x = t0.Load(r0.xyz).x;
  r0.x = r0.x * cb12[21].x + cb12[21].y;
  r0.x = max(9.999999747e-005, r0.x);
  r0.x = 1.000000e+000 / r0.x;
  r0.y = r0.x + -r1.z;
  r2.zw = float2(0.000000e+000,0.000000e+000);
  r0.z = t0.Load(r2.xyz).x;
  r2.xyzw = (int4)r2.xyxy + int4(2,0,0,2);
  r2.xyzw = r2.xyzw;
  r2.xyzw = max(float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000), r2.xyzw);
  r2.xyzw = min(cb3[1].zwzw, r2.xyzw);
  r2.xyzw = (int4)r2.zwxy;
  r0.z = r0.z * cb12[21].x + cb12[21].y;
  r0.z = max(9.999999747e-005, r0.z);
  r0.z = 1.000000e+000 / r0.z;
  r0.z = r0.x + -r0.z;
  r4.z = min(abs(r0.z), abs(r0.y));
  r4.x = abs(r0.z) >= abs(r0.y);
  r3.zw = float2(0.000000e+000,0.000000e+000);
  r0.y = t0.Load(r3.xyz).x;
  r0.y = r0.y * cb12[21].x + cb12[21].y;
  r0.y = max(9.999999747e-005, r0.y);
  r0.y = 1.000000e+000 / r0.y;
  r0.y = r0.x + -r0.y;
  r3.z = abs(r0.y);
  r5.y = r4.z >= r3.z;
  r3.x = 0.000000000e+000;
  r5.xz = r5.yy ? r3.xz : r4.xz;
  r3.xy = r2.zw;
  r3.zw = float2(0.000000e+000,0.000000e+000);
  r0.y = t0.Load(r3.xyz).x;
  r0.y = r0.y * cb12[21].x + cb12[21].y;
  r0.y = max(9.999999747e-005, r0.y);
  r0.y = 1.000000e+000 / r0.y;
  r0.y = r0.x + -r0.y;
  r3.z = abs(r0.y);
  r0.y = r5.z >= r3.z;
  r3.xy = float2(1.000000e+000,0.000000e+000);
  r0.yzw = r0.yyy ? r3.xyz : r5.xyz;
  r2.zw = float2(0.000000e+000,0.000000e+000);
  r1.z = t0.Load(r2.xyz).x;
  r1.z = r1.z * cb12[21].x + cb12[21].y;
  r1.z = max(9.999999747e-005, r1.z);
  r1.z = 1.000000e+000 / r1.z;
  r0.x = -r1.z + r0.x;
  r0.x = r0.w >= abs(r0.x);
  r0.xy = r0.xx ? float2(0.000000e+000,1.401298e-045) : r0.yz;
  r0.xy = (int2)r0.xy + (int2)r1.xy;
  r0.xy = r0.xy;
  r0.xy = max(float2(0.000000e+000,0.000000e+000), r0.xy);
  r0.xy = min(cb3[1].xy, r0.xy);
  r0.xy = (int2)r0.xy;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  o0.xyzw = t1.Load(r0.xyz).xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_constantbuffer cb12[22], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 6
ftoi r0.xy, v0.xyxx
xor r1.xy, r0.xyxx, l(2, 2, 0, 0)
and r1.xy, r1.xyxx, l(0x80000000, 0x80000000, 0, 0)
imax r1.zw, r0.xxxy, -r0.xxxy
ushr r1.zw, r1.zzzw, l(0, 0, 1, 1)
ineg r2.xy, r1.zwzz
movc r1.xy, r1.xyxx, r2.xyxx, r1.zwzz
itof r1.xy, r1.xyxx
min r1.xy, r1.xyxx, cb3[1].xyxx
ftoi r1.xy, r1.xyxx
ishl r2.xy, r1.xyxx, l(1, 1, 0, 0)
iadd r3.xyzw, r2.xyxy, l(-2, 0, 0, -2)
itof r3.xyzw, r3.xyzw
max r3.xyzw, r3.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
min r3.xyzw, r3.xyzw, cb3[1].zwzw
ftoi r3.xyzw, r3.zwxy
mov r4.xy, r3.zwzz
mov r4.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.z, r4.xyzw, t0.yzxw
mad r1.z, r1.z, cb12[21].x, cb12[21].y
max r1.z, r1.z, l(0.000100)
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.x, r0.xyzw, t0.xyzw
mad r0.x, r0.x, cb12[21].x, cb12[21].y
max r0.x, r0.x, l(0.000100)
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r0.y, -r1.z, r0.x
mov r2.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r2.xyzw, t0.yzxw
iadd r2.xyzw, r2.xyxy, l(2, 0, 0, 2)
itof r2.xyzw, r2.xyzw
max r2.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
min r2.xyzw, r2.xyzw, cb3[1].zwzw
ftoi r2.xyzw, r2.zwxy
mad r0.z, r0.z, cb12[21].x, cb12[21].y
max r0.z, r0.z, l(0.000100)
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
add r0.z, -r0.z, r0.x
min r4.z, |r0.y|, |r0.z|
ge r4.x, |r0.z|, |r0.y|
mov r3.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.y, r3.xyzw, t0.yxzw
mad r0.y, r0.y, cb12[21].x, cb12[21].y
max r0.y, r0.y, l(0.000100)
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
add r0.y, -r0.y, r0.x
mov r3.z, |r0.y|
ge r5.y, r4.z, r3.z
mov r3.x, l(0)
movc r5.xz, r5.yyyy, r3.xxzx, r4.xxzx
mov r3.xy, r2.zwzz
mov r3.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.y, r3.xyzw, t0.yxzw
mad r0.y, r0.y, cb12[21].x, cb12[21].y
max r0.y, r0.y, l(0.000100)
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
add r0.y, -r0.y, r0.x
mov r3.z, |r0.y|
ge r0.y, r5.z, r3.z
mov r3.xy, l(1,0,0,0)
movc r0.yzw, r0.yyyy, r3.xxyz, r5.xxyz
mov r2.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.z, r2.xyzw, t0.yzxw
mad r1.z, r1.z, cb12[21].x, cb12[21].y
max r1.z, r1.z, l(0.000100)
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
add r0.x, r0.x, -r1.z
ge r0.x, r0.w, |r0.x|
movc r0.xy, r0.xxxx, l(0,1,0,0), r0.yzyy
iadd r0.xy, r0.xyxx, r1.xyxx
itof r0.xy, r0.xyxx
max r0.xy, r0.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r0.xy, r0.xyxx, cb3[1].xyxx
ftoi r0.xy, r0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) o0.xyzw, r0.xyzw, t1.xyzw
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer cb12
// {
//
//   float4 cb12[22];                   // Offset:    0 Size:   352
//
// }
//
// cbuffer cb3
// {
//
//   float4 cb3[2];                     // Offset:    0 Size:    32
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// t0                                texture  float4          2d    0        1
// t1                                texture  float4          2d    1        1
// cb3                               cbuffer      NA          NA    3        1
// cb12                              cbuffer      NA          NA   12        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb12[22], immediateIndexed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 6
round_z r0.xy, v0.xyxx
ftou r0.zw, |r0.xxxy|
ftoi r1.xy, r0.xyxx
ushr r0.xy, r0.zwzz, l(1, 1, 0, 0)
utof r0.xy, r0.xyxx
min r0.xy, r0.xyxx, cb3[1].xyxx
round_z r0.xy, r0.xyxx
ftou r0.zw, r0.xxxy
ftoi r0.xy, r0.xyxx
ishl r0.zw, r0.zzzw, l(0, 0, 1, 1)
utof r0.zw, r0.zzzw
ftoi r2.xyzw, r0.zwzw
ftoi r3.xy, r0.zwzz
iadd r4.xyzw, r2.zwzw, l(0, -2, -2, 0)
iadd r2.xyzw, r2.xyzw, l(0, 2, 2, 0)
itof r2.xyzw, r2.xyzw
max r2.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
min r2.xyzw, r2.xyzw, cb3[1].zwzw
round_z r2.xyzw, r2.xyzw
itof r4.xyzw, r4.xyzw
max r4.xyzw, r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
min r4.xyzw, r4.xyzw, cb3[1].zwzw
round_z r4.xyzw, r4.xyzw
ftoi r5.xy, r4.zwzz
ftoi r4.xy, r4.xyxx
mov r5.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r5.xyzw, t0.yzxw
mad r0.z, r0.z, cb12[21].x, cb12[21].y
max r0.z, r0.z, l(0.000100)
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.w, r1.xyzw, t0.yzwx
mad r0.w, r0.w, cb12[21].x, cb12[21].y
max r0.w, r0.w, l(0.000100)
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
add r0.z, -r0.z, r0.w
mov r3.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.x, r3.xyzw, t0.xyzw
mad r1.x, r1.x, cb12[21].x, cb12[21].y
max r1.x, r1.x, l(0.000100)
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
add r1.x, r0.w, -r1.x
min r3.z, |r0.z|, |r1.x|
ge r0.z, |r1.x|, |r0.z|
and r3.x, r0.z, l(0x3f800000)
mov r4.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r4.xyzw, t0.yzxw
mad r0.z, r0.z, cb12[21].x, cb12[21].y
max r0.z, r0.z, l(0.000100)
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
add r0.z, -r0.z, r0.w
mov r1.z, |r0.z|
ge r0.z, r3.z, r1.z
mov r1.x, l(0)
movc r1.xz, r0.zzzz, r1.xxzx, r3.xxzx
and r1.y, r0.z, l(0x3f800000)
ftoi r3.xy, r2.zwzz
ftoi r2.xy, r2.xyxx
mov r3.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r3.xyzw, t0.yzxw
mad r0.z, r0.z, cb12[21].x, cb12[21].y
max r0.z, r0.z, l(0.000100)
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
add r0.z, -r0.z, r0.w
mov r3.z, |r0.z|
ge r0.z, r1.z, r3.z
mov r3.xy, l(1.000000,0,0,0)
movc r1.xyz, r0.zzzz, r3.xyzx, r1.xyzx
mov r2.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r2.xyzw, t0.yzxw
mad r0.z, r0.z, cb12[21].x, cb12[21].y
max r0.z, r0.z, l(0.000100)
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
add r0.z, r0.w, -r0.z
ge r0.z, r1.z, |r0.z|
ftoi r1.xy, r1.xyxx
movc r0.zw, r0.zzzz, l(0,0,0,0), r1.xxxy
iadd r0.xy, r0.xyxx, r0.zwzz
itof r0.xy, r0.xyxx
max r0.xy, r0.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r0.xy, r0.xyxx, cb3[1].xyxx
round_z r0.xy, r0.xyxx
ftoi r0.xy, r0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) o0.xyzw, r0.xyzw, t1.xyzw
ret 
// Approximately 86 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
