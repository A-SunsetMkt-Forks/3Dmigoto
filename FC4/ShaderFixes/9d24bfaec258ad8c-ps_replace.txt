// nvidia god rays (stage ?)

cbuffer cb0 : register(b0)
{
  row_major float4x4 g_mViewProj : packoffset(c0);
  row_major float4x4 g_mViewProjInv : packoffset(c4);
  row_major float4x4 g_mLightProj[4] : packoffset(c8);
  row_major float4x4 g_mLightProjInv[4] : packoffset(c24);
  float3 g_vEyePosition : packoffset(c40);
  float3 g_vLightPosition : packoffset(c41);
  float3 g_vSigmaAbsorption : packoffset(c42);
  float3 g_vSigmaScatter : packoffset(c43);
  float g_fDistanceScale : packoffset(c40.w);
  float g_fBufferWidthInv : packoffset(c41.w);
  float g_fBufferHeightInv : packoffset(c42.w);
  float g_fResMultiplier : packoffset(c43.w);
  float4 g_vCascadeOffsetAndScale[4] : packoffset(c44);
  float4 g_vLightDir : packoffset(c48);
  float4 g_vAirlightParams : packoffset(c49);
  float4 g_vCascadeTessFactor : packoffset(c50);
  float4 g_vShadowMapDim : packoffset(c51);
  float4 g_vSunColor : packoffset(c52);
  float4 g_vIntensity : packoffset(c53);
  uint g_uCascadeArrayIndex[4] : packoffset(c54);
}
Texture2D<float> tDepthMapLowRes : register(t2);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float3 v1 : WORLDPOS0,
  uint v2 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

// Related shaders:
// VS 4809501df9cb5567 PS 9d24bfaec258ad8c <-- this one, removed halo here
// VS 6f9b30f90b4f45bc PS 928e51837769f738 <-- alternatively can move to infinity here
// VS 6f9b30f90b4f45bc PS 8974b39534db1a47 <-- final copy to screen, adjusted to infinity here

float4 stereo = StereoParams.Load(0);
float separation = stereo.x; float convergence = stereo.y;

// Remove halo from nvidia god rays resulting from stereo adjustment in other
// shader. Note that this is in pixels, so we need to use the screen size to
// calculate the correct adjustment.
v0.x += separation / g_fBufferWidthInv / 8;

  r0.xy = g_fResMultiplier * v0.xy;
  r0.y = g_fBufferHeightInv * r0.y;
  r0.x = dot(r0.xx, g_fBufferWidthInv);
  r0.x = -1.000000000e+000 + r0.x;
  r0.y = r0.y * -2.000000000e+000 + 1.000000000e+000;
  r1.xyzw = g_mViewProjInv._m10_m11_m12_m13 * r0.yyyy;
  r0.xyzw = r0.xxxx * g_mViewProjInv._m00_m01_m02_m03 + r1.xyzw;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r1.x = tDepthMapLowRes.Load(r1.xyz, int3(0, 0, 0)).x;
  r1.x = max(r1.x, v0.z);
  r0.xyzw = r1.xxxx * g_mViewProjInv._m20_m21_m22_m23 + r0.xyzw;
  r0.xyzw = g_mViewProjInv._m30_m31_m32_m33 + r0.xyzw;
  r0.w = 1.000000e+000 / r0.w;
  r0.xyz = -r0.xyz * r0.www + g_vEyePosition.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r1.x = rsqrt(r0.w);
  r0.w = sqrt(r0.w);
  r0.w = r0.w * g_fDistanceScale + 1.000000000e+000;
  r0.w = log2(r0.w);
  r0.xyz = r1.xxx * r0.xyz;
  r1.x = dot(g_vLightDir.xyz, g_vLightDir.xyz);
  r1.x = rsqrt(r1.x);
  r1.xyz = g_vLightDir.xyz * r1.xxx;
  r0.x = dot(r1.xyz, r0.xyz);
  r0.x = 1.000000000e+000 + r0.x;
  r0.y = v2.x ? -1.000000000e+000 : 1.000000000e+000;
  r0.x = r0.x * r0.y;
  r0.x = 5.000000000e-001 * r0.x;
  r0.y = g_vSigmaScatter.x + g_vSigmaAbsorption.x;
  r0.z = -r0.y * r0.w;
  r0.z = exp2(r0.z);
  r0.z = 1.000000000e+000 + -r0.z;
  r0.x = r0.x * r0.z;
  o0.x = r0.x / r0.y;
  o0.yzw = float3(0.000000e+000,1.000000e+000,1.000000e+000);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cb0
// {
//
//   row_major float4x4 g_mViewProj;    // Offset:    0 Size:    64 [unused]
//   row_major float4x4 g_mViewProjInv; // Offset:   64 Size:    64
//   row_major float4x4 g_mLightProj[4];// Offset:  128 Size:   256 [unused]
//   row_major float4x4 g_mLightProjInv[4];// Offset:  384 Size:   256 [unused]
//   float3 g_vEyePosition;             // Offset:  640 Size:    12
//   float3 g_vLightPosition;           // Offset:  656 Size:    12 [unused]
//   float3 g_vSigmaAbsorption;         // Offset:  672 Size:    12
//   float3 g_vSigmaScatter;            // Offset:  688 Size:    12
//   float g_fDistanceScale;            // Offset:  652 Size:     4
//   float g_fBufferWidthInv;           // Offset:  668 Size:     4
//   float g_fBufferHeightInv;          // Offset:  684 Size:     4
//   float g_fResMultiplier;            // Offset:  700 Size:     4
//   float4 g_vCascadeOffsetAndScale[4];// Offset:  704 Size:    64 [unused]
//   float4 g_vLightDir;                // Offset:  768 Size:    16
//   float4 g_vAirlightParams;          // Offset:  784 Size:    16 [unused]
//   float4 g_vCascadeTessFactor;       // Offset:  800 Size:    16 [unused]
//   float4 g_vShadowMapDim;            // Offset:  816 Size:    16 [unused]
//   float4 g_vSunColor;                // Offset:  832 Size:    16 [unused]
//   float4 g_vIntensity;               // Offset:  848 Size:    16 [unused]
//   uint g_uCascadeArrayIndex[4];      // Offset:  864 Size:    52 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// tDepthMapLowRes                   texture   float          2d    2        1
// cb0                               cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyz 
// WORLDPOS                 0   xyz         1     NONE   float       
// SV_IsFrontFace           0   x           2    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[49], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps_siv linear noperspective v0.xyz, position
dcl_input_ps_sgv v2.x, is_front_face
dcl_output o0.xyzw
dcl_temps 2
mul r0.xy, v0.xyxx, cb0[43].wwww
mul r0.y, r0.y, cb0[42].w
dp2 r0.x, r0.xxxx, cb0[41].wwww
add r0.x, r0.x, l(-1.000000)
mad r0.y, r0.y, l(-2.000000), l(1.000000)
mul r1.xyzw, r0.yyyy, cb0[5].xyzw
mad r0.xyzw, r0.xxxx, cb0[4].xyzw, r1.xyzw
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r1.x, r1.xyzw, t2.xyzw
max r1.x, r1.x, v0.z
mad r0.xyzw, r1.xxxx, cb0[6].xyzw, r0.xyzw
add r0.xyzw, r0.xyzw, cb0[7].xyzw
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mad r0.xyz, -r0.xyzx, r0.wwww, cb0[40].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r1.x, r0.w
sqrt r0.w, r0.w
mad r0.w, r0.w, cb0[40].w, l(1.000000)
log r0.w, r0.w
mul r0.xyz, r0.xyzx, r1.xxxx
dp3 r1.x, cb0[48].xyzx, cb0[48].xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, cb0[48].xyzx
dp3 r0.x, r1.xyzx, r0.xyzx
add r0.x, r0.x, l(1.000000)
movc r0.y, v2.x, l(-1.000000), l(1.000000)
mul r0.x, r0.y, r0.x
mul r0.x, r0.x, l(0.500000)
add r0.y, cb0[42].x, cb0[43].x
mul r0.z, r0.w, -r0.y
exp r0.z, r0.z
add r0.z, -r0.z, l(1.000000)
mul r0.x, r0.z, r0.x
div o0.x, r0.x, r0.y
mov o0.yzw, l(0,0,1.000000,1.000000)
ret 
// Approximately 37 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Games\Far Cry 4\bin\wrapper1349(49,10-52): warning X3206: 'Load': implicit truncation of vector type
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer cb0
// {
//
//   row_major float4x4 g_mViewProj;    // Offset:    0 Size:    64 [unused]
//   row_major float4x4 g_mViewProjInv; // Offset:   64 Size:    64
//   row_major float4x4 g_mLightProj[4];// Offset:  128 Size:   256 [unused]
//   row_major float4x4 g_mLightProjInv[4];// Offset:  384 Size:   256 [unused]
//   float3 g_vEyePosition;             // Offset:  640 Size:    12
//   float3 g_vLightPosition;           // Offset:  656 Size:    12 [unused]
//   float3 g_vSigmaAbsorption;         // Offset:  672 Size:    12
//   float3 g_vSigmaScatter;            // Offset:  688 Size:    12
//   float g_fDistanceScale;            // Offset:  652 Size:     4
//   float g_fBufferWidthInv;           // Offset:  668 Size:     4
//   float g_fBufferHeightInv;          // Offset:  684 Size:     4
//   float g_fResMultiplier;            // Offset:  700 Size:     4
//   float4 g_vCascadeOffsetAndScale[4];// Offset:  704 Size:    64 [unused]
//   float4 g_vLightDir;                // Offset:  768 Size:    16
//   float4 g_vAirlightParams;          // Offset:  784 Size:    16 [unused]
//   float4 g_vCascadeTessFactor;       // Offset:  800 Size:    16 [unused]
//   float4 g_vShadowMapDim;            // Offset:  816 Size:    16 [unused]
//   float4 g_vSunColor;                // Offset:  832 Size:    16 [unused]
//   float4 g_vIntensity;               // Offset:  848 Size:    16 [unused]
//   uint g_uCascadeArrayIndex[4];      // Offset:  864 Size:    52 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// tDepthMapLowRes                   texture   float          2d    2        1
// cb0                               cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyz 
// WORLDPOS                 0   xyz         1     NONE   float       
// SV_IsFrontFace           0   x           2    FFACE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[49], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps_siv linear noperspective v0.xyz, position
dcl_input_ps_sgv v2.x, is_front_face
dcl_output o0.xyzw
dcl_temps 2
mul r0.xy, v0.xyxx, cb0[43].wwww
mul r0.y, r0.y, cb0[42].w
dp2 r0.x, r0.xxxx, cb0[41].wwww
add r0.x, r0.x, l(-1.000000)
mad r0.y, r0.y, l(-2.000000), l(1.000000)
mul r1.xyzw, r0.yyyy, cb0[5].xyzw
mad r0.xyzw, r0.xxxx, cb0[4].xyzw, r1.xyzw
round_z r1.xy, v0.xyxx
ftoi r1.xy, r1.xyxx
mov r1.zw, l(0,0,0,0)
ld_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r1.x, r1.xyzw, t2.xyzw
max r1.x, r1.x, v0.z
mad r0.xyzw, r1.xxxx, cb0[6].xyzw, r0.xyzw
add r0.xyzw, r0.xyzw, cb0[7].xyzw
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mad r0.xyz, -r0.xyzx, r0.wwww, cb0[40].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r1.x, r0.w
sqrt r0.w, r0.w
mad r0.w, r0.w, cb0[40].w, l(1.000000)
log r0.w, r0.w
mul r0.xyz, r0.xyzx, r1.xxxx
dp3 r1.x, cb0[48].xyzx, cb0[48].xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, cb0[48].xyzx
dp3 r0.x, r1.xyzx, r0.xyzx
add r0.x, r0.x, l(1.000000)
movc r0.y, v2.x, l(-1.000000), l(1.000000)
mul r0.x, r0.y, r0.x
mul r0.x, r0.x, l(0.500000)
add r0.y, cb0[42].x, cb0[43].x
mul r0.z, r0.w, -r0.y
exp r0.z, r0.z
add r0.z, -r0.z, l(1.000000)
mul r0.x, r0.z, r0.x
div o0.x, r0.x, r0.y
mov o0.yzw, l(0,0,1.000000,1.000000)
ret 
// Approximately 38 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
