// Hairworks / simulated fur geometry shader. Fix for glitch at depth W==1

//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.1.31 on Mon Jul 13 00:54:15 2015
//
//
// Buffer Definitions: 
//
// cbuffer cbPerFrame
// {
//
//   row_major float4x4 g_viewProjection;// Offset:    0 Size:    64
//   row_major float4x4 g_viewMatrix;   // Offset:   64 Size:    64
//   row_major float4x4 g_modelToWorld; // Offset:  128 Size:    64 [unused]
//   float3 g_camPosition;              // Offset:  192 Size:    12 [unused]
//   int g_cameraLHS;                   // Offset:  204 Size:     4 [unused]
//   float g_hairDensity;               // Offset:  208 Size:     4 [unused]
//   float g_densityPass;               // Offset:  212 Size:     4 [unused]
//   int g_useViewfrustrumCulling;      // Offset:  216 Size:     4 [unused]
//   int g_usePixelDensity;             // Offset:  220 Size:     4 [unused]
//   float g_lengthNoise;               // Offset:  224 Size:     4 [unused]
//   float g_lengthScale;               // Offset:  228 Size:     4 [unused]
//   float g_useBackfaceCulling;        // Offset:  232 Size:     4 [unused]
//   float g_backfaceCullingThreshold;  // Offset:  236 Size:     4 [unused]
//   float g_baseWidth;                 // Offset:  240 Size:     4 [unused]
//   float g_shadowDensityScale;        // Offset:  244 Size:     4 [unused]
//   float g_baseWidthShadowScale;      // Offset:  248 Size:     4 [unused]
//   float g_rootWidthScale;            // Offset:  252 Size:     4 [unused]
//   float g_tipWidthScale;             // Offset:  256 Size:     4 [unused]
//   float g_baseWidthNoise;            // Offset:  260 Size:     4 [unused]
//   uint g_shaderMask;                 // Offset:  264 Size:     4
//   float g_widthDummy3;               // Offset:  268 Size:     4 [unused]
//   float g_clumpScale;                // Offset:  272 Size:     4 [unused]
//   float g_clumpNoise;                // Offset:  276 Size:     4 [unused]
//   float g_clumpRoundness;            // Offset:  280 Size:     4 [unused]
//   float g_clumpDummy1;               // Offset:  284 Size:     4 [unused]
//   float g_volumeSpread;              // Offset:  288 Size:     4 [unused]
//   float g_otherDummy1;               // Offset:  292 Size:     4 [unused]
//   float g_otherDummy2;               // Offset:  296 Size:     4 [unused]
//   float g_otherDummy3;               // Offset:  300 Size:     4 [unused]
//   float g_waveScale;                 // Offset:  304 Size:     4 [unused]
//   float g_waveFreq;                  // Offset:  308 Size:     4 [unused]
//   float g_waveScaleNoise;            // Offset:  312 Size:     4 [unused]
//   float g_waveFreqNoise;             // Offset:  316 Size:     4 [unused]
//   float g_waveCutoff;                // Offset:  320 Size:     4 [unused]
//   float g_waveDummy1;                // Offset:  324 Size:     4 [unused]
//   float g_waveDummy2;                // Offset:  328 Size:     4 [unused]
//   float g_waveDummy3;                // Offset:  332 Size:     4 [unused]
//   int g_useDensityTexture;           // Offset:  336 Size:     4 [unused]
//   int g_useRootWidthTexture;         // Offset:  340 Size:     4 [unused]
//   int g_useTipWidthTexture;          // Offset:  344 Size:     4 [unused]
//   int g_useClumpScaleTexture;        // Offset:  348 Size:     4 [unused]
//   int g_useClumpNoiseTexture;        // Offset:  352 Size:     4 [unused]
//   int g_useWaveScaleTexture;         // Offset:  356 Size:     4 [unused]
//   int g_useWaveFreqTexture;          // Offset:  360 Size:     4 [unused]
//   int g_useLengthTexture;            // Offset:  364 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cbPerFrame                        cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// Position                 0   xyz         0     NONE   float   xyz 
// TEXALONGLENGTH           0      w        0     NONE   float      w
// SCALPTEX                 0   xy          1     NONE   float   xy  
// Width                    0     z         1     NONE   float     z 
// Normal                   0   xyz         2     NONE   float   xyz 
// Tangent                  0   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// ABCD                     0   xyzw        1     NONE   float   xyzw
// EFGH                     0   xyzw        2     NONE   float   xyzw
//
gs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[17], immediateIndexed
dcl_input v[2][0].xyz
dcl_input v[2][0].w
dcl_input v[2][1].xy
dcl_input v[2][1].z
dcl_input v[2][2].xyz
dcl_input v[2][3].xyz
dcl_temps 10
dcl_inputprimitive line 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_maxout 4
dcl_resource_texture2d (float,float,float,float) t125
eq r0.x, v[0][1].z, l(0.000000)
eq r0.y, v[1][1].z, l(0.000000)
and r0.x, r0.y, r0.x
if_nz r0.x
  ret 
endif 
dp3 r0.x, v[0][3].xyzx, v[0][3].xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v[0][3].xyzx
dp3 r0.w, v[1][3].xyzx, v[1][3].xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v[1][3].xyzx
mov r2.z, cb0[5].z
mov r2.x, cb0[6].z
mov r2.y, cb0[4].z
mul r3.xyz, r0.yzxy, r2.xyzx
mad r3.xyz, r2.zxyz, r0.zxyz, -r3.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
mul r4.xyz, r1.yzxy, r2.xyzx
mad r2.xyz, r2.zxyz, r1.zxyz, -r4.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
mad r4.xyz, -v[0][1].zzzz, r3.xyzx, v[0][0].xyzx
mad r3.xyz, v[0][1].zzzz, r3.xyzx, v[0][0].xyzx
mad r5.xyz, -v[1][1].zzzz, r2.xyzx, v[1][0].xyzx
mad r2.xyz, v[1][1].zzzz, r2.xyzx, v[1][0].xyzx
and r6.xyzw, cb0[16].zzzz, l(4, 2, 1, 8)
mul r0.w, l(2048.000000), v[0][1].y
round_ni r0.w, r0.w
add r0.w, r0.w, v[0][1].x
max r7.xy, l(-1.000000, -1.000000, 0.000000, 0.000000), v[0][2].xyxx
min r7.xy, r7.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mad r7.xy, r7.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
mul r1.w, r7.y, l(2048.000000)
round_ni r1.w, r1.w
add r7.x, r7.x, r1.w
mov r7.y, v[0][2].z
mov r7.z, l(0)
movc r7.xyz, r6.yyyy, r7.xyzx, l(0,0,0,0)
movc r0.xyzw, r6.zzzx, r0.xyzw, l(0,0,0,0)
movc r1.w, r6.w, v[0][0].w, l(0)
mul r8.xyzw, r4.yyyy, cb0[1].xyzw
mad r8.xyzw, r4.xxxx, cb0[0].xyzw, r8.xyzw
mad r4.xyzw, r4.zzzz, cb0[2].xyzw, r8.xyzw
add r4.xyzw, r4.xyzw, cb0[3].xyzw

// Hairworks glitches at depth W==1. Calculate the correction for that depth
// here and apply it to any of the below outputs that match that depth.
ld_indexable(texture2d)(float,float,float,float) r9.xyzw, l(0, 0, 0, 0), t125.xyzw
add r9.w, l(1.0), -r9.y
mul r9.w, r9.w, r9.x

eq r9.w, r4.w, l(1.0)
if_nz r9.w
  add r4.x, r4.x, r9.w
endif

mov o0.xyzw, r4.xyzw
mov o1.xyz, r0.xyzx
mov o1.w, r1.w
mov o2.x, r0.w
mov o2.yzw, r7.xxyz
emit_stream m0
mul r4.xyzw, r3.yyyy, cb0[1].xyzw
mad r4.xyzw, r3.xxxx, cb0[0].xyzw, r4.xyzw
mad r3.xyzw, r3.zzzz, cb0[2].xyzw, r4.xyzw
add r3.xyzw, r3.xyzw, cb0[3].xyzw

eq r9.w, r3.w, l(1.0)
if_nz r9.w
  add r3.x, r3.x, r9.w
endif

mov o0.xyzw, r3.xyzw
mov o1.xyz, r0.xyzx
mov o1.w, r1.w
mov o2.x, r0.w
mov o2.yzw, r7.xxyz
emit_stream m0
movc r0.xyz, r6.zzzz, r1.xyzx, l(0,0,0,0)
movc r1.x, r6.w, v[1][0].w, l(0)
mul r3.xyzw, r5.yyyy, cb0[1].xyzw
mad r3.xyzw, r5.xxxx, cb0[0].xyzw, r3.xyzw
mad r3.xyzw, r5.zzzz, cb0[2].xyzw, r3.xyzw
add r3.xyzw, r3.xyzw, cb0[3].xyzw

eq r9.w, r3.w, l(1.0)
if_nz r9.w
  add r3.x, r3.x, r9.w
endif

mov o0.xyzw, r3.xyzw
mov o1.xyz, r0.xyzx
mov o1.w, r1.x
mov o2.x, r0.w
mov o2.yzw, r7.xxyz
emit_stream m0
mul r3.xyzw, r2.yyyy, cb0[1].xyzw
mad r3.xyzw, r2.xxxx, cb0[0].xyzw, r3.xyzw
mad r2.xyzw, r2.zzzz, cb0[2].xyzw, r3.xyzw
add r2.xyzw, r2.xyzw, cb0[3].xyzw

eq r9.w, r2.w, l(1.0)
if_nz r9.w
  add r2.x, r2.x, r9.w
endif

mov o0.xyzw, r2.xyzw
mov o1.xyz, r0.xyzx
mov o1.w, r1.x
mov o2.x, r0.w
mov o2.yzw, r7.xxyz
emit_stream m0
cut_stream m0
ret 
// Approximately 88 instruction slots used
