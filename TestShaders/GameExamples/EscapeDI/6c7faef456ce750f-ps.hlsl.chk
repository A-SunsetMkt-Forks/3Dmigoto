
cbuffer global_viewport : register(b0)
{
  float3 camera_unprojection : packoffset(c0);
  float3 camera_pos : packoffset(c1);
  float4x4 camera_view : packoffset(c2);
  float4x4 camera_inv_view : packoffset(c6);
  float4x4 camera_projection : packoffset(c10);
  float4x4 camera_inv_projection : packoffset(c14);
  float4x4 camera_world : packoffset(c18);
  float time : packoffset(c22);
  float delta_time : packoffset(c22.y);
  float2 back_buffer_size : packoffset(c22.z);
  float g_tessellation : packoffset(c23);
  float g_tessellation_tri_size : packoffset(c23.y);
  float g_tessellation_detail : packoffset(c23.z);
}

cbuffer c0 : register(b1)
{
  float4x4 world_view_proj : packoffset(c0);
  float4x4 world_to_shadow_map : packoffset(c4);
}
SamplerState depth_s : register(s0);
SamplerComparisonState shadow_map_sampler_s : register(s1);
Texture2D<float4> depth : register(t0);
Texture2D<float> shadow_map_slice_0 : register(t1);
Texture2D<float4> nv_stereo_params : register(t2);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1,r2;
  uint4 bitmask;
  r0.xyzw = depth.Sample(depth_s, v1.xy).xyzw;
  r0.y = saturate(1.999999955e-002 * r0.x);
  r0.y = r0.y * 1.949999928e-001 + 4.999999888e-003;
  r0.x = r0.x + -r0.y;

// hand-fix warning from float4 input, needs float3 for u,v,mipmap
r1.xyzw = nv_stereo_params.Load(float3(0.000000e+000,0.000000e+000,0.000000e+000)).xyzw;

  r0.y = camera_unprojection.x * r1.y;
  r1.x = camera_inv_view._m00 * r0.y;
  r1.y = camera_inv_view._m01 * r0.y;
  r1.z = camera_inv_view._m02 * r0.y;
  r1.xyz = v2.xyz + -r1.xyz;
  r1.xyz = r1.xyz / v2.www;
  r2.x = r0.y * camera_inv_view._m00 + camera_inv_view._m30;
  r2.y = r0.y * camera_inv_view._m01 + camera_inv_view._m31;
  r2.z = r0.y * camera_inv_view._m02 + camera_inv_view._m32;
  r0.xyz = r1.xyz * r0.xxx + r2.xyz;
  r0.w = 1.000000000e+000;
  r1.x = dot(r0.xyzw, world_to_shadow_map._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, world_to_shadow_map._m01_m11_m21_m31);
  r0.x = dot(r0.xyzw, world_to_shadow_map._m02_m12_m22_m32);
  
// hand-fix GetDimension to use width, height, not bitmask.
shadow_map_slice_0.GetDimensions(r2.x, r2.y);

  r0.yz = float2(1.000000e+000,1.000000e+000) / r2.xy;
  r0.w = 0.000000000e+000;
  r1.z = -5.000000000e-001;
  while (true) {
    r1.w = 5.000000000e-001 < r1.z;
    if (r1.w != 0) break;
    r2.x = r1.z;
    r1.w = r0.w;
    r2.z = -5.000000000e-001;
    while (true) {
      r2.w = 5.000000000e-001 < r2.z;
      if (r2.w != 0) break;
      r2.y = r2.z;
      r2.yw = r2.xy * r0.yz + r1.xy;
      r2.y = shadow_map_slice_0.SampleCmpLevelZero(shadow_map_sampler_s, r2.yw, r0.x).x;
      r1.w = r2.y + r1.w;
      r2.z = 1.000000000e+000 + r2.z;
    }
    r0.w = r1.w;
    r1.z = 1.000000000e+000 + r1.z;
  }
  o0.xyz = float3(2.500000e-001,2.500000e-001,2.500000e-001) * r0.www;
  o0.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
//
// Buffer Definitions: 
//
// cbuffer global_viewport
// {
//
//   float3 camera_unprojection;        // Offset:    0 Size:    12
//   float3 camera_pos;                 // Offset:   16 Size:    12 [unused]
//   float4x4 camera_view;              // Offset:   32 Size:    64 [unused]
//   float4x4 camera_inv_view;          // Offset:   96 Size:    64
//   float4x4 camera_projection;        // Offset:  160 Size:    64 [unused]
//   float4x4 camera_inv_projection;    // Offset:  224 Size:    64 [unused]
//   float4x4 camera_world;             // Offset:  288 Size:    64 [unused]
//   float time;                        // Offset:  352 Size:     4 [unused]
//   float delta_time;                  // Offset:  356 Size:     4 [unused]
//   float2 back_buffer_size;           // Offset:  360 Size:     8 [unused]
//   float g_tessellation;              // Offset:  368 Size:     4 [unused]
//   float g_tessellation_tri_size;     // Offset:  372 Size:     4 [unused]
//   float g_tessellation_detail;       // Offset:  376 Size:     4 [unused]
//
// }
//
// cbuffer c0
// {
//
//   float4x4 world_view_proj;          // Offset:    0 Size:    64 [unused]
//   float4x4 world_to_shadow_map;      // Offset:   64 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// depth                             sampler      NA          NA    0        1
// shadow_map_sampler              sampler_c      NA          NA    1        1
// depth                             texture  float4          2d    0        1
// shadow_map_slice_0                texture   float          2d    1        1
// nv_stereo_params                  texture  float4          2d    2        1
// global_viewport                   cbuffer      NA          NA    0        1
// c0                                cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 3
sample r0.xyzw, v1.xyxx, t0.xyzw, s0
mul_sat r0.y, r0.x, l(0.020000)
mad r0.y, r0.y, l(0.195000), l(0.005000)
add r0.x, -r0.y, r0.x
ld r1.xyzw, l(0, 0, 0, 0), t2.xyzw
mul r0.y, r1.y, cb0[0].x
mul r1.x, r0.y, cb0[6].x
mul r1.y, r0.y, cb0[7].x
mul r1.z, r0.y, cb0[8].x
add r1.xyz, -r1.xyzx, v2.xyzx
div r1.xyz, r1.xyzx, v2.wwww
mad r2.x, r0.y, cb0[6].x, cb0[6].w
mad r2.y, r0.y, cb0[7].x, cb0[7].w
mad r2.z, r0.y, cb0[8].x, cb0[8].w
mad r0.xyz, r1.xyzx, r0.xxxx, r2.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb1[4].xyzw
dp4 r1.y, r0.xyzw, cb1[5].xyzw
dp4 r0.x, r0.xyzw, cb1[6].xyzw
resinfo r2.xyzw, l(0), t1.xyzw
div r0.yz, l(1.000000, 1.000000, 1.000000, 1.000000), r2.xxyx
mov r0.w, l(0)
mov r1.z, l(-0.500000)
loop 
  lt r1.w, l(0.500000), r1.z
  breakc_nz r1.w
  mov r2.x, r1.z
  mov r1.w, r0.w
  mov r2.z, l(-0.500000)
  loop 
    lt r2.w, l(0.500000), r2.z
    breakc_nz r2.w
    mov r2.y, r2.z
    mad r2.yw, r2.xxxy, r0.yyyz, r1.xxxy
    sample_c_lz r2.y, r2.ywyy, t1.xxxx, s1, r0.x
    add r1.w, r1.w, r2.y
    add r2.z, r2.z, l(1.000000)
  endloop 
  mov r0.w, r1.w
  add r1.z, r1.z, l(1.000000)
endloop 
mul o0.xyz, r0.wwww, l(0.250000, 0.250000, 0.250000, 0.000000)
mov o0.w, l(1.000000)
ret 
// Approximately 44 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
