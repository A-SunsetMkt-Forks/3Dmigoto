//HUD - background of floating key icons and way more
cbuffer Constants : register(b0)
{
  float4 vfuniforms[96] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

// FIXME: Implement include handler in 3DMigoto to make paths consistent:
#include <x64\ShaderFixes\hud.hlsl>

// Structure of the vertex buffer determined from frame analysis:
struct vb_entry
{
  float color1;
  uint v1; //unorm4?
  float2 pos;
};

StructuredBuffer<struct vb_entry> vb_struct : register(t100);
Buffer<uint> ib : register(t101);

// Copy of the vertex shader to calculate the output position:
float4 calc_pos(float2 pos, float4 v1)
{
  float4 v2 = float4(pos, 0, 1);
  float4 o4;

  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = v1.zzzz * float4(1.020040e+003,1.020040e+003,1.020040e+003,1.020040e+003) + float4(2.100000e+000,3.100000e+000,1.000000e-001,1.100000e+000);
  r0.xyzw = (uint4)r0.xyzw;
  o4.x = dot(v2.xyzw, vfuniforms[r0.x].xyzw);
  o4.y = dot(v2.xyzw, vfuniforms[r0.y].xyzw);
  o4.zw = float2(0.000000e+000,1.000000e+000);
  return o4;
}

float2 find_center(uint id)
{
  int index_count = int(IniParams.Load(int2(3,0)).y);

  uint id1 = ib[0];
  uint id2 = ib[index_count - 1];

  float2 pos1 = vb_struct[id1].pos;
  float2 pos2 = vb_struct[id2].pos;

  // Orig code uses .z, which will be the 3rd byte, but remember this is byte
  // swapped since it was loaded as little-endian. We then need to scale it
  // like a UNORM to get it to the form the game expects:
  float v1 = (((vb_struct[id1].v1) >> 16) & 0xff) / 255.0;
  float v2 = (((vb_struct[id2].v1) >> 16) & 0xff) / 255.0;

  float2 p1 = calc_pos(pos1, v1);
  float2 p2 = calc_pos(pos2, v2);
  return (p1 + p2) / 2;
}

void main(
  float4 v0 : COLOR0,
  float4 v1 : COLOR1,
  float4 v2 : SV_Position0,
  out float4 o0 : COLOR0,
  out float4 o1 : COLOR1,
  out float4 o2 : TEXCOORD0,
  out float4 o3 : TEXCOORD1,
  out float4 o4 : SV_Position0,
  uint id : SV_VertexID)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  // Proof that the vertex buffer works, and confirmation that SV_VertexID is
  // the ID within the vertex buffer, not the index buffer!
  v2.xy = vb_struct[id].pos.xy;
  v1.x = (((vb_struct[id].v1) >> 0) & 0xff) / 255.0;
  v1.y = (((vb_struct[id].v1) >> 8) & 0xff) / 255.0;
  v1.z = (((vb_struct[id].v1) >> 16) & 0xff) / 255.0;
  v1.w = (((vb_struct[id].v1) >> 24) & 0xff) / 255.0;

  o0.xyzw = v0.xyzw;
  o1.xyzw = v1.xyzw;
  r0.xyzw = v1.zzzz * float4(1.020040e+003,1.020040e+003,1.020040e+003,1.020040e+003) + float4(2.100000e+000,3.100000e+000,1.000000e-001,1.100000e+000);
  r0.xyzw = (uint4)r0.xyzw;
  o2.xyzw = vfuniforms[r0.z].xyzw;
  o3.xyzw = vfuniforms[r0.w].xyzw;
  o4.x = dot(v2.xyzw, vfuniforms[r0.x].xyzw);
  o4.y = dot(v2.xyzw, vfuniforms[r0.y].xyzw);
  o4.zw = float2(0.000000e+000,1.000000e+000);

  // Making sure these work:
  //o4 = calc_pos(v2, v1);
  //o4.xy = find_center(id);

if (!rt_is_screen())
	return;

float4 stereo = StereoParams.Load(0);
float4 params = IniParams.Load(0);

if (params.z == 1)
	o4.x += adjust_from_stereo2mono_depth_buffer(dot(float4(0,0,0,1), vfuniforms[r0.x].xyzw), dot(float4(0,0,0,1), vfuniforms[r0.y].xyzw));
else if (params.z == 2)
	o4.x += adjust_from_stereo2mono_depth_buffer(o4.x, o4.y);
else if (params.z == 3) {
	float2 center = find_center(id);
	if (in_floating_region(center)) {
		float adj = adjust_from_stereo2mono_depth_buffer(center.x, center.y);
		for (float offset = 0.1; offset <= 0.5; offset += 0.1)
			adj = min_adj(adj, adjust_from_stereo2mono_depth_buffer(center.x, center.y - offset));
		o4.x += adj;
	} else
		o4.x -= stereo.x*(params.x);
} else
	o4.x -= stereo.x*(params.x);

  return;
}
 
