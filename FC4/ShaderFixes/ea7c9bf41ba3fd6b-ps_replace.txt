//water - need to fix specular reflection
cbuffer CViewportShaderParameterProvider : register(b0)
{
  float4 _AmbientColorMultiplier : packoffset(c0);
  float4 _AmbientOcclusionRanges_SunOcclusionFactor : packoffset(c1);
  float4 _BloomAdaptationFactor : packoffset(c2);
  float4 _CameraDirection_FOVDeg : packoffset(c3);
  float4 _CameraDistances : packoffset(c4);
  float4 _CameraNearPlaneSize : packoffset(c5);
  float4 _CameraPositionFractions_ZOffsetWS : packoffset(c6);
  float4 _CameraPositionFractions_ZOffsetWS_Previous : packoffset(c7);
  float4 _CameraPosition_DistanceScale : packoffset(c8);
  float4 _CameraPosition_DistanceScale_Previous : packoffset(c9);
  float4x4 _CullingViewProjectionMatrix : packoffset(c10);
  float4 _DepthScale : packoffset(c14);
  float4 _DepthTextureRcpSize : packoffset(c15);
  float4 _DepthTextureScaleOffset : packoffset(c16);
  float4 _FogParams : packoffset(c17);
  float4 _FogSHB : packoffset(c18);
  float4 _FogSHG : packoffset(c19);
  float4 _FogSHR : packoffset(c20);
  float4 _HeightFogParams : packoffset(c21);
  float4x4 _InvProjectionMatrix : packoffset(c22);
  float4x4 _InvViewMatrix : packoffset(c26);
  float4x4 _ProjectionMatrix : packoffset(c30);
  float4 _TempSunDirection : packoffset(c34);
  float4x4 _ViewMatrix : packoffset(c35);
  float4 _ViewPoint_ShadowProjDepthMin : packoffset(c39);
  float4x4 _ViewProjectionMatrix : packoffset(c40);
  float4x4 _ViewRotProjectionMatrix : packoffset(c44);
  float4x4 _ViewRotProjectionMatrix_Previous : packoffset(c48);
  float4 _ViewportSize : packoffset(c52);
  float2 _MotionVectorOffsets : packoffset(c53);
  float3 _CameraRight : packoffset(c54);
  float3 _CameraUp : packoffset(c55);
  float3 _EnvironmentMapColorOffset : packoffset(c56);
  float3 _EnvironmentMapColorScale : packoffset(c57);
}

cbuffer CGlobalShaderParameterProvider : register(b1)
{
  float4 _BurnColor : packoffset(c0);
  float4 _BurnParams : packoffset(c1);
  float4 _BurnParams2 : packoffset(c2);
  float4 _BurnParams3 : packoffset(c3);
  float4 _CascadedShadowScaleOffsetTile0 : packoffset(c4);
  float4 _CascadedShadowScaleOffsetTile1 : packoffset(c5);
  float4 _GlobalScalars : packoffset(c6);
  float4 _SSS_MiscParams : packoffset(c7);
  float4 _WindSimParamsX : packoffset(c8);
  float4 _WindSimParamsY : packoffset(c9);
  float2 _RangeDepthCompression : packoffset(c10);
  float3 _SSS_Color : packoffset(c11);
  int _BRDFHighQuality : packoffset(c11.w);
}

cbuffer Stream : register(b2)
{
  bool _DisableLayerOffset : packoffset(c0);
  bool _DisableAlphaMask : packoffset(c0.y);
  float _DiffuseBlending : packoffset(c0.z);
  float4 _PatternColor1 : packoffset(c1);
  float4 _PatternColor2 : packoffset(c2);
  float4 _DiffuseTiling : packoffset(c3);
  float4 _DiffuseSpeeds : packoffset(c4);
  float4 _SpecularAndAlphaTiling : packoffset(c5);
  float4 _Settings : packoffset(c6);
  float4 _NormalTilings : packoffset(c7);
  float4 _NormalSpeeds : packoffset(c8);
  float2 _NormalIntensities : packoffset(c9);
  bool _BlendNormalInShader : packoffset(c9.z);
  float4 _MaterialPickingID : packoffset(c10);
}
SamplerState DepthVPSampler__SampObj___s : register(s0);
SamplerState DiffuseTexture1__SampObj___s : register(s1);
SamplerState DiffuseTexture2__SampObj___s : register(s2);
SamplerState SpecularTexture1__SampObj___s : register(s3);
SamplerState NormalTexture1__SampObj___s : register(s4);
SamplerState ResolvedNormalGBuffer__SampObj___s : register(s5);
Texture2D<float4> DepthVPSampler__TexObj__ : register(t0);
Texture2D<float4> DiffuseTexture1__TexObj__ : register(t1);
Texture2D<float4> DiffuseTexture2__TexObj__ : register(t2);
Texture2D<float4> SpecularTexture1__TexObj__ : register(t3);
Texture2D<float4> NormalTexture1__TexObj__ : register(t4);
Texture2D<float4> ResolvedNormalGBuffer__TexObj__ : register(t5);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  float3 v4 : TEXCOORD3,
  float3 v5 : TEXCOORD4,
  float3 v6 : TEXCOORD5,
  float3 v7 : TEXCOORD6,
  float2 v8 : TEXCOORD7,
  uint v9 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask;
  r0.xy = v7.xy / v7.zz;
  
  r0.xyzw = DepthVPSampler__TexObj__.SampleLevel(DepthVPSampler__SampObj___s, r0.xy, 0.000000000e+000).xyzw;

  r0.x = _DepthScale.y * r0.x + _DepthScale.x;
  r0.x = 1.000000e+000 / r0.x;
  
  r0.x = -v2.w + r0.x;
  r0.x = saturate(2.000000000e+005 * r0.x);
 
  r0.yz = _SpecularAndAlphaTiling.zw * v8.xy;


  
  r1.xyzw = DiffuseTexture1__TexObj__.Sample(DiffuseTexture1__SampObj___s, r0.yz).xyzw;
  r0.y = v1.w * r1.z;
  r0.z = r0.y * r0.x + -3.921568859e-003;
  r0.x = r0.y * r0.x;
  r0.y = r0.z < 0.000000000e+000;
  if (r0.y != 0) discard;
  r1.xyzw = _GlobalScalars.yyyy * _DiffuseSpeeds.xyzw + v8.xyxy;
  r1.xyzw = _DiffuseTiling.xyzw * r1.xyzw;
  r2.xyzw = DiffuseTexture1__TexObj__.Sample(DiffuseTexture1__SampObj___s, r1.zw).xyzw;
  r3.xyzw = DiffuseTexture1__TexObj__.Sample(DiffuseTexture1__SampObj___s, r1.xy).xyzw;
  r1.xyzw = DiffuseTexture2__TexObj__.Sample(DiffuseTexture2__SampObj___s, r1.xy).xyzw;
  r0.y = saturate(_DisableLayerOffset * r1.x);
  r1.xyz = _PatternColor1.xyz * r3.xxx;
  r2.xyz = r2.yyy * _PatternColor2.xyz + -r1.xyz;
  r1.xyz = r0.yyy * r2.xyz + r1.xyz;
  r0.y = saturate(_Settings.y * r0.y);
  r2.x = dot(float3(2.500000e-001,5.000000e-001,2.500000e-001), r1.xyz);
  r2.y = dot(float2(5.000000e-001,-5.000000e-001), r1.xz);
  r2.z = dot(float3(-2.500000e-001,5.000000e-001,-2.500000e-001), r1.xyz);
  r1.xyz = float3(0.000000e+000,4.980392e-001,4.980392e-001) + r2.xyz;
  r0.zw = (int2)v0.xy;
  r0.zw = (int2)r0.zw & int2(1,1);
  r0.z = r0.z == r0.w;
  o0.y = r0.z ? r1.y : r1.z;
  o0.x = sqrt(r1.x);
  o0.w = r0.x;
  r1.xyzw = _GlobalScalars.yyyy * _NormalSpeeds.xyzw + v8.xyxy;
  r1.xyzw = _NormalTilings.xyzw * r1.xyzw;
  r2.xyzw = NormalTexture1__TexObj__.Sample(NormalTexture1__SampObj___s, r1.zw).yzwx;
  r1.xyzw = NormalTexture1__TexObj__.Sample(NormalTexture1__SampObj___s, r1.xy).yzwx;
  r0.zw = r2.zx * float2(2.007874e+000,2.007874e+000) + float2(-1.000000e+000,-1.000000e+000);
  r2.xy = _NormalIntensities.yy * r0.zw;
  r0.z = dot(r2.xy, r2.xy);
  r0.z = min(r0.z, 1.000000000e+000);
  r0.z = -r0.z * 9.990000129e-001 + 1.000000000e+000;
  r2.z = sqrt(r0.z);
  r0.zw = r1.zx * float2(2.007874e+000,2.007874e+000) + float2(-1.000000e+000,-1.000000e+000);
  r1.xy = _NormalIntensities.xx * r0.zw;
  r0.z = dot(r1.xy, r1.xy);
  r0.z = min(r0.z, 1.000000000e+000);
  r0.z = -r0.z * 9.990000129e-001 + 1.000000000e+000;
  r1.z = sqrt(r0.z);
  r2.xyzw = r2.xyzw + -r1.xyzw;
  r1.xyzw = r0.yyyy * r2.xyzw + r1.xyzw;
  r0.y = _Settings.x * r1.w;
  r0.zw = _GlobalScalars.yy * _Settings.zw + v8.xy;
  r0.zw = _SpecularAndAlphaTiling.xy * r0.zw;
  r2.xyzw = SpecularTexture1__TexObj__.Sample(SpecularTexture1__SampObj___s, r0.zw).xyzw;
  o0.z = r2.y * r0.y;
  o2.y = r2.x;
  r0.yzw = v3.yxz * r1.yyy;
  r0.yzw = r1.xxx * v4.yxz + r0.yzw;
  r0.yzw = r1.zzz * v2.yxz + r0.yzw;
  r1.x = dot(r0.yzw, r0.yzw);
  r1.x = rsqrt(r1.x);
  
// float4 stereo = StereoParams.Load(0);
// float4 r20;
// r20.xy = v0.xy;
// r20.x -= stereo.x*(d - stereo.y);   
  
  
  r1.yz = _ViewportSize.zw * v0.xy; //v0.xy;
  r2.xyzw = ResolvedNormalGBuffer__TexObj__.Sample(ResolvedNormalGBuffer__SampObj___s, r1.yz).xyzw;
  r1.y = 3.000000000e+000 * r2.w;
  r2.xyz = r2.xyz * float3(1.414214e+000,1.414214e+000,1.414214e+000) + float3(-7.071068e-001,-7.071068e-001,-7.071068e-001);
  r1.y = (uint)r1.y;
  r1.z = dot(r2.xyz, r2.xyz);
  r1.z = min(r1.z, 1.000000000e+000);
  r1.z = 1.000000000e+000 + -r1.z;
  r1.z = sqrt(r1.z);
  r1.w = r1.y ? r1.z : r2.x;
  r3.xy = r1.yy == float2(1.000000e+000,2.000000e+000);
  r4.z = r1.y ? r2.x : r1.z;
  r5.xy = r3.xy ? r1.zz : r2.yz;
  r1.y = r3.x ? r2.y : r1.w;
  r5.z = r3.y ? r2.z : r1.y;
  r4.xy = float2(2.000000e+000,2.000000e+000);
  r1.yzw = r4.xyz * r4.zzz;
  r5.w = -2.000000000e+000;
  r1.yzw = r1.yzw * r5.zyw + float3(0.000000e+000,0.000000e+000,1.000000e+000);
  r2.yz = r5.zx;
  r3.xyz = r5.yww * r5.xxx;
  r2.x = 2.000000000e+000;
  r1.yzw = r3.xyz * r2.xyz + r1.yzw;
  r0.yzw = r0.yzw * r1.xxx + -r1.yzw;
  r0.yzw = r0.xxx * r0.yzw + r1.yzw;
  r1.xyz = r0.yzw * float3(1.000000e+000,-1.000000e+000,1.000000e+000) + float3(0.000000e+000,0.000000e+000,1.000000e+000);
  r1.x = dot(r1.xyz, r1.xyz);
  r1.x = rsqrt(r1.x);
  r2.x = r1.x * r0.y;
  r2.y = r1.x * -r0.z;
  r0.y = 1.000000000e+000 + r0.w;
  r2.w = r0.y * r1.x;
  r0.y = abs(r2.y) >= abs(r2.x);
  r0.zw = r2.yx < float2(0.000000e+000,0.000000e+000);
  r0.z = r0.z ? 3.000000000e+000 : 2.000000000e+000;
  r0.w = r0.w ? 1.000000 : 0;
  r0.y = r0.y ? r0.z : r0.w;
  r0.y = 5.000000000e-001 * r0.y;
  r0.y = (uint)r0.y;
  r0.zw = float2(-0.000000e+000,-0.000000e+000) >= abs(r2.xy);
  r0.z = r0.w ? r0.z : 0;
  r0.y = r0.z ? 2 : r0.y;
  r0.z = max(abs(r2.y), abs(r2.x));
  r0.z = r0.z < abs(r2.w);
  r0.y = r0.z ? 3 : r0.y;
  r1.xy = r0.yy ? r2.xw : r2.wx;
  r0.zw = r0.yy == float2(1.000000e+000,2.000000e+000);
  r0.y = r0.y;
  o1.w = 3.333333433e-001 * r0.y;
  r0.y = r0.z ? r2.y : r1.y;
  r1.z = r0.z ? r2.w : r2.y;
  r1.w = r0.w ? r2.w : 0;
  r0.y = r0.w ? 0.000000000e+000 : r0.y;
  r0.z = 0.000000000e+000 < r0.y;
  r0.y = r0.y < 0.000000000e+000;
  r0.y = ((int)r0.y ? -1 : 0) + ((int)r0.z ? 1 : 0);
  r0.y = r0.y;
  r0.yzw = r1.xzw * r0.yyy;
  o1.xyz = r0.yzw * float3(7.071068e-001,7.071068e-001,7.071068e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  o2.w = r0.x;
  o3.w = r0.x;
  o2.xz = float2(7.843138e-003,1.000000e+000);
  o3.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer CViewportShaderParameterProvider
// {
//
//   float4 _AmbientColorMultiplier;    // Offset:    0 Size:    16 [unused]
//   float4 _AmbientOcclusionRanges_SunOcclusionFactor;// Offset:   16 Size:    16 [unused]
//   float4 _BloomAdaptationFactor;     // Offset:   32 Size:    16 [unused]
//   float4 _CameraDirection_FOVDeg;    // Offset:   48 Size:    16 [unused]
//   float4 _CameraDistances;           // Offset:   64 Size:    16 [unused]
//   float4 _CameraNearPlaneSize;       // Offset:   80 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS;// Offset:   96 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS_Previous;// Offset:  112 Size:    16 [unused]
//   float4 _CameraPosition_DistanceScale;// Offset:  128 Size:    16 [unused]
//   float4 _CameraPosition_DistanceScale_Previous;// Offset:  144 Size:    16 [unused]
//   float4x4 _CullingViewProjectionMatrix;// Offset:  160 Size:    64 [unused]
//   float4 _DepthScale;                // Offset:  224 Size:    16
//   float4 _DepthTextureRcpSize;       // Offset:  240 Size:    16 [unused]
//   float4 _DepthTextureScaleOffset;   // Offset:  256 Size:    16 [unused]
//   float4 _FogParams;                 // Offset:  272 Size:    16 [unused]
//   float4 _FogSHB;                    // Offset:  288 Size:    16 [unused]
//   float4 _FogSHG;                    // Offset:  304 Size:    16 [unused]
//   float4 _FogSHR;                    // Offset:  320 Size:    16 [unused]
//   float4 _HeightFogParams;           // Offset:  336 Size:    16 [unused]
//   float4x4 _InvProjectionMatrix;     // Offset:  352 Size:    64 [unused]
//   float4x4 _InvViewMatrix;           // Offset:  416 Size:    64 [unused]
//   float4x4 _ProjectionMatrix;        // Offset:  480 Size:    64 [unused]
//   float4 _TempSunDirection;          // Offset:  544 Size:    16 [unused]
//   float4x4 _ViewMatrix;              // Offset:  560 Size:    64 [unused]
//   float4 _ViewPoint_ShadowProjDepthMin;// Offset:  624 Size:    16 [unused]
//   float4x4 _ViewProjectionMatrix;    // Offset:  640 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix; // Offset:  704 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix_Previous;// Offset:  768 Size:    64 [unused]
//   float4 _ViewportSize;              // Offset:  832 Size:    16
//   float2 _MotionVectorOffsets;       // Offset:  848 Size:     8 [unused]
//   float3 _CameraRight;               // Offset:  864 Size:    12 [unused]
//   float3 _CameraUp;                  // Offset:  880 Size:    12 [unused]
//   float3 _EnvironmentMapColorOffset; // Offset:  896 Size:    12 [unused]
//   float3 _EnvironmentMapColorScale;  // Offset:  912 Size:    12 [unused]
//
// }
//
// cbuffer CGlobalShaderParameterProvider
// {
//
//   float4 _BurnColor;                 // Offset:    0 Size:    16 [unused]
//   float4 _BurnParams;                // Offset:   16 Size:    16 [unused]
//   float4 _BurnParams2;               // Offset:   32 Size:    16 [unused]
//   float4 _BurnParams3;               // Offset:   48 Size:    16 [unused]
//   float4 _CascadedShadowScaleOffsetTile0;// Offset:   64 Size:    16 [unused]
//   float4 _CascadedShadowScaleOffsetTile1;// Offset:   80 Size:    16 [unused]
//   float4 _GlobalScalars;             // Offset:   96 Size:    16
//   float4 _SSS_MiscParams;            // Offset:  112 Size:    16 [unused]
//   float4 _WindSimParamsX;            // Offset:  128 Size:    16 [unused]
//   float4 _WindSimParamsY;            // Offset:  144 Size:    16 [unused]
//   float2 _RangeDepthCompression;     // Offset:  160 Size:     8 [unused]
//   float3 _SSS_Color;                 // Offset:  176 Size:    12 [unused]
//   int _BRDFHighQuality;              // Offset:  188 Size:     4 [unused]
//
// }
//
// cbuffer Stream
// {
//
//   bool _DisableLayerOffset;          // Offset:    0 Size:     4 [unused]
//   bool _DisableAlphaMask;            // Offset:    4 Size:     4 [unused]
//   float _DiffuseBlending;            // Offset:    8 Size:     4
//   float4 _PatternColor1;             // Offset:   16 Size:    16
//   float4 _PatternColor2;             // Offset:   32 Size:    16
//   float4 _DiffuseTiling;             // Offset:   48 Size:    16
//   float4 _DiffuseSpeeds;             // Offset:   64 Size:    16
//   float4 _SpecularAndAlphaTiling;    // Offset:   80 Size:    16
//   float4 _Settings;                  // Offset:   96 Size:    16
//   float4 _NormalTilings;             // Offset:  112 Size:    16
//   float4 _NormalSpeeds;              // Offset:  128 Size:    16
//   float2 _NormalIntensities;         // Offset:  144 Size:     8
//   bool _BlendNormalInShader;         // Offset:  152 Size:     4 [unused]
//   float4 _MaterialPickingID;         // Offset:  160 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// DepthVPSampler__SampObj__         sampler      NA          NA    0        1
// DiffuseTexture1__SampObj__        sampler      NA          NA    1        1
// DiffuseTexture2__SampObj__        sampler      NA          NA    2        1
// SpecularTexture1__SampObj__       sampler      NA          NA    3        1
// NormalTexture1__SampObj__         sampler      NA          NA    4        1
// ResolvedNormalGBuffer__SampObj__    sampler      NA          NA    5        1
// DepthVPSampler__TexObj__          texture  float4          2d    0        1
// DiffuseTexture1__TexObj__         texture  float4          2d    1        1
// DiffuseTexture2__TexObj__         texture  float4          2d    2        1
// SpecularTexture1__TexObj__        texture  float4          2d    3        1
// NormalTexture1__TexObj__          texture  float4          2d    4        1
// ResolvedNormalGBuffer__TexObj__    texture  float4          2d    5        1
// CViewportShaderParameterProvider    cbuffer      NA          NA    0        1
// CGlobalShaderParameterProvider    cbuffer      NA          NA    1        1
// Stream                            cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float      w
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float       
// TEXCOORD                 5   xyz         6     NONE   float       
// TEXCOORD                 6   xyz         7     NONE   float   xyz 
// TEXCOORD                 7   xy          8     NONE   float   xy  
// SV_IsFrontFace           0   x           9    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[53], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_constantbuffer cb2[10], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps_siv linear noperspective centroid v0.xy, position
dcl_input_ps linear centroid v1.w
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v7.xyz
dcl_input_ps linear v8.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 6
div r0.xy, v7.xyxx, v7.zzzz
sample_l r0.xyzw, r0.xyxx, t0.xyzw, s0, l(0.000000)
mad r0.x, cb0[14].y, r0.x, cb0[14].x
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r0.x, r0.x, -v2.w
mul_sat r0.x, r0.x, l(200000.000000)
mul r0.yz, v8.xxyx, cb2[5].zzwz
sample r1.xyzw, r0.yzyy, t1.xyzw, s1
mul r0.y, r1.z, v1.w
mad r0.z, r0.y, r0.x, l(-0.003922)
mul r0.x, r0.x, r0.y
lt r0.y, r0.z, l(0.000000)
discard_nz r0.y
mad r1.xyzw, cb1[6].yyyy, cb2[4].xyzw, v8.xyxy
mul r1.xyzw, r1.xyzw, cb2[3].xyzw
sample r2.xyzw, r1.zwzz, t1.xyzw, s1
sample r3.xyzw, r1.xyxx, t1.xyzw, s1
sample r1.xyzw, r1.xyxx, t2.xyzw, s2
mul_sat r0.y, r1.x, cb2[0].z
mul r1.xyz, r3.xxxx, cb2[1].xyzx
mad r2.xyz, r2.yyyy, cb2[2].xyzx, -r1.xyzx
mad r1.xyz, r0.yyyy, r2.xyzx, r1.xyzx
mul_sat r0.y, r0.y, cb2[6].y
dp3 r2.x, l(0.250000, 0.500000, 0.250000, 0.000000), r1.xyzx
dp2 r2.y, l(0.500000, -0.500000, 0.000000, 0.000000), r1.xzxx
dp3 r2.z, l(-0.250000, 0.500000, -0.250000, 0.000000), r1.xyzx
add r1.xyz, r2.xyzx, l(0.000000, 0.498039, 0.498039, 0.000000)
ftoi r0.zw, v0.xxxy
and r0.zw, r0.zzzw, l(0, 0, 1, 1)
ieq r0.z, r0.z, r0.w
movc o0.y, r0.z, r1.y, r1.z
sqrt o0.x, r1.x
mov o0.w, r0.x
mad r1.xyzw, cb1[6].yyyy, cb2[8].xyzw, v8.xyxy
mul r1.xyzw, r1.xyzw, cb2[7].xyzw
sample r2.xyzw, r1.zwzz, t4.yzwx, s4
sample r1.xyzw, r1.xyxx, t4.yzwx, s4
mad r0.zw, r2.zzzx, l(0.000000, 0.000000, 2.007874, 2.007874), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r2.xy, r0.zwzz, cb2[9].yyyy
dp2 r0.z, r2.xyxx, r2.xyxx
min r0.z, r0.z, l(1.000000)
mad r0.z, -r0.z, l(0.999000), l(1.000000)
sqrt r2.z, r0.z
mad r0.zw, r1.zzzx, l(0.000000, 0.000000, 2.007874, 2.007874), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r1.xy, r0.zwzz, cb2[9].xxxx
dp2 r0.z, r1.xyxx, r1.xyxx
min r0.z, r0.z, l(1.000000)
mad r0.z, -r0.z, l(0.999000), l(1.000000)
sqrt r1.z, r0.z
add r2.xyzw, -r1.xyzw, r2.xyzw
mad r1.xyzw, r0.yyyy, r2.xyzw, r1.xyzw
mul r0.y, r1.w, cb2[6].x
mad r0.zw, cb1[6].yyyy, cb2[6].zzzw, v8.xxxy
mul r0.zw, r0.zzzw, cb2[5].xxxy
sample r2.xyzw, r0.zwzz, t3.xyzw, s3
mul o0.z, r0.y, r2.y
mov o2.y, r2.x
mul r0.yzw, r1.yyyy, v3.yyxz
mad r0.yzw, r1.xxxx, v4.yyxz, r0.yyzw
mad r0.yzw, r1.zzzz, v2.yyxz, r0.yyzw
dp3 r1.x, r0.yzwy, r0.yzwy
rsq r1.x, r1.x
mul r1.yz, v0.xxyx, cb0[52].zzwz
sample r2.xyzw, r1.yzyy, t5.xyzw, s5
mul r1.y, r2.w, l(3.000000)
mad r2.xyz, r2.xyzx, l(1.414214, 1.414214, 1.414214, 0.000000), l(-0.707107, -0.707107, -0.707107, 0.000000)
ftou r1.y, r1.y
dp3 r1.z, r2.xyzx, r2.xyzx
min r1.z, r1.z, l(1.000000)
add r1.z, -r1.z, l(1.000000)
sqrt r1.z, r1.z
movc r1.w, r1.y, r1.z, r2.x
ieq r3.xy, r1.yyyy, l(1, 2, 0, 0)
movc r4.z, r1.y, r2.x, r1.z
movc r5.xy, r3.xyxx, r1.zzzz, r2.yzyy
movc r1.y, r3.x, r2.y, r1.w
movc r5.z, r3.y, r2.z, r1.y
mov r4.xy, l(2.000000,2.000000,0,0)
mul r1.yzw, r4.zzzz, r4.xxyz
mov r5.w, l(-2.000000)
mad r1.yzw, r1.yyzw, r5.zzyw, l(0.000000, 0.000000, 0.000000, 1.000000)
mov r2.yz, r5.zzxz
mul r3.xyz, r5.xxxx, r5.ywwy
mov r2.x, l(2.000000)
mad r1.yzw, r3.xxyz, r2.xxyz, r1.yyzw
mad r0.yzw, r0.yyzw, r1.xxxx, -r1.yyzw
mad r0.yzw, r0.xxxx, r0.yyzw, r1.yyzw
mad r1.xyz, r0.yzwy, l(1.000000, -1.000000, 1.000000, 0.000000), l(0.000000, 0.000000, 1.000000, 0.000000)
dp3 r1.x, r1.xyzx, r1.xyzx
rsq r1.x, r1.x
mul r2.x, r0.y, r1.x
mul r2.y, -r0.z, r1.x
add r0.y, r0.w, l(1.000000)
mul r2.w, r1.x, r0.y
ge r0.y, |r2.y|, |r2.x|
lt r0.zw, r2.yyyx, l(0.000000, 0.000000, 0.000000, 0.000000)
movc r0.z, r0.z, l(3.000000), l(2.000000)
and r0.w, r0.w, l(0x3f800000)
movc r0.y, r0.y, r0.z, r0.w
mul r0.y, r0.y, l(0.500000)
ftou r0.y, r0.y
ge r0.zw, l(0.000000, 0.000000, -0.000000, -0.000000), |r2.xxxy|
and r0.z, r0.w, r0.z
movc r0.y, r0.z, l(2), r0.y
max r0.z, |r2.y|, |r2.x|
lt r0.z, r0.z, |r2.w|
movc r0.y, r0.z, l(3), r0.y
movc r1.xy, r0.yyyy, r2.xwxx, r2.wxww
ieq r0.zw, r0.yyyy, l(0, 0, 1, 2)
utof r0.y, r0.y
mul o1.w, r0.y, l(0.333333)
movc r0.y, r0.z, r2.y, r1.y
movc r1.z, r0.z, r2.w, r2.y
and r1.w, r2.w, r0.w
movc r0.y, r0.w, l(0), r0.y
lt r0.z, l(0.000000), r0.y
lt r0.y, r0.y, l(0.000000)
iadd r0.y, r0.y, -r0.z
itof r0.y, r0.y
mul r0.yzw, r0.yyyy, r1.xxzw
mad o1.xyz, r0.yzwy, l(0.707107, 0.707107, 0.707107, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o2.w, r0.x
mov o3.w, r0.x
mov o2.xz, l(0.007843,0,1.000000,0)
mov o3.xyz, l(0,0,0,0)
ret 
// Approximately 126 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
         