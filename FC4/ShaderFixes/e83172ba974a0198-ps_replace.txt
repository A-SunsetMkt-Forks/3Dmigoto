// Direct sun shafts (pass 3/4)

cbuffer CPostFxAtmosphericScatteringParameterProvider : register(b0)
{
  float4 _CombinedParamsColorNextGen : packoffset(c0);
  float4 _CombinedParamsScaleNextGen : packoffset(c1);
  float4 _QuadParams : packoffset(c2);
  float4 _SunPosition_Attenuation_Zoom : packoffset(c3);
  float3 _ColorTint : packoffset(c4);
}
SamplerState SrcSampler__SampObj___s : register(s0);
Texture2D<float4> SrcSampler__TexObj__ : register(t0);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  uint v2 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);

  r0.xyzw = SrcSampler__TexObj__.SampleLevel(SrcSampler__SampObj___s, v1.xy, 0.000000000e+000).xyzw;

//o0.x = r0 * 100; // testing propagation

// Fix god ray propagation:
float2 adj = v1.xy;
adj.x -= stereo.x / 2;
r1.xy = adj.xy * _CombinedParamsScaleNextGen.xy + _CombinedParamsScaleNextGen.zw;

  r1.zw = v1.xy + r1.xy;
  r2.xyzw = SrcSampler__TexObj__.SampleLevel(SrcSampler__SampObj___s, r1.zw, 0.000000000e+000).xyzw;
  r1.zw = r1.zw + r1.xy;
  r0.xyz = r2.xyz + r0.xyz;
  r2.xyzw = SrcSampler__TexObj__.SampleLevel(SrcSampler__SampObj___s, r1.zw, 0.000000000e+000).xyzw;
  r1.zw = r1.zw + r1.xy;
  r0.xyz = r2.xyz + r0.xyz;
  r2.xyzw = SrcSampler__TexObj__.SampleLevel(SrcSampler__SampObj___s, r1.zw, 0.000000000e+000).xyzw;
  r1.zw = r1.zw + r1.xy;
  r0.xyz = r2.xyz + r0.xyz;
  r2.xyzw = SrcSampler__TexObj__.SampleLevel(SrcSampler__SampObj___s, r1.zw, 0.000000000e+000).xyzw;
  r1.zw = r1.zw + r1.xy;
  r0.xyz = r2.xyz + r0.xyz;
  r2.xyzw = SrcSampler__TexObj__.SampleLevel(SrcSampler__SampObj___s, r1.zw, 0.000000000e+000).xyzw;
//o0.y = r2 * 100; // testing propagation
  r1.zw = r1.zw + r1.xy;
  r0.xyz = r2.xyz + r0.xyz;
  r2.xyzw = SrcSampler__TexObj__.SampleLevel(SrcSampler__SampObj___s, r1.zw, 0.000000000e+000).xyzw;
  r1.zw = r1.zw + r1.xy;
  r0.xyz = r2.xyz + r0.xyz;
  r2.xyzw = SrcSampler__TexObj__.SampleLevel(SrcSampler__SampObj___s, r1.zw, 0.000000000e+000).xyzw;
  r1.zw = r1.zw + r1.xy;
  r0.xyz = r2.xyz + r0.xyz;
  r2.xyzw = SrcSampler__TexObj__.SampleLevel(SrcSampler__SampObj___s, r1.zw, 0.000000000e+000).xyzw;
//o0.z = r2.x * 100; // testing propagation
  r1.zw = r1.zw + r1.xy;
  r0.xyz = r2.xyz + r0.xyz;
  r2.xyzw = SrcSampler__TexObj__.SampleLevel(SrcSampler__SampObj___s, r1.zw, 0.000000000e+000).xyzw;
  r1.zw = r1.zw + r1.xy;
  r0.xyz = r2.xyz + r0.xyz;
  r2.xyzw = SrcSampler__TexObj__.SampleLevel(SrcSampler__SampObj___s, r1.zw, 0.000000000e+000).xyzw;
  r1.zw = r1.zw + r1.xy;
  r0.xyz = r2.xyz + r0.xyz;
  r2.xyzw = SrcSampler__TexObj__.SampleLevel(SrcSampler__SampObj___s, r1.zw, 0.000000000e+000).xyzw;
  r1.zw = r1.zw + r1.xy;
  r1.xy = r1.zw + r1.xy;
  r3.xyzw = SrcSampler__TexObj__.SampleLevel(SrcSampler__SampObj___s, r1.zw, 0.000000000e+000).xyzw;
  r1.xyzw = SrcSampler__TexObj__.SampleLevel(SrcSampler__SampObj___s, r1.xy, 0.000000000e+000).xyzw;
  r0.xyz = r2.xyz + r0.xyz;
  r0.xyz = r0.xyz + r3.xyz;
  r0.xyz = r0.xyz + r1.xyz;
  o0.xyz = _CombinedParamsColorNextGen.xyz * r0.xyz;
  o0.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer CPostFxAtmosphericScatteringParameterProvider
// {
//
//   float4 _CombinedParamsColorNextGen;// Offset:    0 Size:    16
//   float4 _CombinedParamsScaleNextGen;// Offset:   16 Size:    16
//   float4 _QuadParams;                // Offset:   32 Size:    16 [unused]
//   float4 _SunPosition_Attenuation_Zoom;// Offset:   48 Size:    16 [unused]
//   float3 _ColorTint;                 // Offset:   64 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SrcSampler__SampObj__             sampler      NA          NA    0        1
// SrcSampler__TexObj__              texture  float4          2d    0        1
// CPostFxAtmosphericScatteringParameterProvider    cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_IsFrontFace           0   x           2    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
sample_l r0.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)
mad r1.xy, v1.xyxx, cb0[1].xyxx, cb0[1].zwzz
add r1.zw, r1.xxxy, v1.xxxy
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r1.xy, r1.xyxx, r1.zwzz
sample_l r3.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
sample_l r1.xyzw, r1.xyxx, t0.xyzw, s0, l(0.000000)
add r0.xyz, r0.xyzx, r2.xyzx
add r0.xyz, r3.xyzx, r0.xyzx
add r0.xyz, r1.xyzx, r0.xyzx
mul o0.xyz, r0.xyzx, cb0[0].xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 44 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer CPostFxAtmosphericScatteringParameterProvider
// {
//
//   float4 _CombinedParamsColorNextGen;// Offset:    0 Size:    16
//   float4 _CombinedParamsScaleNextGen;// Offset:   16 Size:    16
//   float4 _QuadParams;                // Offset:   32 Size:    16 [unused]
//   float4 _SunPosition_Attenuation_Zoom;// Offset:   48 Size:    16 [unused]
//   float3 _ColorTint;                 // Offset:   64 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SrcSampler__SampObj___s           sampler      NA          NA    0        1
// SrcSampler__TexObj__              texture  float4          2d    0        1
// CPostFxAtmosphericScatteringParameterProvider    cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_IsFrontFace           0   x           2    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
sample_l r0.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)
mad r1.xy, v1.xyxx, cb0[1].xyxx, cb0[1].zwzz
add r1.zw, r1.xxxy, v1.xxxy
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r0.xyz, r0.xyzx, r2.xyzx
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
add r1.zw, r1.xxxy, r1.zzzw
add r1.xy, r1.xyxx, r1.zwzz
sample_l r3.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
sample_l r1.xyzw, r1.xyxx, t0.xyzw, s0, l(0.000000)
add r0.xyz, r0.xyzx, r2.xyzx
add r0.xyz, r3.xyzx, r0.xyzx
add r0.xyz, r1.xyzx, r0.xyzx
mul o0.xyz, r0.xyzx, cb0[0].xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 44 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
