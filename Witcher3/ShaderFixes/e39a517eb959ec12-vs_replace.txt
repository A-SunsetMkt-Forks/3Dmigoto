//HUD - floating blue text for NPC names
cbuffer Constants : register(b0)
{
  float4 cxadd : packoffset(c0);
  float4 cxmul : packoffset(c1);
  float4 mvp[2] : packoffset(c2);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

// FIXME: Implement include handler in 3DMigoto to make paths consistent:
#include <x64\ShaderFixes\hud.hlsl>

// Structure of the vertex buffer determined from frame analysis:
struct vb_entry
{
  float color;
  float2 texcoord;
  float2 pos;
};

StructuredBuffer<struct vb_entry> vb_struct : register(t100);
Buffer<uint> ib : register(t101);

// Copy of the vertex shader to calculate the output position:
float4 calc_pos(float2 pos)
{
  float4 v2 = float4(pos, 0, 1);
  float4 o2;

  o2.x = dot(v2.xyzw, mvp[0].xyzw);
  o2.y = dot(v2.xyzw, mvp[1].xyzw);
  o2.zw = float2(0.000000e+000,1.000000e+000);
  return o2;
}

float2 find_center()
{
  int index_count = int(IniParams.Load(int2(3,0)).y);

  // Note: have not checked that these are diagonally oposite:
  uint id1 = ib[0];
  uint id2 = ib[index_count - 1];

  float2 pos1 = vb_struct[id1].pos;
  float2 pos2 = vb_struct[id2].pos;

  return calc_pos((pos1 + pos2) / 2);
}

void main(
  float4 v0 : COLOR0,
  float2 v1 : TEXCOORD0,
  float4 v2 : SV_Position0,
  out float2 o0 : TEXCOORD0,
  out float4 o1 : COLOR0,
  out float4 o2 : SV_Position0,
  uint id : SV_VertexID)
{
  o0.xy = v1.xy;
  o1.xyzw = v0.xyzw * cxmul.xyzw + cxadd.xyzw;
  o2.x = dot(v2.xyzw, mvp[0].xyzw);
  o2.y = dot(v2.xyzw, mvp[1].xyzw);
  o2.zw = float2(0.000000e+000,1.000000e+000);

if (!rt_is_screen())
	return;

float4 stereo = StereoParams.Load(0);
float4 params = IniParams.Load(0);
if (params.z == 1)
	o2.x += adjust_from_stereo2mono_depth_buffer(dot(float4(0,0,0,1), mvp[0].xyzw), dot(float4(0,0,0,1), mvp[1].xyzw));
else if (params.z == 2)
	o2.x += adjust_from_stereo2mono_depth_buffer(o2.x, o2.y);
else if (params.z == 3) {
	float2 center = find_center();
	if (in_floating_region(center)) {
		float adj = adjust_from_stereo2mono_depth_buffer(center.x, center.y);
		for (float offset = 0.1; offset <= 0.5; offset += 0.1)
			adj = min_adj(adj, adjust_from_stereo2mono_depth_buffer(center.x, center.y - offset));
		o2.x += adj;
	} else
		o2.x -= stereo.x*(params.x);
} else
	o2.x -= stereo.x*(params.x);
  return;
}
