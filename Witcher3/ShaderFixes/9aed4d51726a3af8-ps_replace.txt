Texture2D<float4> t7 : register(t7);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb12 : register(b12)
{
  float4 cb12[214];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : COLOR0,
  float2 v2 : TEXCOORD0,
  float3 v3 : TEXCOORD1,
  float3 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float4 v6 : EXTRA_DATA0,
  float4 v7 : EXTRA_DATA1,
  float4 v8 : EXTRA_DATA2,
  float4 v9 : EXTRA_DATA3,
  float4 v10 : MORE_DATA0,
  float4 v11 : MORE_DATA1,
  float4 v12 : MORE_DATA2,
  float4 v13 : MORE_DATA3,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = (uint2)v0.xy;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  r0.z = t7.Load(r0.xyz).x;
  r0.xy = r0.xy;
  r1.xyz = cb12[211].xyw * r0.yyy;
  r0.xyw = cb12[210].xyw * r0.xxx + r1.xyz;
  r0.xyz = cb12[212].xyw * r0.zzz + r0.xyw;
  r0.xyz = cb12[213].xyw + r0.xyz;
  r0.xy = r0.xy / r0.zz;
  r0.xy = -v5.xy + r0.xy;
  r0.x = dot(r0.xy, r0.xy);
  r0.x = sqrt(r0.x);
  r0.x = v5.w < r0.x;
  if (r0.x != 0) discard;
  r0.xyzw = t0.Sample(s0_s, v2.xy, int2(0, 0)).xyzw;
  r0.w = v1.w * r0.w;
  r1.xyz = t1.Sample(s1_s, v2.xy, int2(0, 0)).xyz;
  r1.xyz = r1.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r1.w = 1.000000000e+000;
  r2.x = dot(r1.xyzw, v6.xyzw);
  r2.y = dot(r1.xyzw, v7.xyzw);
  r2.z = dot(r1.xyzw, v8.xyzw);
  r1.xyzw = t2.Sample(s2_s, v2.xy, int2(0, 0)).xyzw;
  r3.xyz = t3.Sample(s3_s, v2.xy, int2(0, 0)).xyz;
  r3.xyz = r3.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r3.w = 1.000000000e+000;
  r4.x = dot(r3.xyzw, v6.xyzw);
  r4.y = dot(r3.xyzw, v7.xyzw);
  r4.z = dot(r3.xyzw, v8.xyzw);
  r2.w = t4.Sample(s4_s, v3.xy, int2(0, 0)).x;
  r2.w = saturate(v3.z + r2.w);
  r1.w = r1.w * v1.w + -r0.w;
  r0.w = r2.w * r1.w + r0.w;
  r1.xyz = r1.xyz + -r0.xyz;
  r0.xyz = r2.www * r1.xyz + r0.xyz;
  o0.xyz = v1.xyz * r0.xyz;
  r0.xyz = r4.xyz + -r2.xyz;
  r0.xyz = r2.www * r0.xyz + r2.xyz;
  r0.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + r0.xyz;
  o1.xyz = float3(5.000000e-001,5.000000e-001,5.000000e-001) * r0.xyz;
  o0.w = r0.w;
  o1.w = r0.w;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// TEXCOORD                 2   xyz         4     NONE   float       
// TEXCOORD                 3   xyzw        5     NONE   float   xy w
// EXTRA_DATA               0   xyzw        6     NONE   float   xyzw
// EXTRA_DATA               1   xyzw        7     NONE   float   xyzw
// EXTRA_DATA               2   xyzw        8     NONE   float   xyzw
// EXTRA_DATA               3   xyzw        9     NONE   float       
// MORE_DATA                0   xyzw       10     NONE   float       
// MORE_DATA                1   xyzw       11     NONE   float       
// MORE_DATA                2   xyzw       12     NONE   float       
// MORE_DATA                3   xyzw       13     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t7
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_input_ps linear v5.xyw
dcl_input_ps linear v6.xyzw
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 5
ftou r0.xy, v0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r0.xyzw, t7.yzxw
utof r0.xy, r0.xyxx
mul r1.xyz, r0.yyyy, cb12[211].xywx
mad r0.xyw, cb12[210].xyxw, r0.xxxx, r1.xyxz
mad r0.xyz, cb12[212].xywx, r0.zzzz, r0.xywx
add r0.xyz, r0.xyzx, cb12[213].xywx
div r0.xy, r0.xyxx, r0.zzzz
add r0.xy, r0.xyxx, -v5.xyxx
dp2 r0.x, r0.xyxx, r0.xyxx
sqrt r0.x, r0.x
lt r0.x, v5.w, r0.x
discard_nz r0.x
sample_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
mul r0.w, r0.w, v1.w
sample_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r1.xyz, v2.xyxx, t1.xyzw, s1
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mov r1.w, l(1.000000)
dp4 r2.x, r1.xyzw, v6.xyzw
dp4 r2.y, r1.xyzw, v7.xyzw
dp4 r2.z, r1.xyzw, v8.xyzw
sample_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t2.xyzw, s2
sample_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r3.xyz, v2.xyxx, t3.xyzw, s3
mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mov r3.w, l(1.000000)
dp4 r4.x, r3.xyzw, v6.xyzw
dp4 r4.y, r3.xyzw, v7.xyzw
dp4 r4.z, r3.xyzw, v8.xyzw
sample_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r2.w, v3.xyxx, t4.yzwx, s4
add_sat r2.w, r2.w, v3.z
mad r1.w, r1.w, v1.w, -r0.w
mad r0.w, r2.w, r1.w, r0.w
add r1.xyz, -r0.xyzx, r1.xyzx
mad r0.xyz, r2.wwww, r1.xyzx, r0.xyzx
mul o0.xyz, r0.xyzx, v1.xyzx
add r0.xyz, -r2.xyzx, r4.xyzx
mad r0.xyz, r2.wwww, r0.xyzx, r2.xyzx
add r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, r0.w
mov o1.w, r0.w
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer cb12
// {
//
//   float4 cb12[214];                  // Offset:    0 Size:  3424
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// s0_s                              sampler      NA          NA    0        1
// s1_s                              sampler      NA          NA    1        1
// s2_s                              sampler      NA          NA    2        1
// s3_s                              sampler      NA          NA    3        1
// s4_s                              sampler      NA          NA    4        1
// t0                                texture  float4          2d    0        1
// t1                                texture  float4          2d    1        1
// t2                                texture  float4          2d    2        1
// t3                                texture  float4          2d    3        1
// t4                                texture  float4          2d    4        1
// t7                                texture  float4          2d    7        1
// cb12                              cbuffer      NA          NA   12        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// TEXCOORD                 2   xyz         4     NONE   float       
// TEXCOORD                 3   xyzw        5     NONE   float   xy w
// EXTRA_DATA               0   xyzw        6     NONE   float   xyzw
// EXTRA_DATA               1   xyzw        7     NONE   float   xyzw
// EXTRA_DATA               2   xyzw        8     NONE   float   xyzw
// EXTRA_DATA               3   xyzw        9     NONE   float       
// MORE_DATA                0   xyzw       10     NONE   float       
// MORE_DATA                1   xyzw       11     NONE   float       
// MORE_DATA                2   xyzw       12     NONE   float       
// MORE_DATA                3   xyzw       13     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t7
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_input_ps linear v5.xyw
dcl_input_ps linear v6.xyzw
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 5
ftou r0.xy, v0.xyxx
utof r0.xy, r0.xyxx
ftoi r1.xy, r0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyzw, t7.yzxw
mul r1.xyz, r0.yyyy, cb12[211].xywx
mad r0.xyw, cb12[210].xyxw, r0.xxxx, r1.xyxz
mad r0.xyz, cb12[212].xywx, r0.zzzz, r0.xywx
add r0.xyz, r0.xyzx, cb12[213].xywx
div r0.xy, r0.xyxx, r0.zzzz
add r0.xy, r0.xyxx, -v5.xyxx
dp2 r0.x, r0.xyxx, r0.xyxx
sqrt r0.x, r0.x
lt r0.x, v5.w, r0.x
discard_nz r0.x
sample_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0
mul r0.w, r0.w, v1.w
sample_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r1.xyz, v2.xyxx, t1.xyzw, s1
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mov r1.w, l(1.000000)
dp4 r2.x, r1.xyzw, v6.xyzw
dp4 r2.y, r1.xyzw, v7.xyzw
dp4 r2.z, r1.xyzw, v8.xyzw
sample_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r1.xyzw, v2.xyxx, t2.xyzw, s2
sample_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r3.xyz, v2.xyxx, t3.xyzw, s3
mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mov r3.w, l(1.000000)
dp4 r4.x, r3.xyzw, v6.xyzw
dp4 r4.y, r3.xyzw, v7.xyzw
dp4 r4.z, r3.xyzw, v8.xyzw
sample_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r2.w, v3.xyxx, t4.yzwx, s4
add_sat r2.w, r2.w, v3.z
mad r1.w, r1.w, v1.w, -r0.w
mad r0.w, r2.w, r1.w, r0.w
add r1.xyz, -r0.xyzx, r1.xyzx
mad r0.xyz, r2.wwww, r1.xyzx, r0.xyzx
mul o0.xyz, r0.xyzx, v1.xyzx
add r0.xyz, -r2.xyzx, r4.xyzx
mad r0.xyz, r2.wwww, r0.xyzx, r2.xyzx
add r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, r0.w
mov o1.w, r0.w
ret 
// Approximately 44 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
