//HUD - text
cbuffer Constants : register(b0)
{
  float4 vfuniforms[96] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

// FIXME: Implement include handler in 3DMigoto to make paths consistent:
#include <x64\ShaderFixes\hud.hlsl>

// Structure of the vertex buffer determined from frame analysis:
struct vb_entry
{
  float color;
  float2 texcoord;
  float2 pos;
  uint v3;
};

StructuredBuffer<struct vb_entry> vb_struct : register(t100);
Buffer<uint> ib : register(t101);

// Copy of the vertex shader to calculate the output position:
float4 calc_pos(float2 pos, uint v3)
{
  float4 v2 = float4(pos, 0, 1);
  float4 o2;

  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = (uint)v3.x << 2;
  r0.x = r0.x;
  r0.x = 1.000000015e-001 + r0.x;
  bitmask.y = ((~(-1 << 30)) << 2) & 0xffffffff;
  r0.y = (((uint)v3.x << 2) & bitmask.y) | ((uint)2 & ~bitmask.y);
  bitmask.z = ((~(-1 << 30)) << 2) & 0xffffffff;
  r0.z = (((uint)v3.x << 2) & bitmask.z) | ((uint)2 & ~bitmask.z);
  bitmask.w = ((~(-1 << 30)) << 2) & 0xffffffff;
  r0.w = (((uint)v3.x << 2) & bitmask.w) | ((uint)1 & ~bitmask.w);
  r0.yzw = r0.yzw;
  r0.yzw = float3(1.000000e-001,1.100000e+000,1.000000e-001) + r0.yzw;
  r0.xyzw = (uint4)r0.xyzw;
  o2.x = dot(v2.xyzw, vfuniforms[r0.y].xyzw);
  o2.y = dot(v2.xyzw, vfuniforms[r0.z].xyzw);
  o2.zw = float2(0.000000e+000,1.000000e+000);
  return o2;
}

float2 find_center(uint id)
{
  int index_count = int(IniParams.Load(int2(3,0)).y);

  // Note: have not checked that these are diagonally oposite:
  uint id1 = ib[0];
  uint id2 = ib[index_count - 1];

  float2 pos1 = vb_struct[id1].pos;
  float2 pos2 = vb_struct[id2].pos;

  uint v31 = vb_struct[id1].v3;
  uint v32 = vb_struct[id2].v3;

  float2 p1 = calc_pos(pos1, v31);
  float2 p2 = calc_pos(pos2, v32);
  return (p1 + p2) / 2;
}

void main(
  float4 v0 : COLOR0,
  float2 v1 : TEXCOORD0,
  float4 v2 : SV_Position0,
  uint v3 : COLOR2,
  out float2 o0 : TEXCOORD0,
  out float4 o1 : COLOR0,
  out float4 o2 : SV_Position0,
  uint id : SV_VertexID)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  o0.xy = v1.xy;
  r0.x = (uint)v3.x << 2;
  r0.x = r0.x;
  r0.x = 1.000000015e-001 + r0.x;
  bitmask.y = ((~(-1 << 30)) << 2) & 0xffffffff;
  r0.y = (((uint)v3.x << 2) & bitmask.y) | ((uint)2 & ~bitmask.y);
  bitmask.z = ((~(-1 << 30)) << 2) & 0xffffffff;
  r0.z = (((uint)v3.x << 2) & bitmask.z) | ((uint)2 & ~bitmask.z);
  bitmask.w = ((~(-1 << 30)) << 2) & 0xffffffff;
  r0.w = (((uint)v3.x << 2) & bitmask.w) | ((uint)1 & ~bitmask.w);
  r0.yzw = r0.yzw;
  r0.yzw = float3(1.000000e-001,1.100000e+000,1.000000e-001) + r0.yzw;
  r0.xyzw = (uint4)r0.xyzw;
  o1.xyzw = v0.xyzw * vfuniforms[r0.w].xyzw + vfuniforms[r0.x].xyzw;
  o2.x = dot(v2.xyzw, vfuniforms[r0.y].xyzw);
  o2.y = dot(v2.xyzw, vfuniforms[r0.z].xyzw);
  o2.zw = float2(0.000000e+000,1.000000e+000);

if (!rt_is_screen())
	return;

float4 stereo = StereoParams.Load(0);
float4 params = IniParams.Load(0);
if (params.z == 1)
	o2.x += adjust_from_stereo2mono_depth_buffer(dot(float4(0,0,0,1), vfuniforms[r0.y].xyzw), dot(float4(0,0,0,1), vfuniforms[r0.z].xyzw));
else if (params.z == 2)
	o2.x += adjust_from_stereo2mono_depth_buffer(o2.x, o2.y);
else if (params.z == 3) {
	float2 center = find_center(id);
	if (in_floating_region(center)) {
		float adj = adjust_from_stereo2mono_depth_buffer(center.x, center.y);
		for (float offset = 0.1; offset <= 0.5; offset += 0.1)
			adj = min_adj(adj, adjust_from_stereo2mono_depth_buffer(center.x, center.y - offset));
		o2.x += adj;
	} else
		o2.x -= stereo.x*(params.x);
} else
	o2.x -= stereo.x*(params.x);
  return;
}
