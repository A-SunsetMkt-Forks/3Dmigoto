TextureCubeArray<float4> t10 : register(t10);

Texture2DArray<float4> t9 : register(t9);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s10_s : register(s10);

cbuffer cb13 : register(b13)
{
  float4 cb13[2362];
}

cbuffer cb12 : register(b12)
{
  float4 cb12[214];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[1];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
  
//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1.xyzw = cb12[1].xyzw;
a2.xyzw = cb12[2].xyzw;
a3.xyzw = cb12[3].xyzw;
a4.xyzw = cb12[4].xyzw;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse 


  r0.xy = (int2)v0.xy;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  r1.x = t0.Load(r0.xyw).x;
  r1.yz = trunc(v0.xy);
  r2.xyzw = cb12[211].xyzw * r1.zzzz;
  r2.xyzw = cb12[210].xyzw * r1.yyyy + r2.xyzw;
  r1.xyzw = cb12[212].xyzw * r1.xxxx + r2.xyzw;
  r1.xyzw = cb12[213].xyzw + r1.xyzw;
  r1.xyz = r1.xyz / r1.www;
  
float4 r20, r21;
r20.xyz = r1.xyz; 
r20.w = 1.0;

r21.xyzw = cb12[2].xyzw * r20.yyyy;
r21.xyzw = cb12[1].xyzw * r20.xxxx + r21.xyzw;
r21.xyzw = cb12[3].xyzw * r20.zzzz + r21.xyzw;
r21.xyzw = cb12[4].xyzw + r21.xyzw;

r21.xyzw /= r21.wwww;

r21.x -= stereo.x*(r21.z - stereo.y)/cb12[13].x; 

r20.xyzw = b2.xyzw * r21.yyyy;
r20.xyzw = b1.xyzw * r21.xxxx + r20.xyzw;
r20.xyzw = b3.xyzw * r21.zzzz + r20.xyzw;
r20.xyzw = b4.xyzw * r21.wwww + r20.xyzw;
r1.xyz = r20.xyz / r20.www;


  r1.w = (int)cb3[0].x;
  r1.w = (int)r1.w * 9;
  r2.xyz = cb13[r1.w+58].xyz + -r1.xyz;
  r3.x = dot(r2.xyz, r2.xyz);
  r3.y = sqrt(r3.x);
  r3.z = r3.y < cb13[r1.w+58].w;
  if (r3.z != 0) {
    r3.zw = t4.Load(r0.xyw).xz;
    r4.xyzw = t1.Load(r0.xyw).xyzw;
    r5.xyzw = t2.Load(r0.xyw).xyzw;
    r0.xyz = t3.Load(r0.xyz).xyz;
    r0.w = r3.y / cb13[r1.w+58].w;
    r6.x = r0.w * r0.w;
    r6.x = -r6.x * r6.x + 1.000000000e+000;
    r6.x = max(r6.x, 0.000000000e+000);
    r6.x = r6.x * r6.x;
    r6.y = 0.000000000e+000 < cb13[r1.w+63].z;
    r6.z = 0.000000000e+000 < cb13[r1.w+64].x;
    r3.x = r3.x * cb13[r1.w+63].x + 1.000000000e+000;
    r3.x = r6.x / r3.x;
    r6.x = 0.000000000e+000 < r3.x;
    r6.y = r6.x ? r6.y : 0;
    if (r6.y != 0) {
      r7.xyz = -cb13[r1.w+58].xyz + r1.xyz;
      r8.xyz = r2.xyz / r3.yyy;
      r6.y = max(abs(r8.z), abs(r8.y));
      r6.y = r6.y < abs(r8.x);
      if (r6.y != 0) {
        r6.y = 0.000000000e+000 < r8.x;
        r9.x = r6.y ? r7.y : -r7.y;
        r9.y = r7.z;
        r10.x = r6.y ? -r7.x : r7.x;
        r6.y = r6.y ? cb13[r1.w+65].x : cb13[r1.w+65].y;
        r7.xy = r9.xy;
      } else {
        r6.w = max(abs(r8.z), abs(r8.x));
        r6.w = r6.w < abs(r8.y);
        if (r6.w != 0) {
          r6.w = 0.000000000e+000 < r8.y;
          r10.xy = r6.ww ? -r7.yx : r7.yx;
          r10.z = r7.z;
          r6.y = r6.w ? cb13[r1.w+65].z : cb13[r1.w+65].w;
          r7.xy = r10.yz;
        } else {
          r6.w = 0.000000000e+000 < r8.z;
          r7.y = r6.w ? r7.y : -r7.y;
          r10.x = r6.w ? -r7.z : r7.z;
          r6.y = r6.w ? cb13[r1.w+66].x : cb13[r1.w+66].y;
        }
      }
      r7.xy = cb13[r1.w+63].yy * r7.xy;
      r7.xy = r7.xy / r10.xx;
      r7.xy = r7.xy * float2(5.000000e-001,-5.000000e-001) + float2(5.000000e-001,5.000000e-001);
	  
		if (10 == 0) 
		{
			r7.z = 0; 
		}
		else if (10+20 < 32) 
		{   
			r7.z = (int)r6.y << (32-(10 + 20)); 
			r7.z = (uint)r7.z >> (32-10);  
		} 
		else 
		{
			r7.z = (uint)r6.y >> 20;
		}
      
	  
	  
		if (10 == 0) 
		{
			r7.w = 0; 
		}
		else if (10+10 < 32) 
		{       
			r7.w = (int)r6.y << (32-(10 + 10)); 
			r7.w = (uint)r7.w >> (32-10);  
		} 
		else 
		{
			r7.w = (uint)r6.y >> 10;
		}
	  
      r7.zw = r7.zw;
	  	  
      // r6.w = (int)r6.y & 1023;
r6.w = (int)r6.y ? 1023 : 0;      
	  

	  
	  // r6.w = r6.w;
      r6.y = (uint)r6.y >> 30;
      r8.z = r6.y;
      r6.y = 0.000000000e+000 < r6.w;
      if (r6.y != 0) {
        r6.yw = r7.xy * r6.ww + r7.zw;
        r8.xy = float2(9.765625e-004,9.765625e-004) * r6.yw;
        r6.y = t9.SampleLevel(s10_s, r8.xyz, 0.000000000e+000).x;
        r6.y = -r0.w * 9.900000095e-001 + r6.y;
        r6.y = 1.442695007e+002 * r6.y;
        r6.y = exp2(r6.y);
        r6.y = min(r6.y, 1.000000000e+000);
      } else {
        r6.y = 1.000000000e+000;
      }
    } else {
      r6.y = 1.000000000e+000;
    }
    r6.x = r6.x ? r6.z : 0;
    if (r6.x != 0) {
      r2.w = cb13[r1.w+64].y;

//Decompiler crap:	  
// float4 zpos4 = .SampleLevel(s10_s, r2.xyzw, 0.000000000e+000);
// float zTex = zpos4.;
// float zpos = ;
// float wpos = 1.0 / zpos;

      r2.w = t10.SampleLevel(s10_s, r2.xyzw, 0.000000000e+000).x;
	  
      r0.w = -r0.w * 9.9000000e-001 + r2.w;
      r0.w = 1.44269501e+002 * r0.w;
      r0.w = exp2(r0.w);
      r0.w = min(r0.w, 1.000000000e+000);
      r6.y = r6.y * r0.w;
    }
    r0.w = -1.000000000e+000 + r6.y;
    r0.w = cb13[r1.w+60].w * r0.w + 1.000000000e+000;
    r0.w = r3.x * r0.w;
	
//Decompiler error
    // r6.xy = int2(2048,4096) & (int2)cb13[r1.w+61].ww;
r6.xy = int2(2048,4096);	
// r6.xy = int2(1048,2096);
	
    r2.w = r3.w == 1.000000;
    r3.x = r2.w ? 1.000000 : 0;
    r3.x = r6.x ? 1.000000000e+000 : r3.x;
    r2.w = r2.w ? 0.000000000e+000 : 1.000000000e+000;
    r2.w = r6.y ? 1.000000000e+000 : r2.w;
    r2.w = r3.x * r2.w;
    r0.w = r2.w * r0.w;
    r2.w = 0.000000000e+000 < r0.w;
    if (r2.w != 0) {
      r4.xyz = log2(r4.xyz);
      r4.xyz = float3(2.200000e+000,2.200000e+000,2.200000e+000) * r4.xyz;
      r4.xyz = exp2(r4.xyz);
      r0.xyz = log2(r0.xyz);
      r0.xyz = float3(2.200000e+000,2.200000e+000,2.200000e+000) * r0.xyz;
      r0.xyz = exp2(r0.xyz);
      r5.xyz = float3(-5.000000e-001,-5.000000e-001,-5.000000e-001) + r5.xyz;
      r2.w = dot(r5.xyz, r5.xyz);
      r2.w = rsqrt(r2.w);
      r5.xyz = r5.xyz * r2.www;
      r2.xyz = r2.xyz / r3.yyy;
      r1.xyz = cb12[0].xyz + -r1.xyz;
      r2.w = dot(r1.xyz, r1.xyz);
      r2.w = rsqrt(r2.w);
      r3.xyw = r2.www * r1.xyz;
      r6.xy = cb12[183].zw * r0.ww;
      r0.w = dot(r5.xyz, r2.xyz);
      r6.z = saturate(r0.w);
      r1.xyz = r1.xyz * r2.www + r2.xyz;
      r2.w = dot(r1.xyz, r1.xyz);
      r2.w = rsqrt(r2.w);
      r1.xyz = r2.www * r1.xyz;
      r2.w = dot(r1.xyz, r3.xyw);
      r2.w = 1.000000000e+000 + -abs(r2.w);
      r2.w = max(r2.w, 0.000000000e+000);
      r6.w = r2.w * r2.w;
      r6.w = r6.w * r6.w;
      r2.w = r6.w * r2.w;
      r6.w = 1.000000000e+000 + -r5.w;
      r7.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r0.xyz;
      r8.xyz = max(r7.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
      r8.xyz = cb13[56].xxx * r8.xyz;
      r8.xyz = r8.xyz * r2.www;
      r2.w = 1.000000000e+000 + cb13[56].z;
      r2.w = -cb13[56].z * r6.w + r2.w;
      r8.xyz = r8.xyz / r2.www;
      r0.xyz = r8.xyz + r0.xyz;
      r8.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r0.xyz;
      r8.xyz = r8.xyz * r6.zzz;
      r8.xyz = float3(3.183099e-001,3.183099e-001,3.183099e-001) * r8.xyz;
      r2.w = 0.000000000e+000 < r4.w;
      if (r2.w != 0) {
        r2.w = 1.000000000e+000 + r0.w;
        r2.x = dot(r2.xyz, -r3.xyw);
        r2.x = 1.000000000e+000 + r2.x;
        r2.xw = float2(5.000000e-001,5.000000e-001) * r2.xw;
        r2.y = dot(r5.xyz, -r3.xyw);
        r2.y = 1.000000000e+000 + r2.y;
        r2.y = cb12[36].w * r2.y;
        r2.x = r2.x * r2.x;
        r2.y = 5.000000000e-001 * r2.y;
        r2.x = r2.x * r2.x + -r2.w;
        r2.x = cb12[36].x * r2.x + r2.w;
        r2.x = r2.y * r2.x;
        r2.y = cb12[36].y * r4.w;
        r7.xyz = cb12[36].zzz * r7.xyz + -r8.xyz;
        r2.yzw = r2.yyy * r7.xyz + r8.xyz;
        r8.xyz = r2.xxx * r4.www + r2.yzw;
      }
      r2.xyz = cb13[r1.w+61].xyz * r8.xyz;
      r2.xyz = r6.xxx * r2.xyz;
      r0.w = 0.000000000e+000 < r0.w;
      if (r0.w != 0) {
        r0.w = saturate(dot(r5.xyz, r1.xyz));
        r1.x = dot(r5.xyz, r3.xyw);
        r1.y = r5.w * r5.w;
        r1.z = r1.y * r1.y;
        r0.w = r0.w * r0.w;
        r1.y = r1.y * r1.y + -1.000000000e+000;
        r0.w = r0.w * r1.y + 1.000000000e+000;
        r0.w = r0.w * r0.w;
        r0.w = 3.141520023e+000 * r0.w;
        r0.w = r1.z / r0.w;
        r1.y = 1.000000000e+000 + r5.w;
        r1.y = r1.y * r1.y;
        r1.z = 1.250000000e-001 * r1.y;
        r1.y = -r1.y * 1.250000000e-001 + 1.000000000e+000;
        r2.w = r6.z * r1.y + r1.z;
        r2.w = r6.z / r2.w;
        r1.y = abs(r1.x) * r1.y + r1.z;
        r1.y = abs(r1.x) / r1.y;
        r1.y = r2.w * r1.y;
        r0.w = r1.y * r0.w;
        r0.xyz = r0.www * r0.xyz;
        r0.w = r6.z * abs(r1.x);
        r0.w = 4.000000000e+000 * r0.w;
        r0.xyz = r0.xyz / r0.www;
        r0.xyz = r0.xyz * r6.zzz;
      } else {
        r0.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
      }
      r0.xyz = cb13[r1.w+61].xyz * r0.xyz;
      r0.xyz = r6.yyy * r0.xyz;
      r0.xyz = r4.xyz * r2.xyz + r0.xyz;
      r1.xyz = saturate(r3.zzz * cb12[186].xyz + cb12[187].xyz);
      r0.w = -1.000000000e+000 + cb12[69].z;
      r0.w = r4.w * r0.w + 1.000000000e+000;
      r1.xyz = float3(-1.000000e+000,-1.000000e+000,-1.000000e+000) + r1.xyz;
      r1.xyz = r0.www * r1.xyz + float3(1.000000e+000,1.000000e+000,1.000000e+000);
      r1.xyz = cb12[69].xxx * r1.xyz + cb12[69].yyy;
      r0.xyz = r1.xyz * r0.xyz;
    } else {
      r0.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
    }
  } else {
    r0.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  }
  o0.xyz = r0.xyz;
  o0.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb3[1], immediateIndexed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_constantbuffer cb13[2362], dynamicIndexed
dcl_sampler s10, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2darray (float,float,float,float) t9
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 11
ftoi r0.xy, v0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.x, r0.xyww, t0.xyzw
round_z r1.yz, v0.xxyx
mul r2.xyzw, r1.zzzz, cb12[211].xyzw
mad r2.xyzw, cb12[210].xyzw, r1.yyyy, r2.xyzw
mad r1.xyzw, cb12[212].xyzw, r1.xxxx, r2.xyzw
add r1.xyzw, r1.xyzw, cb12[213].xyzw
div r1.xyz, r1.xyzx, r1.wwww
ftoi r1.w, cb3[0].x
imul null, r1.w, r1.w, l(9)
add r2.xyz, -r1.xyzx, cb13[r1.w + 58].xyzx
dp3 r3.x, r2.xyzx, r2.xyzx
sqrt r3.y, r3.x
lt r3.z, r3.y, cb13[r1.w + 58].w
if_nz r3.z
  ld_indexable(texture2d)(float,float,float,float) r3.zw, r0.xyww, t4.ywxz
  ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r0.xyww, t1.xyzw
  ld_indexable(texture2d)(float,float,float,float) r5.xyzw, r0.xyww, t2.xyzw
  ld_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyzw, t3.xyzw
  div r0.w, r3.y, cb13[r1.w + 58].w
  mul r6.x, r0.w, r0.w
  mad r6.x, -r6.x, r6.x, l(1.000000)
  max r6.x, r6.x, l(0.000000)
  mul r6.x, r6.x, r6.x
  lt r6.y, l(0.000000), cb13[r1.w + 63].z
  lt r6.z, l(0.000000), cb13[r1.w + 64].x
  mad r3.x, r3.x, cb13[r1.w + 63].x, l(1.000000)
  div r3.x, r6.x, r3.x
  lt r6.x, l(0.000000), r3.x
  and r6.y, r6.x, r6.y
  if_nz r6.y
    add r7.xyz, r1.xyzx, -cb13[r1.w + 58].xyzx
    div r8.xyz, r2.xyzx, r3.yyyy
    max r6.y, |r8.z|, |r8.y|
    lt r6.y, r6.y, |r8.x|
    if_nz r6.y
      lt r6.y, l(0.000000), r8.x
      movc r9.x, r6.y, r7.y, -r7.y
      mov r9.y, r7.z
      movc r10.x, r6.y, -r7.x, r7.x
      movc r6.y, r6.y, cb13[r1.w + 65].x, cb13[r1.w + 65].y
      mov r7.xy, r9.xyxx
    else 
      max r6.w, |r8.z|, |r8.x|
      lt r6.w, r6.w, |r8.y|
      if_nz r6.w
        lt r6.w, l(0.000000), r8.y
        movc r10.xy, r6.wwww, -r7.yxyy, r7.yxyy
        mov r10.z, r7.z
        movc r6.y, r6.w, cb13[r1.w + 65].z, cb13[r1.w + 65].w
        mov r7.xy, r10.yzyy
      else 
        lt r6.w, l(0.000000), r8.z
        movc r7.y, r6.w, r7.y, -r7.y
        movc r10.x, r6.w, -r7.z, r7.z
        movc r6.y, r6.w, cb13[r1.w + 66].x, cb13[r1.w + 66].y
      endif 
    endif 
    mul r7.xy, r7.xyxx, cb13[r1.w + 63].yyyy
    div r7.xy, r7.xyxx, r10.xxxx
    mad r7.xy, r7.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    ubfe r7.zw, l(0, 0, 10, 10), l(0, 0, 20, 10), r6.yyyy
    utof r7.zw, r7.zzzw
    and r6.w, r6.y, l(1023)
    utof r6.w, r6.w
    ushr r6.y, r6.y, l(30)
    utof r8.z, r6.y
    lt r6.y, l(0.000000), r6.w
    if_nz r6.y
      mad r6.yw, r7.xxxy, r6.wwww, r7.zzzw
      mul r8.xy, r6.ywyy, l(0.000977, 0.000977, 0.000000, 0.000000)
      sample_l_indexable(texture2darray)(float,float,float,float) r6.y, r8.xyzx, t9.yxzw, s10, l(0.000000)
      mad r6.y, -r0.w, l(0.990000), r6.y
      mul r6.y, r6.y, l(144.269501)
      exp r6.y, r6.y
      min r6.y, r6.y, l(1.000000)
    else 
      mov r6.y, l(1.000000)
    endif 
  else 
    mov r6.y, l(1.000000)
  endif 
  and r6.x, r6.x, r6.z
  if_nz r6.x
    mov r2.w, cb13[r1.w + 64].y
    sample_l_indexable(texturecubearray)(float,float,float,float) r2.w, r2.xyzw, t10.yzwx, s10, l(0.000000)
    mad r0.w, -r0.w, l(0.990000), r2.w
    mul r0.w, r0.w, l(144.269501)
    exp r0.w, r0.w
    min r0.w, r0.w, l(1.000000)
    mul r6.y, r0.w, r6.y
  endif 
  add r0.w, r6.y, l(-1.000000)
  mad r0.w, cb13[r1.w + 60].w, r0.w, l(1.000000)
  mul r0.w, r0.w, r3.x
  and r6.xy, l(2048, 4096, 0, 0), cb13[r1.w + 61].wwww
  eq r2.w, r3.w, l(1.000000)
  and r3.x, r2.w, l(0x3f800000)
  movc r3.x, r6.x, l(1.000000), r3.x
  movc r2.w, r2.w, l(0), l(1.000000)
  movc r2.w, r6.y, l(1.000000), r2.w
  mul r2.w, r2.w, r3.x
  mul r0.w, r0.w, r2.w
  lt r2.w, l(0.000000), r0.w
  if_nz r2.w
    log r4.xyz, r4.xyzx
    mul r4.xyz, r4.xyzx, l(2.200000, 2.200000, 2.200000, 0.000000)
    exp r4.xyz, r4.xyzx
    log r0.xyz, r0.xyzx
    mul r0.xyz, r0.xyzx, l(2.200000, 2.200000, 2.200000, 0.000000)
    exp r0.xyz, r0.xyzx
    add r5.xyz, r5.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
    dp3 r2.w, r5.xyzx, r5.xyzx
    rsq r2.w, r2.w
    mul r5.xyz, r2.wwww, r5.xyzx
    div r2.xyz, r2.xyzx, r3.yyyy
    add r1.xyz, -r1.xyzx, cb12[0].xyzx
    dp3 r2.w, r1.xyzx, r1.xyzx
    rsq r2.w, r2.w
    mul r3.xyw, r1.xyxz, r2.wwww
    mul r6.xy, r0.wwww, cb12[183].zwzz
    dp3 r0.w, r5.xyzx, r2.xyzx
    mov_sat r6.z, r0.w
    mad r1.xyz, r1.xyzx, r2.wwww, r2.xyzx
    dp3 r2.w, r1.xyzx, r1.xyzx
    rsq r2.w, r2.w
    mul r1.xyz, r1.xyzx, r2.wwww
    dp3 r2.w, r1.xyzx, r3.xywx
    add r2.w, -|r2.w|, l(1.000000)
    max r2.w, r2.w, l(0.000000)
    mul r6.w, r2.w, r2.w
    mul r6.w, r6.w, r6.w
    mul r2.w, r2.w, r6.w
    add r6.w, -r5.w, l(1.000000)
    add r7.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    max r8.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    mul r8.xyz, r8.xyzx, cb13[56].xxxx
    mul r8.xyz, r2.wwww, r8.xyzx
    add r2.w, cb13[56].z, l(1.000000)
    mad r2.w, -cb13[56].z, r6.w, r2.w
    div r8.xyz, r8.xyzx, r2.wwww
    add r0.xyz, r0.xyzx, r8.xyzx
    add r8.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r8.xyz, r6.zzzz, r8.xyzx
    mul r8.xyz, r8.xyzx, l(0.318310, 0.318310, 0.318310, 0.000000)
    lt r2.w, l(0.000000), r4.w
    if_nz r2.w
      add r2.w, r0.w, l(1.000000)
      dp3 r2.x, r2.xyzx, -r3.xywx
      add r2.x, r2.x, l(1.000000)
      mul r2.xw, r2.xxxw, l(0.500000, 0.000000, 0.000000, 0.500000)
      dp3 r2.y, r5.xyzx, -r3.xywx
      add r2.y, r2.y, l(1.000000)
      mul r2.y, r2.y, cb12[36].w
      mul r2.x, r2.x, r2.x
      mul r2.y, r2.y, l(0.500000)
      mad r2.x, r2.x, r2.x, -r2.w
      mad r2.x, cb12[36].x, r2.x, r2.w
      mul r2.x, r2.x, r2.y
      mul r2.y, r4.w, cb12[36].y
      mad r7.xyz, cb12[36].zzzz, r7.xyzx, -r8.xyzx
      mad r2.yzw, r2.yyyy, r7.xxyz, r8.xxyz
      mad r8.xyz, r2.xxxx, r4.wwww, r2.yzwy
    endif 
    mul r2.xyz, r8.xyzx, cb13[r1.w + 61].xyzx
    mul r2.xyz, r2.xyzx, r6.xxxx
    lt r0.w, l(0.000000), r0.w
    if_nz r0.w
      dp3_sat r0.w, r5.xyzx, r1.xyzx
      dp3 r1.x, r5.xyzx, r3.xywx
      mul r1.y, r5.w, r5.w
      mul r1.z, r1.y, r1.y
      mul r0.w, r0.w, r0.w
      mad r1.y, r1.y, r1.y, l(-1.000000)
      mad r0.w, r0.w, r1.y, l(1.000000)
      mul r0.w, r0.w, r0.w
      mul r0.w, r0.w, l(3.141520)
      div r0.w, r1.z, r0.w
      add r1.y, r5.w, l(1.000000)
      mul r1.y, r1.y, r1.y
      mul r1.z, r1.y, l(0.125000)
      mad r1.y, -r1.y, l(0.125000), l(1.000000)
      mad r2.w, r6.z, r1.y, r1.z
      div r2.w, r6.z, r2.w
      mad r1.y, |r1.x|, r1.y, r1.z
      div r1.y, |r1.x|, r1.y
      mul r1.y, r1.y, r2.w
      mul r0.w, r0.w, r1.y
      mul r0.xyz, r0.xyzx, r0.wwww
      mul r0.w, |r1.x|, r6.z
      mul r0.w, r0.w, l(4.000000)
      div r0.xyz, r0.xyzx, r0.wwww
      mul r0.xyz, r6.zzzz, r0.xyzx
    else 
      mov r0.xyz, l(0,0,0,0)
    endif 
    mul r0.xyz, r0.xyzx, cb13[r1.w + 61].xyzx
    mul r0.xyz, r0.xyzx, r6.yyyy
    mad r0.xyz, r4.xyzx, r2.xyzx, r0.xyzx
    mad_sat r1.xyz, r3.zzzz, cb12[186].xyzx, cb12[187].xyzx
    add r0.w, cb12[69].z, l(-1.000000)
    mad r0.w, r4.w, r0.w, l(1.000000)
    add r1.xyz, r1.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
    mad r1.xyz, r0.wwww, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mad r1.xyz, cb12[69].xxxx, r1.xyzx, cb12[69].yyyy
    mul r0.xyz, r0.xyzx, r1.xyzx
  else 
    mov r0.xyz, l(0,0,0,0)
  endif 
else 
  mov r0.xyz, l(0,0,0,0)
endif 
mov o0.xyz, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 