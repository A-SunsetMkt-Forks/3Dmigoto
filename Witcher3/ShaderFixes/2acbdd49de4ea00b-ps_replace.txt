//Water Reflections
cbuffer cb12 : register(b12)
{
  float4 cb12[24] : packoffset(c0);
}

cbuffer cb3 : register(b3)
{
  float4 cb3 : packoffset(c0);
}
SamplerState s2_s_s_s : register(s2);
Texture2D<float4> t0 : register(t0);
Texture2D<float4> t1 : register(t1);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = (uint2)v0.xy;
  r0.xy = r0.xy;
  r1.xy = (int2)r0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r1.xyz = t1.Load(r1.xyz).xyw;
  
  
float4 stereo = StereoParams.Load(0);
r1.x += 0.7*stereo.x*(r1.z - stereo.y);  

  
  r0.zw = float2(-5.000000e-001,-5.000000e-001) + r1.xy;
  r2.yz = float2(4.000000e-001,4.000000e-001) * r0.zw;
  r1.xyw = cb3.yxy / cb3.xzw;
  r2.x = r2.y * r1.x;
  r0.zw = r2.xz * r1.yw;
  r0.xy = float2(5.000000e-001,5.000000e-001) + r0.xy;
  r0.xy = r0.xy / cb12[23].xy;
  r0.xy = r0.xy * r1.yw + r0.zw;
  r0.zw = float2(5.000000e-001,5.000000e-001) / cb3.zw;
  r1.xy = cb3.xy + float2(-1.500000e+000,-1.500000e+000);
  r1.xy = r1.xy / cb3.zw;
  r0.xy = max(r0.xy, r0.zw);
  r0.xy = min(r0.xy, r1.xy);
  r0.zw = ddx_coarse(r0.xy);
  r1.xy = ddy_coarse(r0.xy);
  r1.w = 0.000000000e+000 < r1.z;
  if (r1.w != 0) {
    r1.z = r1.z * r1.z;
    r0.xyzw = t0.SampleGrad(s2_s_s_s, r0.xy, r0.zwzz, r1.xyxx).xyzw;
    r1.x = 0.000000000e+000 < r0.w;
    r2.xyz = r0.xyz / r0.www;
    r0.xyz = r1.xxx ? r2.xyz : r0.xyz;
    r0.xyz = r0.xyz * r1.zzz;
  } else {
    r0.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  }
  o0.xyz = r0.xyz;
  o0.w = 0.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//   using 3Dmigoto v1.1.23 on Tue Jun 23 10:31:08 2015
//
//
// Buffer Definitions: 
//
// cbuffer cb12
// {
//
//   float4 cb12[24];                   // Offset:    0 Size:   384
//
// }
//
// cbuffer cb3
// {
//
//   float4 cb3;                        // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// s2_s_s                            sampler      NA          NA    2        1
// t0                                texture  float4          2d    0        1
// t1                                texture  float4          2d    1        1
// cb3                               cbuffer      NA          NA    3        1
// cb12                              cbuffer      NA          NA   12        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb12[24], immediateIndexed
dcl_constantbuffer cb3[1], immediateIndexed
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 3
ftou r0.xy, v0.xyxx
utof r0.xy, r0.xyxx
ftoi r1.xy, r0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyzw, t1.xywz
add r0.zw, r1.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
mul r2.yz, r0.zzwz, l(0.000000, 0.400000, 0.400000, 0.000000)
div r1.xyw, cb3[0].yxyy, cb3[0].xzxw
mul r2.x, r1.x, r2.y
mul r0.zw, r1.yyyw, r2.xxxz
add r0.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
div r0.xy, r0.xyxx, cb12[23].xyxx
mad r0.xy, r0.xyxx, r1.ywyy, r0.zwzz
div r0.zw, l(0.000000, 0.000000, 0.500000, 0.500000), cb3[0].zzzw
add r1.xy, l(-1.500000, -1.500000, 0.000000, 0.000000), cb3[0].xyxx
div r1.xy, r1.xyxx, cb3[0].zwzz
max r0.xy, r0.zwzz, r0.xyxx
min r0.xy, r1.xyxx, r0.xyxx
deriv_rtx_coarse r0.zw, r0.xxxy
deriv_rty_coarse r1.xy, r0.xyxx
lt r1.w, l(0.000000), r1.z
if_nz r1.w
  mul r1.z, r1.z, r1.z
  sample_d_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t0.xyzw, s2, r0.zwzz, r1.xyxx
  lt r1.x, l(0.000000), r0.w
  div r2.xyz, r0.xyzx, r0.wwww
  movc r0.xyz, r1.xxxx, r2.xyzx, r0.xyzx
  mul r0.xyz, r1.zzzz, r0.xyzx
else 
  mov r0.xyz, l(0,0,0,0)
endif 
mov o0.xyz, r0.xyzx
mov o0.w, l(0)
ret 
// Approximately 34 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 