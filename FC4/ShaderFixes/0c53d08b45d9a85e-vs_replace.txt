// Skybox & reflection of skybox
cbuffer CViewportShaderParameterProvider : register(b0)
{
  float4 _AmbientColorMultiplier : packoffset(c0);
  float4 _AmbientOcclusionRanges_SunOcclusionFactor : packoffset(c1);
  float4 _BloomAdaptationFactor : packoffset(c2);
  float4 _CameraDirection_FOVDeg : packoffset(c3);
  float4 _CameraDistances : packoffset(c4);
  float4 _CameraNearPlaneSize : packoffset(c5);
  float4 _CameraPositionFractions_ZOffsetWS : packoffset(c6);
  float4 _CameraPositionFractions_ZOffsetWS_Previous : packoffset(c7);
  float4 _CameraPosition_DistanceScale : packoffset(c8);
  float4 _CameraPosition_DistanceScale_Previous : packoffset(c9);
  float4x4 _CullingViewProjectionMatrix : packoffset(c10);
  float4 _DepthScale : packoffset(c14);
  float4 _DepthTextureRcpSize : packoffset(c15);
  float4 _DepthTextureScaleOffset : packoffset(c16);
  float4 _FogParams : packoffset(c17);
  float4 _FogSHB : packoffset(c18);
  float4 _FogSHG : packoffset(c19);
  float4 _FogSHR : packoffset(c20);
  float4 _HeightFogParams : packoffset(c21);
  float4x4 _InvProjectionMatrix : packoffset(c22);
  float4x4 _InvViewMatrix : packoffset(c26);
  float4x4 _ProjectionMatrix : packoffset(c30);
  float4 _TempSunDirection : packoffset(c34);
  float4x4 _ViewMatrix : packoffset(c35);
  float4 _ViewPoint_ShadowProjDepthMin : packoffset(c39);
  float4x4 _ViewProjectionMatrix : packoffset(c40);
  float4x4 _ViewRotProjectionMatrix : packoffset(c44);
  float4x4 _ViewRotProjectionMatrix_Previous : packoffset(c48);
  float4 _ViewportSize : packoffset(c52);
  float2 _MotionVectorOffsets : packoffset(c53);
  float3 _CameraRight : packoffset(c54);
  float3 _CameraUp : packoffset(c55);
  float3 _EnvironmentMapColorOffset : packoffset(c56);
  float3 _EnvironmentMapColorScale : packoffset(c57);
}

cbuffer CCloudDomeParameterProvider : register(b1)
{
  float4 _CloudColorOppositeSun : packoffset(c0);
  float4 _CloudColorSun : packoffset(c1);
  float4 _CloudMaskScaleOffset : packoffset(c2);
  float4 _CloudSettings : packoffset(c3);
  float4 _MeshDecompression : packoffset(c4);
  float4x4 _Model : packoffset(c5);
  float4x4 _ModelViewProj : packoffset(c9);
  float4 _RimColor : packoffset(c13);
  float4 _SunColor : packoffset(c14);
  float3 _SunDirection : packoffset(c15);
  float3 _TintAndMultiply : packoffset(c16);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : position0,
  int2 v1 : texcoord0,
  int2 v2 : texcoord1,
  float4 v3 : normal0,
  float4 v4 : fog0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float2 o3 : TEXCOORD2,
  out float2 p3 : TEXCOORD3)
{
  float4 r0,r1;
  uint4 bitmask;
  r0.x = dot(v0.xyz, v0.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = v0.xyz * r0.xxx;
  r1.xyz = float3(1.000000e+000,1.000000e+000,-1.000000e+000) * r0.xyz;
  o1.x = r0.x;
  r1.w = 1.000000000e+000;
  o0.x = dot(r1.xyzw, _ModelViewProj._m00_m10_m20_m30);
  o0.y = dot(r1.xyzw, _ModelViewProj._m01_m11_m21_m31);
  o0.z = dot(r1.xyzw, _ModelViewProj._m02_m12_m22_m32);
  o0.w = dot(r1.xyzw, _ModelViewProj._m03_m13_m23_m33);

// Shader is used for both skybox & sky reflections. Check render target
// dimensions and only adjust when it is square or matche the dimensions of the
// low quality water render target:
if (_ViewportSize.x == 640 && _ViewportSize.y == 360 /* Low quality water */
 || _ViewportSize.x == _ViewportSize.y) { /* Medium - Ultra quality water */
	float4 stereo = StereoParams.Load(0);
	o0.x -= stereo.x * (o0.w - stereo.y) * 2;
}

  o1.yz = -r1.yz;
  o1.w = 0.000000000e+000;
  r1.w = v0.w;
  r0.w = dot(r1.xyzw, _Model._m00_m10_m20_m30);
  r0.y = dot(r1.xyzw, _Model._m01_m11_m21_m31);
  r0.z = dot(r1.xyzw, _Model._m02_m12_m22_m32);
  r0.xyz = -_CameraPosition_DistanceScale.yzx + r0.yzw;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r1.yzw = r0.xyz * r0.www;
  r0.x = _HeightFogParams.y * r0.y;
  r0.x = max(r0.x, -1.250000000e+002);
  o2.w = min(r0.x, 1.250000000e+002);
  r1.x = 1.000000000e+000;
  r0.x = dot(_FogSHR.xyzw, r1.xyzw);
  r0.y = dot(_FogSHG.xyzw, r1.xyzw);
  r0.z = dot(_FogSHB.xyzw, r1.xyzw);
  o2.xyz = max(r0.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r0.xy = v1.xy;
  r0.xy = r0.xy * _MeshDecompression.ww + _MeshDecompression.zz;
  o3.x = _CloudSettings.y * 3.000000119e-001 + r0.x;
  o3.y = r0.y;
  r0.xy = v2.xy;
  r0.xy = r0.xy * _MeshDecompression.ww + _MeshDecompression.zz;
  p3.x = _CloudSettings.y + r0.x;
  p3.y = -_CloudSettings.y * 1.299999952e+000 + r0.y;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer CViewportShaderParameterProvider
// {
//
//   float4 _AmbientColorMultiplier;    // Offset:    0 Size:    16 [unused]
//   float4 _AmbientOcclusionRanges_SunOcclusionFactor;// Offset:   16 Size:    16 [unused]
//   float4 _BloomAdaptationFactor;     // Offset:   32 Size:    16 [unused]
//   float4 _CameraDirection_FOVDeg;    // Offset:   48 Size:    16 [unused]
//   float4 _CameraDistances;           // Offset:   64 Size:    16 [unused]
//   float4 _CameraNearPlaneSize;       // Offset:   80 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS;// Offset:   96 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS_Previous;// Offset:  112 Size:    16 [unused]
//   float4 _CameraPosition_DistanceScale;// Offset:  128 Size:    16
//   float4 _CameraPosition_DistanceScale_Previous;// Offset:  144 Size:    16 [unused]
//   float4x4 _CullingViewProjectionMatrix;// Offset:  160 Size:    64 [unused]
//   float4 _DepthScale;                // Offset:  224 Size:    16 [unused]
//   float4 _DepthTextureRcpSize;       // Offset:  240 Size:    16 [unused]
//   float4 _DepthTextureScaleOffset;   // Offset:  256 Size:    16 [unused]
//   float4 _FogParams;                 // Offset:  272 Size:    16 [unused]
//   float4 _FogSHB;                    // Offset:  288 Size:    16
//   float4 _FogSHG;                    // Offset:  304 Size:    16
//   float4 _FogSHR;                    // Offset:  320 Size:    16
//   float4 _HeightFogParams;           // Offset:  336 Size:    16
//   float4x4 _InvProjectionMatrix;     // Offset:  352 Size:    64 [unused]
//   float4x4 _InvViewMatrix;           // Offset:  416 Size:    64 [unused]
//   float4x4 _ProjectionMatrix;        // Offset:  480 Size:    64 [unused]
//   float4 _TempSunDirection;          // Offset:  544 Size:    16 [unused]
//   float4x4 _ViewMatrix;              // Offset:  560 Size:    64 [unused]
//   float4 _ViewPoint_ShadowProjDepthMin;// Offset:  624 Size:    16 [unused]
//   float4x4 _ViewProjectionMatrix;    // Offset:  640 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix; // Offset:  704 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix_Previous;// Offset:  768 Size:    64 [unused]
//   float4 _ViewportSize;              // Offset:  832 Size:    16 [unused]
//   float2 _MotionVectorOffsets;       // Offset:  848 Size:     8 [unused]
//   float3 _CameraRight;               // Offset:  864 Size:    12 [unused]
//   float3 _CameraUp;                  // Offset:  880 Size:    12 [unused]
//   float3 _EnvironmentMapColorOffset; // Offset:  896 Size:    12 [unused]
//   float3 _EnvironmentMapColorScale;  // Offset:  912 Size:    12 [unused]
//
// }
//
// cbuffer CCloudDomeParameterProvider
// {
//
//   float4 _CloudColorOppositeSun;     // Offset:    0 Size:    16 [unused]
//   float4 _CloudColorSun;             // Offset:   16 Size:    16 [unused]
//   float4 _CloudMaskScaleOffset;      // Offset:   32 Size:    16 [unused]
//   float4 _CloudSettings;             // Offset:   48 Size:    16
//   float4 _MeshDecompression;         // Offset:   64 Size:    16
//   float4x4 _Model;                   // Offset:   80 Size:    64
//   float4x4 _ModelViewProj;           // Offset:  144 Size:    64
//   float4 _RimColor;                  // Offset:  208 Size:    16 [unused]
//   float4 _SunColor;                  // Offset:  224 Size:    16 [unused]
//   float3 _SunDirection;              // Offset:  240 Size:    12 [unused]
//   float3 _TintAndMultiply;           // Offset:  256 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CViewportShaderParameterProvider    cbuffer      NA          NA    0        1
// CCloudDomeParameterProvider       cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// position                 0   xyzw        0     NONE   float   xyzw
// texcoord                 0   xy          1     NONE     int   xy  
// texcoord                 1   xy          2     NONE     int   xy  
// normal                   0   xyzw        3     NONE   float       
// fog                      0   xyzw        4     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xy          3     NONE   float   xy  
// TEXCOORD                 3     zw        3     NONE   float     zw
//
vs_4_0
dcl_constantbuffer cb0[22], immediateIndexed
dcl_constantbuffer cb1[13], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xy
dcl_output o3.zw
dcl_temps 2
dp3 r0.x, v0.xyzx, v0.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v0.xyzx
mul r1.xyz, r0.xyzx, l(1.000000, 1.000000, -1.000000, 0.000000)
mov o1.x, r0.x
mov r1.w, l(1.000000)
dp4 o0.x, r1.xyzw, cb1[9].xyzw
dp4 o0.y, r1.xyzw, cb1[10].xyzw
dp4 o0.z, r1.xyzw, cb1[11].xyzw
dp4 o0.w, r1.xyzw, cb1[12].xyzw
mov o1.yz, -r1.yyzy
mov o1.w, l(0)
mov r1.w, v0.w
dp4 r0.w, r1.xyzw, cb1[5].xyzw
dp4 r0.y, r1.xyzw, cb1[6].xyzw
dp4 r0.z, r1.xyzw, cb1[7].xyzw
add r0.xyz, r0.yzwy, -cb0[8].yzxy
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r1.yzw, r0.wwww, r0.xxyz
mul r0.x, r0.y, cb0[21].y
max r0.x, r0.x, l(-125.000000)
min o2.w, r0.x, l(125.000000)
mov r1.x, l(1.000000)
dp4 r0.x, cb0[20].xyzw, r1.xyzw
dp4 r0.y, cb0[19].xyzw, r1.xyzw
dp4 r0.z, cb0[18].xyzw, r1.xyzw
max o2.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
itof r0.xy, v1.xyxx
mad r0.xy, r0.xyxx, cb1[4].wwww, cb1[4].zzzz
mad o3.x, cb1[3].y, l(0.300000), r0.x
mov o3.y, r0.y
itof r0.xy, v2.xyxx
mad r0.xy, r0.xyxx, cb1[4].wwww, cb1[4].zzzz
add o3.z, r0.x, cb1[3].y
mad o3.w, -cb1[3].y, l(1.300000), r0.y
ret 
// Approximately 37 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  