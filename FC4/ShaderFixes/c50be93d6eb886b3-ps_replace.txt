
cbuffer CViewportShaderParameterProvider : register(b0)
{
  float4 _AmbientColorMultiplier : packoffset(c0);
  float4 _AmbientOcclusionRanges_SunOcclusionFactor : packoffset(c1);
  float4 _BloomAdaptationFactor : packoffset(c2);
  float4 _CameraDirection_FOVDeg : packoffset(c3);
  float4 _CameraDistances : packoffset(c4);
  float4 _CameraNearPlaneSize : packoffset(c5);
  float4 _CameraPositionFractions_ZOffsetWS : packoffset(c6);
  float4 _CameraPositionFractions_ZOffsetWS_Previous : packoffset(c7);
  float4 _CameraPosition_DistanceScale : packoffset(c8);
  float4 _CameraPosition_DistanceScale_Previous : packoffset(c9);
  float4x4 _CullingViewProjectionMatrix : packoffset(c10);
  float4 _DepthScale : packoffset(c14);
  float4 _DepthTextureRcpSize : packoffset(c15);
  float4 _DepthTextureScaleOffset : packoffset(c16);
  float4 _FogParams : packoffset(c17);
  float4 _FogSHB : packoffset(c18);
  float4 _FogSHG : packoffset(c19);
  float4 _FogSHR : packoffset(c20);
  float4 _HeightFogParams : packoffset(c21);
  float4x4 _InvProjectionMatrix : packoffset(c22);
  float4x4 _InvViewMatrix : packoffset(c26);
  float4x4 _ProjectionMatrix : packoffset(c30);
  float4 _TempSunDirection : packoffset(c34);
  float4x4 _ViewMatrix : packoffset(c35);
  float4 _ViewPoint_ShadowProjDepthMin : packoffset(c39);
  float4x4 _ViewProjectionMatrix : packoffset(c40);
  float4x4 _ViewRotProjectionMatrix : packoffset(c44);
  float4x4 _ViewRotProjectionMatrix_Previous : packoffset(c48);
  float4 _ViewportSize : packoffset(c52);
  float2 _MotionVectorOffsets : packoffset(c53);
  float3 _CameraRight : packoffset(c54);
  float3 _CameraUp : packoffset(c55);
  float3 _EnvironmentMapColorOffset : packoffset(c56);
  float3 _EnvironmentMapColorScale : packoffset(c57);
}

cbuffer SRenderStateParameterProvider : register(b1)
{
  float4 _AlphaValues : packoffset(c0);
}

cbuffer Decal : register(b2)
{
  float2 _ParallaxHeightAndOffset : packoffset(c0);
  float4 _ParallaxScale : packoffset(c1);
  float4 _DiffuseColor1 : packoffset(c2);
  float2 _SpecularTiling1 : packoffset(c3);
  float2 _AlphaTiling1 : packoffset(c3.z);
  float4 _DiffuseAndNormalTiling1 : packoffset(c4);
  float4 _Settings : packoffset(c5);
  bool _TerrainDecal : packoffset(c6);
  bool _AlbedoOnly : packoffset(c6.y);
  float _DepthOffset : packoffset(c6.z);
  float4 _MaterialPickingID : packoffset(c7);
}
SamplerState ResolvedNormalGBuffer__SampObj___s : register(s0);
SamplerState DiffuseTexture1Wrap__SampObj___s : register(s1);
SamplerState NormalTexture1Wrap__SampObj___s : register(s2);
SamplerState SpecularTexture1Wrap__SampObj___s : register(s3);
Texture2D<float4> ResolvedNormalGBuffer__TexObj__ : register(t0);
Texture2D<float4> DiffuseTexture1Wrap__TexObj__ : register(t1);
Texture2D<float4> NormalTexture1Wrap__TexObj__ : register(t2);
Texture2D<float4> SpecularTexture1Wrap__TexObj__ : register(t3);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float3 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  float3 v4 : TEXCOORD3,
  float3 v5 : TEXCOORD4,
  float2 v6 : TEXCOORD5,
  uint v7 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask;
  r0.xyzw = _DiffuseAndNormalTiling1.xyzw * v6.xyxy;
  r1.xyzw = DiffuseTexture1Wrap__TexObj__.Sample(DiffuseTexture1Wrap__SampObj___s, r0.xy).xyzw;
  r0.xyzw = NormalTexture1Wrap__TexObj__.Sample(NormalTexture1Wrap__SampObj___s, r0.zw).xyzw;
  r0.z = -_AlphaValues.x + r1.w;
  r0.z = r0.z < 0.000000000e+000;
  if (r0.z != 0) discard;
  r2.xy = (int2)v0.xy;
  r2.xy = (int2)r2.xy & int2(1,1);
  r0.z = r2.x == r2.y;
  r1.xyz = _DiffuseColor1.xyz * r1.xyz;
  r2.x = dot(float3(2.500000e-001,5.000000e-001,2.500000e-001), r1.xyz);
  r2.y = dot(float2(5.000000e-001,-5.000000e-001), r1.xz);
  r2.z = dot(float3(-2.500000e-001,5.000000e-001,-2.500000e-001), r1.xyz);
  r1.xyz = float3(0.000000e+000,4.980392e-001,4.980392e-001) + r2.xyz;
  o0.y = r0.z ? r1.y : r1.z;
  o0.x = sqrt(r1.x);
  r1.xy = _SpecularTiling1.xy * v6.xy;
  r2.xyzw = SpecularTexture1Wrap__TexObj__.Sample(SpecularTexture1Wrap__SampObj___s, r1.xy).xyzw;
  r0.z = _Settings.y * r2.y;
  o2.y = r2.x;
  o0.z = r0.z * r0.x;
  r0.xy = r0.wy * float2(2.007874e+000,2.007874e+000) + float2(-1.000000e+000,-1.000000e+000);
  r0.xy = _Settings.xx * r0.xy;
  o0.w = r1.w;
  r0.z = r1.w;
  r1.xyz = v3.yxz * r0.yyy;
  r1.xyz = r0.xxx * v4.yxz + r1.xyz;
  r0.x = dot(r0.xy, r0.xy);
  r0.x = min(r0.x, 1.000000000e+000);
  r0.x = 1.000000000e+000 + -r0.x;
  r0.x = sqrt(r0.x);
  r0.xyw = r0.xxx * v2.yxz + r1.xyz;
  r1.x = dot(r0.xyw, r0.xyw);
  r1.x = rsqrt(r1.x);
  r1.yz = _ViewportSize.zw * v0.xy;
  r2.xyzw = ResolvedNormalGBuffer__TexObj__.Sample(ResolvedNormalGBuffer__SampObj___s, r1.yz).xyzw;
  r1.y = 3.000000000e+000 * r2.w;
  r2.xyz = r2.xyz * float3(1.414214e+000,1.414214e+000,1.414214e+000) + float3(-7.071068e-001,-7.071068e-001,-7.071068e-001);
  r1.y = (uint)r1.y;
  r1.z = dot(r2.xyz, r2.xyz);
  r1.z = min(r1.z, 1.000000000e+000);
  r1.z = 1.000000000e+000 + -r1.z;
  r1.z = sqrt(r1.z);
  r2.w = r1.y ? r1.z : r2.x;
  r3.xy = r1.yy == float2(1.000000e+000,2.000000e+000);
  r4.z = r1.y ? r2.x : r1.z;
  r5.xy = r3.xy ? r1.zz : r2.yz;
  r1.y = r3.x ? r2.y : r2.w;
  r5.z = r3.y ? r2.z : r1.y;
  r4.xy = float2(2.000000e+000,2.000000e+000);
  r2.xyz = r4.xyz * r4.zzz;
  r5.w = -2.000000000e+000;
  r2.xyz = r2.xyz * r5.zyw + float3(0.000000e+000,0.000000e+000,1.000000e+000);
  r3.yz = r5.zx;
  r4.xyz = r5.yww * r5.xxx;
  r3.x = 2.000000000e+000;
  r2.xyz = r4.xyz * r3.xyz + r2.xyz;
  r0.xyw = r0.xyw * r1.xxx + -r2.xyz;
  r0.xyw = r1.www * r0.xyw + r2.xyz;
  r1.xyz = r0.xyw * float3(1.000000e+000,-1.000000e+000,1.000000e+000) + float3(0.000000e+000,0.000000e+000,1.000000e+000);
  r1.x = dot(r1.xyz, r1.xyz);
  r1.x = rsqrt(r1.x);
  r2.x = r1.x * r0.x;
  r2.y = r1.x * -r0.y;
  r0.x = 1.000000000e+000 + r0.w;
  r2.w = r0.x * r1.x;
  r0.x = abs(r2.y) >= abs(r2.x);
  r0.yw = r2.yx < float2(0.000000e+000,0.000000e+000);
  r0.y = r0.y ? 3.000000000e+000 : 2.000000000e+000;
  r0.w = r0.w ? 1.000000 : 0;
  r0.x = r0.x ? r0.y : r0.w;
  r0.x = 5.000000000e-001 * r0.x;
  r0.x = (uint)r0.x;
  r0.yw = float2(-0.000000e+000,-0.000000e+000) >= abs(r2.xy);
  r0.y = r0.w ? r0.y : 0;
  r0.x = r0.y ? 2 : r0.x;
  r0.y = max(abs(r2.y), abs(r2.x));
  r0.y = r0.y < abs(r2.w);
  r0.x = r0.y ? 3 : r0.x;
  r1.xy = r0.xx ? r2.xw : r2.wx;
  r0.yw = r0.xx == float2(1.000000e+000,2.000000e+000);
  r0.x = r0.x;
  o1.w = 3.333333433e-001 * r0.x;
  r0.x = r0.y ? r2.y : r1.y;
  r1.z = r0.y ? r2.w : r2.y;
  r1.w = r0.w ? r2.w : 0;
  r0.x = r0.w ? 0.000000000e+000 : r0.x;
  r0.y = 0.000000000e+000 < r0.x;
  r0.x = r0.x < 0.000000000e+000;
  r0.x = ((int)r0.x ? -1 : 0) + ((int)r0.y ? 1 : 0);
  r0.x = r0.x;
  r0.xyw = r1.xzw * r0.xxx;
  o1.xyz = r0.xyw * float3(7.071068e-001,7.071068e-001,7.071068e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  o2.w = r0.z;
  o3.w = r0.z;
  o2.xz = float2(7.843138e-003,1.000000e+000);
  o3.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer CViewportShaderParameterProvider
// {
//
//   float4 _AmbientColorMultiplier;    // Offset:    0 Size:    16 [unused]
//   float4 _AmbientOcclusionRanges_SunOcclusionFactor;// Offset:   16 Size:    16 [unused]
//   float4 _BloomAdaptationFactor;     // Offset:   32 Size:    16 [unused]
//   float4 _CameraDirection_FOVDeg;    // Offset:   48 Size:    16 [unused]
//   float4 _CameraDistances;           // Offset:   64 Size:    16 [unused]
//   float4 _CameraNearPlaneSize;       // Offset:   80 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS;// Offset:   96 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS_Previous;// Offset:  112 Size:    16 [unused]
//   float4 _CameraPosition_DistanceScale;// Offset:  128 Size:    16 [unused]
//   float4 _CameraPosition_DistanceScale_Previous;// Offset:  144 Size:    16 [unused]
//   float4x4 _CullingViewProjectionMatrix;// Offset:  160 Size:    64 [unused]
//   float4 _DepthScale;                // Offset:  224 Size:    16 [unused]
//   float4 _DepthTextureRcpSize;       // Offset:  240 Size:    16 [unused]
//   float4 _DepthTextureScaleOffset;   // Offset:  256 Size:    16 [unused]
//   float4 _FogParams;                 // Offset:  272 Size:    16 [unused]
//   float4 _FogSHB;                    // Offset:  288 Size:    16 [unused]
//   float4 _FogSHG;                    // Offset:  304 Size:    16 [unused]
//   float4 _FogSHR;                    // Offset:  320 Size:    16 [unused]
//   float4 _HeightFogParams;           // Offset:  336 Size:    16 [unused]
//   float4x4 _InvProjectionMatrix;     // Offset:  352 Size:    64 [unused]
//   float4x4 _InvViewMatrix;           // Offset:  416 Size:    64 [unused]
//   float4x4 _ProjectionMatrix;        // Offset:  480 Size:    64 [unused]
//   float4 _TempSunDirection;          // Offset:  544 Size:    16 [unused]
//   float4x4 _ViewMatrix;              // Offset:  560 Size:    64 [unused]
//   float4 _ViewPoint_ShadowProjDepthMin;// Offset:  624 Size:    16 [unused]
//   float4x4 _ViewProjectionMatrix;    // Offset:  640 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix; // Offset:  704 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix_Previous;// Offset:  768 Size:    64 [unused]
//   float4 _ViewportSize;              // Offset:  832 Size:    16
//   float2 _MotionVectorOffsets;       // Offset:  848 Size:     8 [unused]
//   float3 _CameraRight;               // Offset:  864 Size:    12 [unused]
//   float3 _CameraUp;                  // Offset:  880 Size:    12 [unused]
//   float3 _EnvironmentMapColorOffset; // Offset:  896 Size:    12 [unused]
//   float3 _EnvironmentMapColorScale;  // Offset:  912 Size:    12 [unused]
//
// }
//
// cbuffer SRenderStateParameterProvider
// {
//
//   float4 _AlphaValues;               // Offset:    0 Size:    16
//
// }
//
// cbuffer Decal
// {
//
//   float2 _ParallaxHeightAndOffset;   // Offset:    0 Size:     8 [unused]
//   float4 _ParallaxScale;             // Offset:   16 Size:    16 [unused]
//   float4 _DiffuseColor1;             // Offset:   32 Size:    16
//   float2 _SpecularTiling1;           // Offset:   48 Size:     8
//   float2 _AlphaTiling1;              // Offset:   56 Size:     8 [unused]
//   float4 _DiffuseAndNormalTiling1;   // Offset:   64 Size:    16
//   float4 _Settings;                  // Offset:   80 Size:    16
//   bool _TerrainDecal;                // Offset:   96 Size:     4 [unused]
//   bool _AlbedoOnly;                  // Offset:  100 Size:     4 [unused]
//   float _DepthOffset;                // Offset:  104 Size:     4 [unused]
//   float4 _MaterialPickingID;         // Offset:  112 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// ResolvedNormalGBuffer__SampObj__    sampler      NA          NA    0        1
// DiffuseTexture1Wrap__SampObj__    sampler      NA          NA    1        1
// NormalTexture1Wrap__SampObj__     sampler      NA          NA    2        1
// SpecularTexture1Wrap__SampObj__    sampler      NA          NA    3        1
// ResolvedNormalGBuffer__TexObj__    texture  float4          2d    0        1
// DiffuseTexture1Wrap__TexObj__     texture  float4          2d    1        1
// NormalTexture1Wrap__TexObj__      texture  float4          2d    2        1
// SpecularTexture1Wrap__TexObj__    texture  float4          2d    3        1
// CViewportShaderParameterProvider    cbuffer      NA          NA    0        1
// SRenderStateParameterProvider     cbuffer      NA          NA    1        1
// Decal                             cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyz         1     NONE   float       
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float       
// TEXCOORD                 5   xy          6     NONE   float   xy  
// SV_IsFrontFace           0   x           7    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[53], immediateIndexed
dcl_constantbuffer cb1[1], immediateIndexed
dcl_constantbuffer cb2[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps_siv linear noperspective centroid v0.xy, position
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v6.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 6
mul r0.xyzw, v6.xyxy, cb2[4].xyzw
sample r1.xyzw, r0.xyxx, t1.xyzw, s1
sample r0.xyzw, r0.zwzz, t2.xyzw, s2
add r0.z, r1.w, -cb1[0].x
lt r0.z, r0.z, l(0.000000)
discard_nz r0.z
ftoi r2.xy, v0.xyxx
and r2.xy, r2.xyxx, l(1, 1, 0, 0)
ieq r0.z, r2.x, r2.y
mul r1.xyz, r1.xyzx, cb2[2].xyzx
dp3 r2.x, l(0.250000, 0.500000, 0.250000, 0.000000), r1.xyzx
dp2 r2.y, l(0.500000, -0.500000, 0.000000, 0.000000), r1.xzxx
dp3 r2.z, l(-0.250000, 0.500000, -0.250000, 0.000000), r1.xyzx
add r1.xyz, r2.xyzx, l(0.000000, 0.498039, 0.498039, 0.000000)
movc o0.y, r0.z, r1.y, r1.z
sqrt o0.x, r1.x
mul r1.xy, v6.xyxx, cb2[3].xyxx
sample r2.xyzw, r1.xyxx, t3.xyzw, s3
mul r0.z, r2.y, cb2[5].y
mov o2.y, r2.x
mul o0.z, r0.x, r0.z
mad r0.xy, r0.wyww, l(2.007874, 2.007874, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r0.xy, r0.xyxx, cb2[5].xxxx
mov o0.w, r1.w
mov r0.z, r1.w
mul r1.xyz, r0.yyyy, v3.yxzy
mad r1.xyz, r0.xxxx, v4.yxzy, r1.xyzx
dp2 r0.x, r0.xyxx, r0.xyxx
min r0.x, r0.x, l(1.000000)
add r0.x, -r0.x, l(1.000000)
sqrt r0.x, r0.x
mad r0.xyw, r0.xxxx, v2.yxyz, r1.xyxz
dp3 r1.x, r0.xywx, r0.xywx
rsq r1.x, r1.x
mul r1.yz, v0.xxyx, cb0[52].zzwz
sample r2.xyzw, r1.yzyy, t0.xyzw, s0
mul r1.y, r2.w, l(3.000000)
mad r2.xyz, r2.xyzx, l(1.414214, 1.414214, 1.414214, 0.000000), l(-0.707107, -0.707107, -0.707107, 0.000000)
ftou r1.y, r1.y
dp3 r1.z, r2.xyzx, r2.xyzx
min r1.z, r1.z, l(1.000000)
add r1.z, -r1.z, l(1.000000)
sqrt r1.z, r1.z
movc r2.w, r1.y, r1.z, r2.x
ieq r3.xy, r1.yyyy, l(1, 2, 0, 0)
movc r4.z, r1.y, r2.x, r1.z
movc r5.xy, r3.xyxx, r1.zzzz, r2.yzyy
movc r1.y, r3.x, r2.y, r2.w
movc r5.z, r3.y, r2.z, r1.y
mov r4.xy, l(2.000000,2.000000,0,0)
mul r2.xyz, r4.zzzz, r4.xyzx
mov r5.w, l(-2.000000)
mad r2.xyz, r2.xyzx, r5.zywz, l(0.000000, 0.000000, 1.000000, 0.000000)
mov r3.yz, r5.zzxz
mul r4.xyz, r5.xxxx, r5.ywwy
mov r3.x, l(2.000000)
mad r2.xyz, r4.xyzx, r3.xyzx, r2.xyzx
mad r0.xyw, r0.xyxw, r1.xxxx, -r2.xyxz
mad r0.xyw, r1.wwww, r0.xyxw, r2.xyxz
mad r1.xyz, r0.xywx, l(1.000000, -1.000000, 1.000000, 0.000000), l(0.000000, 0.000000, 1.000000, 0.000000)
dp3 r1.x, r1.xyzx, r1.xyzx
rsq r1.x, r1.x
mul r2.x, r0.x, r1.x
mul r2.y, -r0.y, r1.x
add r0.x, r0.w, l(1.000000)
mul r2.w, r1.x, r0.x
ge r0.x, |r2.y|, |r2.x|
lt r0.yw, r2.yyyx, l(0.000000, 0.000000, 0.000000, 0.000000)
movc r0.y, r0.y, l(3.000000), l(2.000000)
and r0.w, r0.w, l(0x3f800000)
movc r0.x, r0.x, r0.y, r0.w
mul r0.x, r0.x, l(0.500000)
ftou r0.x, r0.x
ge r0.yw, l(0.000000, -0.000000, 0.000000, -0.000000), |r2.xxxy|
and r0.y, r0.w, r0.y
movc r0.x, r0.y, l(2), r0.x
max r0.y, |r2.y|, |r2.x|
lt r0.y, r0.y, |r2.w|
movc r0.x, r0.y, l(3), r0.x
movc r1.xy, r0.xxxx, r2.xwxx, r2.wxww
ieq r0.yw, r0.xxxx, l(0, 1, 0, 2)
utof r0.x, r0.x
mul o1.w, r0.x, l(0.333333)
movc r0.x, r0.y, r2.y, r1.y
movc r1.z, r0.y, r2.w, r2.y
and r1.w, r2.w, r0.w
movc r0.x, r0.w, l(0), r0.x
lt r0.y, l(0.000000), r0.x
lt r0.x, r0.x, l(0.000000)
iadd r0.x, r0.x, -r0.y
itof r0.x, r0.x
mul r0.xyw, r0.xxxx, r1.xzxw
mad o1.xyz, r0.xywx, l(0.707107, 0.707107, 0.707107, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o2.w, r0.z
mov o3.w, r0.z
mov o2.xz, l(0.007843,0,1.000000,0)
mov o3.xyz, l(0,0,0,0)
ret 
// Approximately 98 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer CViewportShaderParameterProvider
// {
//
//   float4 _AmbientColorMultiplier;    // Offset:    0 Size:    16 [unused]
//   float4 _AmbientOcclusionRanges_SunOcclusionFactor;// Offset:   16 Size:    16 [unused]
//   float4 _BloomAdaptationFactor;     // Offset:   32 Size:    16 [unused]
//   float4 _CameraDirection_FOVDeg;    // Offset:   48 Size:    16 [unused]
//   float4 _CameraDistances;           // Offset:   64 Size:    16 [unused]
//   float4 _CameraNearPlaneSize;       // Offset:   80 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS;// Offset:   96 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS_Previous;// Offset:  112 Size:    16 [unused]
//   float4 _CameraPosition_DistanceScale;// Offset:  128 Size:    16 [unused]
//   float4 _CameraPosition_DistanceScale_Previous;// Offset:  144 Size:    16 [unused]
//   float4x4 _CullingViewProjectionMatrix;// Offset:  160 Size:    64 [unused]
//   float4 _DepthScale;                // Offset:  224 Size:    16 [unused]
//   float4 _DepthTextureRcpSize;       // Offset:  240 Size:    16 [unused]
//   float4 _DepthTextureScaleOffset;   // Offset:  256 Size:    16 [unused]
//   float4 _FogParams;                 // Offset:  272 Size:    16 [unused]
//   float4 _FogSHB;                    // Offset:  288 Size:    16 [unused]
//   float4 _FogSHG;                    // Offset:  304 Size:    16 [unused]
//   float4 _FogSHR;                    // Offset:  320 Size:    16 [unused]
//   float4 _HeightFogParams;           // Offset:  336 Size:    16 [unused]
//   float4x4 _InvProjectionMatrix;     // Offset:  352 Size:    64 [unused]
//   float4x4 _InvViewMatrix;           // Offset:  416 Size:    64 [unused]
//   float4x4 _ProjectionMatrix;        // Offset:  480 Size:    64 [unused]
//   float4 _TempSunDirection;          // Offset:  544 Size:    16 [unused]
//   float4x4 _ViewMatrix;              // Offset:  560 Size:    64 [unused]
//   float4 _ViewPoint_ShadowProjDepthMin;// Offset:  624 Size:    16 [unused]
//   float4x4 _ViewProjectionMatrix;    // Offset:  640 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix; // Offset:  704 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix_Previous;// Offset:  768 Size:    64 [unused]
//   float4 _ViewportSize;              // Offset:  832 Size:    16
//   float2 _MotionVectorOffsets;       // Offset:  848 Size:     8 [unused]
//   float3 _CameraRight;               // Offset:  864 Size:    12 [unused]
//   float3 _CameraUp;                  // Offset:  880 Size:    12 [unused]
//   float3 _EnvironmentMapColorOffset; // Offset:  896 Size:    12 [unused]
//   float3 _EnvironmentMapColorScale;  // Offset:  912 Size:    12 [unused]
//
// }
//
// cbuffer SRenderStateParameterProvider
// {
//
//   float4 _AlphaValues;               // Offset:    0 Size:    16
//
// }
//
// cbuffer Decal
// {
//
//   float2 _ParallaxHeightAndOffset;   // Offset:    0 Size:     8 [unused]
//   float4 _ParallaxScale;             // Offset:   16 Size:    16 [unused]
//   float4 _DiffuseColor1;             // Offset:   32 Size:    16
//   float2 _SpecularTiling1;           // Offset:   48 Size:     8
//   float2 _AlphaTiling1;              // Offset:   56 Size:     8 [unused]
//   float4 _DiffuseAndNormalTiling1;   // Offset:   64 Size:    16
//   float4 _Settings;                  // Offset:   80 Size:    16
//   bool _TerrainDecal;                // Offset:   96 Size:     4 [unused]
//   bool _AlbedoOnly;                  // Offset:  100 Size:     4 [unused]
//   float _DepthOffset;                // Offset:  104 Size:     4 [unused]
//   float4 _MaterialPickingID;         // Offset:  112 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// ResolvedNormalGBuffer__SampObj___s    sampler      NA          NA    0        1
// DiffuseTexture1Wrap__SampObj___s    sampler      NA          NA    1        1
// NormalTexture1Wrap__SampObj___s    sampler      NA          NA    2        1
// SpecularTexture1Wrap__SampObj___s    sampler      NA          NA    3        1
// ResolvedNormalGBuffer__TexObj__    texture  float4          2d    0        1
// DiffuseTexture1Wrap__TexObj__     texture  float4          2d    1        1
// NormalTexture1Wrap__TexObj__      texture  float4          2d    2        1
// SpecularTexture1Wrap__TexObj__    texture  float4          2d    3        1
// CViewportShaderParameterProvider    cbuffer      NA          NA    0        1
// SRenderStateParameterProvider     cbuffer      NA          NA    1        1
// Decal                             cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyz         1     NONE   float       
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float       
// TEXCOORD                 5   xy          6     NONE   float   xy  
// SV_IsFrontFace           0   x           7    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[53], immediateIndexed
dcl_constantbuffer cb1[1], immediateIndexed
dcl_constantbuffer cb2[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v6.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 6
mul r0.xyzw, v6.xyxy, cb2[4].xyzw
sample r1.xyzw, r0.xyxx, t1.xyzw, s1
add r0.x, r1.w, -cb1[0].x
lt r0.x, r0.x, l(0.000000)
discard_nz r0.x
sample r0.xyzw, r0.zwzz, t2.xyzw, s2
round_z r2.xy, v0.xyxx
ftoi r2.xy, r2.xyxx
and r2.xy, r2.xyxx, l(1, 1, 0, 0)
itof r2.xy, r2.xyxx
eq r0.z, r2.y, r2.x
mul r1.xyz, r1.xyzx, cb2[2].xyzx
dp3 r2.x, l(0.250000, 0.500000, 0.250000, 0.000000), r1.xyzx
dp2 r2.y, l(0.500000, -0.500000, 0.000000, 0.000000), r1.xzxx
dp3 r2.z, l(-0.250000, 0.500000, -0.250000, 0.000000), r1.xyzx
add r1.xyz, r2.xyzx, l(0.000000, 0.498039, 0.498039, 0.000000)
movc o0.y, r0.z, r1.y, r1.z
sqrt o0.x, r1.x
mul r1.xy, v6.xyxx, cb2[3].xyxx
sample r2.xyzw, r1.xyxx, t3.xyzw, s3
mul r0.z, r2.y, cb2[5].y
mul o0.z, r0.x, r0.z
mad r0.xy, r0.wyww, l(2.007874, 2.007874, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r0.xy, r0.xyxx, cb2[5].xxxx
mul r1.xyz, r0.yyyy, v3.yxzy
mad r1.xyz, r0.xxxx, v4.yxzy, r1.xyzx
dp2 r0.x, r0.xyxx, r0.xyxx
min r0.x, r0.x, l(1.000000)
add r0.x, -r0.x, l(1.000000)
sqrt r0.x, r0.x
mad r0.xyz, r0.xxxx, v2.yxzy, r1.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r1.xy, v0.xyxx, cb0[52].zwzz
sample r3.xyzw, r1.xyxx, t0.xyzw, s0
mul r1.x, r3.w, l(3.000000)
mad r2.yzw, r3.xxyz, l(0.000000, 1.414214, 1.414214, 1.414214), l(0.000000, -0.707107, -0.707107, -0.707107)
ftou r1.x, r1.x
utof r1.x, r1.x
dp3 r1.y, r2.yzwy, r2.yzwy
min r1.y, r1.y, l(1.000000)
add r1.y, -r1.y, l(1.000000)
sqrt r1.y, r1.y
ne r1.z, l(0.000000, 0.000000, 0.000000, 0.000000), r1.x
movc r3.x, r1.z, r1.y, r2.y
eq r3.yz, r1.xxxx, l(0.000000, 1.000000, 2.000000, 0.000000)
movc r4.z, r1.z, r2.y, r1.y
movc r5.xz, r3.zzyz, r1.yyyy, r2.wwzw
movc r1.x, r3.y, r2.z, r3.x
movc r5.y, r3.z, r2.w, r1.x
mov r4.xy, l(2.000000,2.000000,0,0)
mul r1.xyz, r4.zzzz, r4.xyzx
mov r5.w, l(-2.000000)
mad r1.xyz, r1.xyzx, r5.yxwy, l(0.000000, 0.000000, 1.000000, 0.000000)
mul r2.yzw, r5.zzzz, r5.xxww
mov r5.x, l(2.000000)
mad r1.xyz, r2.yzwy, r5.xyzx, r1.xyzx
mad r0.xyz, r0.xyzx, r0.wwww, -r1.xyzx
mad r0.xyz, r1.wwww, r0.xyzx, r1.xyzx
mad r1.xyz, r0.xyzx, l(1.000000, -1.000000, 1.000000, 0.000000), l(0.000000, 0.000000, 1.000000, 0.000000)
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.y, r0.x, r0.w
mul r1.x, -r0.y, r0.w
add r0.x, r0.z, l(1.000000)
mul r1.z, r0.w, r0.x
ge r0.x, |r1.x|, |r1.y|
lt r0.yz, r1.xxyx, l(0.000000, 0.000000, 0.000000, 0.000000)
movc r0.y, r0.y, l(3.000000), l(2.000000)
and r0.z, r0.z, l(0x3f800000)
movc r0.x, r0.x, r0.y, r0.z
mul r0.x, r0.x, l(0.500000)
ftou r0.x, r0.x
utof r0.x, r0.x
ge r0.yz, l(0.000000, -0.000000, -0.000000, 0.000000), |r1.yyxy|
and r0.y, r0.z, r0.y
movc r0.x, r0.y, l(2.000000), r0.x
max r0.y, |r1.y|, |r1.x|
lt r0.y, r0.y, |r1.z|
movc r0.x, r0.y, l(3.000000), r0.x
ne r0.y, l(0.000000, 0.000000, 0.000000, 0.000000), r0.x
movc r3.xy, r0.yyyy, r1.yzyy, r1.zyzz
eq r0.yz, r0.xxxx, l(0.000000, 1.000000, 2.000000, 0.000000)
mul o1.w, r0.x, l(0.333333)
movc r0.x, r0.y, r1.x, r3.y
movc r3.z, r0.y, r1.z, r1.x
and r3.w, r1.z, r0.z
movc r0.x, r0.z, l(0), r0.x
lt r0.y, l(0.000000), r0.x
lt r0.x, r0.x, l(0.000000)
and r0.y, r0.y, l(1)
iadd r0.x, r0.y, r0.x
itof r0.x, r0.x
mul r0.xyz, r0.xxxx, r3.xzwx
mad o1.xyz, r0.xyzx, l(0.707107, 0.707107, 0.707107, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.w, r1.w
mov o2.xz, l(0.007843,0,1.000000,0)
mov o2.y, r2.x
mov o2.w, r1.w
mov o3.xyz, l(0,0,0,0)
mov o3.w, r1.w
ret 
// Approximately 102 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
