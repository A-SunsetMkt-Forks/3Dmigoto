Texture2D<float4> t7 : register(t7);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb6 : register(b6)
{
  float4 cb6[8];
}

cbuffer cb12 : register(b12)
{
  float4 cb12[214];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float3 v1 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = cb6[6].w * 5.000000000e-001 + -5.000000000e-001;
  r1.xy = (uint2)v0.xy;
  r0.yz = r1.xy;
  r2.xyzw = cb12[211].xyzw * r0.zzzz;
  r2.xyzw = cb12[210].xyzw * r0.yyyy + r2.xyzw;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r0.y = t7.Load(r1.xyw).x;
  r1.xyz = t2.Load(r1.xyz).xyz;
  r1.xyz = float3(-5.000000e-001,-5.000000e-001,-5.000000e-001) + r1.xyz;
  r2.xyzw = cb12[212].xyzw * r0.yyyy + r2.xyzw;
  r2.xyzw = cb12[213].xyzw + r2.xyzw;
  r2.xyz = r2.xyz / r2.www;
  r2.w = 1.000000000e+000;
  r3.x = dot(r2.xyzw, cb6[0].xyzw);
  r3.y = dot(r2.xyzw, cb6[1].xyzw);
  r3.z = dot(r2.xyzw, cb6[2].xyzw);
  r0.xyz = r3.xyz * cb6[6].www + -r0.xxx;
  r2.xy = -cb6[4].xy;
  r2.z = -0.000000000e+000;
  r2.xyz = r2.xyz + r0.xyz;
  r2.xyz = r2.xyz < float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r0.w = (int)r2.y | (int)r2.x;
  r0.w = (int)r2.z | (int)r0.w;
  if (r0.w != 0) discard;
  r2.xy = cb6[4].zw + -r0.xy;
  r2.z = 1.000000000e+000 + -r0.z;
  r0.xyzw = t0.Sample(s0_s, r0.xy).xyzw;
  r0.xyzw = cb6[7].xyzw * r0.xyzw;
  r2.xyz = r2.xyz < float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r1.w = (int)r2.y | (int)r2.x;
  r1.w = (int)r2.z | (int)r1.w;
  if (r1.w != 0) discard;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r1.w = dot(v1.xyz, v1.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = v1.xyz * r1.www;
  r1.x = dot(r1.xyz, r2.xyz);
  r1.x = -cb6[6].x + r1.x;
  r1.x = r1.x < 0.000000000e+000;
  if (r1.x != 0) discard;
  o0.w = cb6[6].y * r0.w;
  o0.xyz = r0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_constantbuffer cb6[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t7
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyz
dcl_output o0.xyzw
dcl_temps 4
mad r0.x, cb6[6].w, l(0.500000), l(-0.500000)
ftou r1.xy, v0.xyxx
utof r0.yz, r1.xxyx
mul r2.xyzw, r0.zzzz, cb12[211].xyzw
mad r2.xyzw, cb12[210].xyzw, r0.yyyy, r2.xyzw
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.y, r1.xyww, t7.yxzw
ld_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyzw, t2.xyzw
add r1.xyz, r1.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
mad r2.xyzw, cb12[212].xyzw, r0.yyyy, r2.xyzw
add r2.xyzw, r2.xyzw, cb12[213].xyzw
div r2.xyz, r2.xyzx, r2.wwww
mov r2.w, l(1.000000)
dp4 r3.x, r2.xyzw, cb6[0].xyzw
dp4 r3.y, r2.xyzw, cb6[1].xyzw
dp4 r3.z, r2.xyzw, cb6[2].xyzw
mad r0.xyz, r3.xyzx, cb6[6].wwww, -r0.xxxx
mov r2.xy, -cb6[4].xyxx
mov r2.z, l(-0.000000)
add r2.xyz, r0.xyzx, r2.xyzx
lt r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.w, r2.y, r2.x
or r0.w, r2.z, r0.w
discard_nz r0.w
add r2.xy, -r0.xyxx, cb6[4].zwzz
add r2.z, -r0.z, l(1.000000)
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t0.xyzw, s0
mul r0.xyzw, r0.xyzw, cb6[7].xyzw
lt r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r1.w, r2.y, r2.x
or r1.w, r2.z, r1.w
discard_nz r1.w
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
dp3 r1.w, v1.xyzx, v1.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, v1.xyzx
dp3 r1.x, r1.xyzx, r2.xyzx
add r1.x, r1.x, -cb6[6].x
lt r1.x, r1.x, l(0.000000)
discard_nz r1.x
mul o0.w, r0.w, cb6[6].y
mov o0.xyz, r0.xyzx
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer cb6
// {
//
//   float4 cb6[8];                     // Offset:    0 Size:   128
//
// }
//
// cbuffer cb12
// {
//
//   float4 cb12[214];                  // Offset:    0 Size:  3424
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// s0_s                              sampler      NA          NA    0        1
// t0                                texture  float4          2d    0        1
// t2                                texture  float4          2d    2        1
// t7                                texture  float4          2d    7        1
// cb6                               cbuffer      NA          NA    6        1
// cb12                              cbuffer      NA          NA   12        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb6[8], immediateIndexed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t7
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyz
dcl_output o0.xyzw
dcl_temps 4
mad r0.x, cb6[6].w, l(0.500000), l(-0.500000)
ftou r0.yz, v0.xxyx
utof r0.yz, r0.yyzy
mul r1.xyzw, r0.zzzz, cb12[211].xyzw
mad r1.xyzw, cb12[210].xyzw, r0.yyyy, r1.xyzw
ftoi r2.xy, r0.yzyy
mov r2.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.y, r2.xyww, t7.yxzw
mad r1.xyzw, cb12[212].xyzw, r0.yyyy, r1.xyzw
add r1.xyzw, r1.xyzw, cb12[213].xyzw
div r1.xyz, r1.xyzx, r1.wwww
mov r1.w, l(1.000000)
dp4 r3.x, r1.xyzw, cb6[0].xyzw
dp4 r3.y, r1.xyzw, cb6[1].xyzw
dp4 r3.z, r1.xyzw, cb6[2].xyzw
mad r0.xyz, r3.xyzx, cb6[6].wwww, -r0.xxxx
add r1.xy, r0.xyxx, -cb6[4].xyxx
mov r1.z, r0.z
lt r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.w, r1.x, r1.y
or r0.w, r0.w, r1.z
discard_nz r0.w
add r1.xy, -r0.xyxx, cb6[4].zwzz
add r1.z, -r0.z, l(1.000000)
lt r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.z, r1.x, r1.y
or r0.z, r0.z, r1.z
discard_nz r0.z
ld_indexable(texture2d)(float,float,float,float) r1.xyz, r2.xyzw, t2.xyzw
add r1.xyz, r1.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
dp3 r0.z, r1.xyzx, r1.xyzx
rsq r0.z, r0.z
mul r1.xyz, r0.zzzz, r1.xyzx
dp3 r0.z, v1.xyzx, v1.xyzx
rsq r0.z, r0.z
mul r2.xyz, r0.zzzz, v1.xyzx
dp3 r0.z, r1.xyzx, r2.xyzx
add r0.z, r0.z, -cb6[6].x
lt r0.z, r0.z, l(0.000000)
discard_nz r0.z
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t0.xyzw, s0
mul r0.xyzw, r0.xyzw, cb6[7].xyzw
mul o0.w, r0.w, cb6[6].y
mov o0.xyz, r0.xyzx
ret 
// Approximately 45 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
