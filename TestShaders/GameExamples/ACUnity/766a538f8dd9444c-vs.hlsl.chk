
Texture2D<float4> StereoParams : register(t125);

void main(
  float3 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Position0,
  out float2 o1 : TEXCOORD0,
  out float2 p1 : TEXCOORD1)
{
  o0.xyz = v0.xyz;
  o0.w = 1.000000000e+000;
  // o1.xyzw = v1.xyxy * float4(2.000000e+000,-2.000000e+000,1.000000e+000,1.000000e+000) + float4(-1.000000e+000,1.000000e+000,0.000000e+000,0.000000e+000);

// manually fix split output
o1.xy = v1.xy * float2(2.000000e+000,-2.000000e+000) + float2(-1.000000e+000,1.000000e+000);
p1.xy = v1.xy * float2(1.000000e+000,1.000000e+000) + float2(0.000000e+000,0.000000e+000);  
return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_input v0.xyz
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o1.zw
mov o0.xyz, v0.xyzx
mov o0.w, l(1.000000)
mad o1.xyzw, v1.xyxy, l(2.000000, -2.000000, 1.000000, 1.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
ret 
// Approximately 4 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
