// nvidia god rays (stage 2/2)

cbuffer cb0 : register(b0)
{
  row_major float4x4 g_mViewProj : packoffset(c0);
  row_major float4x4 g_mViewProjInv : packoffset(c4);
  row_major float4x4 g_mLightProj[4] : packoffset(c8);
  row_major float4x4 g_mLightProjInv[4] : packoffset(c24);
  float3 g_vEyePosition : packoffset(c40);
  float3 g_vLightPosition : packoffset(c41);
  float3 g_vSigmaAbsorption : packoffset(c42);
  float3 g_vSigmaScatter : packoffset(c43);
  float g_fDistanceScale : packoffset(c40.w);
  float g_fBufferWidthInv : packoffset(c41.w);
  float g_fBufferHeightInv : packoffset(c42.w);
  float g_fResMultiplier : packoffset(c43.w);
  float4 g_vCascadeOffsetAndScale[4] : packoffset(c44);
  float4 g_vLightDir : packoffset(c48);
  float4 g_vAirlightParams : packoffset(c49);
  float4 g_vCascadeTessFactor : packoffset(c50);
  float4 g_vShadowMapDim : packoffset(c51);
  float4 g_vSunColor : packoffset(c52);
  float4 g_vIntensity : packoffset(c53);
  uint g_uCascadeArrayIndex[4] : packoffset(c54);
}
SamplerState g_sPoint_s : register(s0);
Texture2D<float> g_tGodraysBuffer : register(t0);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask;
  r0.x = g_fResMultiplier * g_fBufferWidthInv;
  r0.y = g_fResMultiplier * g_fBufferHeightInv;

// Pushes god rays back to infinity - not accurate, but better than leaving
// them at screen depth. Will do for now - might revisit this later to see if I
// can improve on it, but for now there are more important issues to work on.

// Related shaders:
// VS 4809501df9cb5567 PS 9d24bfaec258ad8c <-- inputs look promising, but no luck moving it yet
// VS 6f9b30f90b4f45bc PS 928e51837769f738 <-- alternatively can move to infinity here
// VS 6f9b30f90b4f45bc PS 8974b39534db1a47 <-- this one, final copy to screen

float4 stereo = StereoParams.Load(0);
float separation = stereo.x; float convergence = stereo.y;
v1.x -= separation / 2;

  r1.xy = v1.xy / r0.xy;
  r1.zw = frac(r1.xy);
  r1.xy = trunc(r1.xy);
  r2.xy = float2(1.000000e+000,1.000000e+000) + -r1.wz;
  r3.yz = r2.xy * r1.zw;
  r3.x = r2.y * r2.x;
  r3.w = r1.z * r1.w;
  r0.w = dot(r3.xyzw, float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000));
  r2.xyzw = r3.xyzw / r0.wwww;
  r0.z = 0.000000000e+000;
  r3.xyzw = r1.xyxy * r0.xyxy + r0.xzzy;
  r0.z = g_tGodraysBuffer.SampleLevel(g_sPoint_s, r3.xy, 0.000000000e+000).x;
  r0.w = g_tGodraysBuffer.SampleLevel(g_sPoint_s, r3.zw, 0.000000000e+000).x;
  r0.z = r0.z * r2.y;
  r1.zw = r1.xy * r0.xy;
  r0.xy = r1.xy * r0.xy + r0.xy;
  r0.x = g_tGodraysBuffer.SampleLevel(g_sPoint_s, r0.xy, 0.000000000e+000).x;
  r0.y = g_tGodraysBuffer.SampleLevel(g_sPoint_s, r1.zw, 0.000000000e+000).x;
  r0.y = r0.y * r2.x + r0.z;
  r0.y = r0.w * r2.z + r0.y;
  r0.x = saturate(r0.x * r2.w + r0.y);
  r0.x = sqrt(r0.x);
  r0.y = r0.x * g_vIntensity.y + 1.000000000e+000;
  r0.xzw = g_vSunColor.xyz * r0.xxx;
  o0.xyz = g_vIntensity.xxx * r0.xzw;
  r0.x = -g_vIntensity.y * 5.000000000e-001 + r0.y;
  r0.y = -g_vIntensity.y * 5.000000000e-001 + 1.000000000e+000;
  r0.x = max(r0.y, r0.x);
  r0.y = g_vIntensity.y * 5.000000000e-001 + 1.000000000e+000;
  o0.w = min(r0.y, r0.x);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cb0
// {
//
//   row_major float4x4 g_mViewProj;    // Offset:    0 Size:    64 [unused]
//   row_major float4x4 g_mViewProjInv; // Offset:   64 Size:    64 [unused]
//   row_major float4x4 g_mLightProj[4];// Offset:  128 Size:   256 [unused]
//   row_major float4x4 g_mLightProjInv[4];// Offset:  384 Size:   256 [unused]
//   float3 g_vEyePosition;             // Offset:  640 Size:    12 [unused]
//   float3 g_vLightPosition;           // Offset:  656 Size:    12 [unused]
//   float3 g_vSigmaAbsorption;         // Offset:  672 Size:    12 [unused]
//   float3 g_vSigmaScatter;            // Offset:  688 Size:    12 [unused]
//   float g_fDistanceScale;            // Offset:  652 Size:     4 [unused]
//   float g_fBufferWidthInv;           // Offset:  668 Size:     4
//   float g_fBufferHeightInv;          // Offset:  684 Size:     4
//   float g_fResMultiplier;            // Offset:  700 Size:     4
//   float4 g_vCascadeOffsetAndScale[4];// Offset:  704 Size:    64 [unused]
//   float4 g_vLightDir;                // Offset:  768 Size:    16 [unused]
//   float4 g_vAirlightParams;          // Offset:  784 Size:    16 [unused]
//   float4 g_vCascadeTessFactor;       // Offset:  800 Size:    16 [unused]
//   float4 g_vShadowMapDim;            // Offset:  816 Size:    16 [unused]
//   float4 g_vSunColor;                // Offset:  832 Size:    16
//   float4 g_vIntensity;               // Offset:  848 Size:    16
//   uint g_uCascadeArrayIndex[4];      // Offset:  864 Size:    52 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_sPoint                          sampler      NA          NA    0        1
// g_tGodraysBuffer                  texture   float          2d    0        1
// cb0                               cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[54], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
mul r0.x, cb0[41].w, cb0[43].w
mul r0.y, cb0[42].w, cb0[43].w
div r1.xy, v1.xyxx, r0.xyxx
frc r1.zw, r1.xxxy
round_z r1.xy, r1.xyxx
add r2.xy, -r1.wzww, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r3.yz, r1.zzwz, r2.xxyx
mul r3.x, r2.x, r2.y
mul r3.w, r1.w, r1.z
dp4 r0.w, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
div r2.xyzw, r3.xyzw, r0.wwww
mov r0.z, l(0)
mad r3.xyzw, r1.xyxy, r0.xyxy, r0.xzzy
sample_l_indexable(texture2d)(float,float,float,float) r0.z, r3.xyxx, t0.yzxw, s0, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.zwzz, t0.yzwx, s0, l(0.000000)
mul r0.z, r2.y, r0.z
mul r1.zw, r0.xxxy, r1.xxxy
mad r0.xy, r1.xyxx, r0.xyxx, r0.xyxx
sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.xyzw, s0, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.zwzz, t0.yxzw, s0, l(0.000000)
mad r0.y, r0.y, r2.x, r0.z
mad r0.y, r0.w, r2.z, r0.y
mad_sat r0.x, r0.x, r2.w, r0.y
sqrt r0.x, r0.x
mad r0.y, r0.x, cb0[53].y, l(1.000000)
mul r0.xzw, r0.xxxx, cb0[52].xxyz
mul o0.xyz, r0.xzwx, cb0[53].xxxx
mad r0.x, -cb0[53].y, l(0.500000), r0.y
mad r0.y, -cb0[53].y, l(0.500000), l(1.000000)
max r0.x, r0.y, r0.x
mad r0.y, cb0[53].y, l(0.500000), l(1.000000)
min o0.w, r0.y, r0.x
ret 
// Approximately 33 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
